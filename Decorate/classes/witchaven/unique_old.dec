//Every weapon inherits from this class, so its up to you if the weapon can use the shield or not
//Altfire throws a healing potion (if you got one)
Actor WTWeapon : Weapon
{
	states
	{
	Spawn:
		NULL A 0
		stop
	Select:
		TNT1 A 1 A_Raise
		loop
	Deselect:
		TNT1 A 1 A_Lower
		loop
	Ready:
		TNT1 A 1
		loop
	Fire:
		goto Deselect
		
	//Potion stuff +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	//Please change this for each weapon, to display the proper graphic
	Altfire:
		TNT1 A 0 ACS_NamedExecuteAlways("SamsaraWitchaven",0,1) //Throws potion if you got
		goto AltCoolDown
	AltNormal:
		TNT1 A 24
		goto Ready
	MegaAlt:
		goto AltCooldown
		
	//Shield stuff +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	//If a weapon shall use the shield, make sure it calls A_GunFlash
	//Then give in "Select:" the WTWeaponActive and in "Deselect:" take it away
	Flash:
    ShieldEntry:
		TNT1 A 1
		//Is the shield completely destroyed?
		TNT1 A 0 A_JumpIfInventory("WTShieldUsed",1,2)
		TNT1 A 0 A_Jump(256,2)
		TNT1 A 0 A_JumpIfInventory("WTShieldCounter",1,1)
		goto ShieldClear
		//Picked up a shield, even though you got one?
		TNT1 A 0 A_JumpIfInventory("WTShieldTrigger",2,"ShieldRefresh")
		//Receiving a completely new shield?
		TNT1 A 0 A_JumpIfInventory("WTShieldTrigger",1,2)
		TNT1 A 0 A_Jump(256,2)
		TNT1 A 0 A_JumpIfInventory("WTShieldUsed",1,1)
		goto ShieldInit
		//Stop showing the shield?
		TNT1 A 0 A_JumpIfInventory("WTWeaponActive",1,1)
		goto ShieldStop
		//Finally start showing the shield and protect player?
		TNT1 A 0 A_JumpIfInventory("WTWeaponActive",1,1)
		loop
		TNT1 A 0 A_JumpIfInventory("WTShieldUsed",1,1)
		loop
		TNT1 A 0 A_JumpIfInventory("WTShieldCounter",1,1)
		loop
		TNT1 A 0 A_JumpIfInventory("WTShieldTrigger",1,1)
		loop
		TNT1 A 0
		goto ShieldLoop
		
    ShieldClear:
		TNT1 A 1 ACS_NamedExecuteAlways("SamsaraWitchaven", 0, 4, 11)
		TNT1 A 0 A_TakeInventory("WTShieldTrigger",999)
		TNT1 A 0 A_TakeInventory("WTShieldUsed",999)
		TNT1 A 0 A_TakeInventory("WTShieldCounter",999) //Make sure the counters are REALLY gone
		goto ShieldEntry
		
	ShieldRefresh:
		TNT1 A 1 //ACS_NamedExecuteAlways("SamsaraWitchaven", 0, 4, 10)
		TNT1 A 0 A_GiveInventory("WTShieldCounter",50)
		TNT1 A 0 A_TakeInventory("WTShieldTrigger",999)
		TNT1 A 0 A_GiveInventory("WTShieldTrigger",1)
		TNT1 A 0 A_GiveInventory("WTShieldUsed",1) //Make sure
		goto ShieldEntry
		
	ShieldStop:
		TNT1 A 1
		stop
		
	ShieldInit:
		TNT1 A 1 ACS_NamedExecuteAlways("SamsaraWitchaven", 0, 4, 10)
		TNT1 A 0 A_GiveInventory("WTShieldCounter",50)
		TNT1 A 0 A_GiveInventory("WTShieldUsed",1)
		goto ShieldLoop
		
	ShieldLoop:
		TNT1 A 0 A_JumpIfInventory("WTWeaponActive",1,1)
		goto ShieldStop
		TNT1 A 0 A_JumpIfInventory("WTShieldCounter",1,1)
		goto ShieldEntry
		TNT1 A 0 A_JumpIfInventory("WTShieldTrigger",2,"ShieldRefresh")
		TNT1 A 0 A_JumpIfInventory("WTShieldDisable",1,"ShieldLoop_InActive")
		TNT1 A 0 A_JumpIfInventory("CoopModeOn",1,"ShieldLoop_Coop")
		WW99 D 0 A_JumpIfInventory("WTShieldCounter",10,2)
		WW99 D 1 A_FireCustomMissile("WTShieldProjectile",-10,0)
		loop
		WW99 C 0 A_JumpIfInventory("WTShieldCounter",25,2)
		WW99 C 1 A_FireCustomMissile("WTShieldProjectile",-10,0)
		loop
		WW99 B 0 A_JumpIfInventory("WTShieldCounter",40,2)
		WW99 B 1 A_FireCustomMissile("WTShieldProjectile",-10,0)
		loop
		WW99 A 1 A_FireCustomMissile("WTShieldProjectile",-10,0)
		loop

	ShieldLoop_InActive:
		TNT1 A 0 A_JumpIfInventory("WTWeaponActive",1,1)
		goto ShieldStop
		TNT1 A 0 A_JumpIfInventory("WTShieldCounter",1,1)
		goto ShieldEntry
		WW99 D 0 A_JumpIfInventory("WTShieldCounter",10,2)
		WW99 D 1 //A_FireCustomMissile("WTShieldProjectile",-10,0)
		goto ShieldLoop
		WW99 C 0 A_JumpIfInventory("WTShieldCounter",25,2)
		WW99 C 1 //A_FireCustomMissile("WTShieldProjectile",-10,0)
		goto ShieldLoop
		WW99 B 0 A_JumpIfInventory("WTShieldCounter",40,2)
		WW99 B 1 //A_FireCustomMissile("WTShieldProjectile",-10,0)
		goto ShieldLoop
		WW99 A 1 //A_FireCustomMissile("WTShieldProjectile",-10,0)
		goto ShieldLoop
		
	ShieldLoop_Coop:
		WW99 D 0 A_JumpIfInventory("WTShieldCounter",10,2)
		WW99 D 1 A_FireCustomMissile("WTShieldProjectile_Coop",-10,0)
		goto ShieldLoop
		WW99 C 0 A_JumpIfInventory("WTShieldCounter",25,2)
		WW99 C 1 A_FireCustomMissile("WTShieldProjectile_Coop",-10,0)
		goto ShieldLoop
		WW99 B 0 A_JumpIfInventory("WTShieldCounter",40,2)
		WW99 B 1 A_FireCustomMissile("WTShieldProjectile_Coop",-10,0)
		goto ShieldLoop
		WW99 A 1 A_FireCustomMissile("WTShieldProjectile_Coop",-10,0)
		goto ShieldLoop
	}
}

//The Samsara ACS script give the trigger, nothing else
Actor WTShieldTrigger : WTCounter { inventory.maxamount 2}
Actor WTShieldUsed : WTBoolean {}
Actor WTWeaponActive : WTBoolean {}
Actor WTShieldDisable : WTBoolean {}
Actor WTShieldCounter : WTCounter { inventory.maxamount 50 }

Actor WTShieldProjectile
{
	PROJECTILE
	//species "Player"
	//These 3 flags (and he amount of health) make a projectile shootable
	+SHOOTABLE
	+SOLID
	-NOBLOCKMAP
	
	//Custom flags
	+MOVEWITHSECTOR
	+NOBLOOD //Spawns Bulletpuffs if attacked
	+THRUSPECIES
	+NOCLIP //Else you would get stuck
	+NOICEDEATH
	+NOTARGETSWITCH
	-GHOST
	
	Damage (0)
	Radius 24
	Height 40
	Speed 12 //Range
	Health 1
	states
	{
	Spawn:
		TNT1 A 2 A_DamageMaster(12)
		stop
	Death:
		PLAY A 0 A_JumpIf(health >= 1,"DontDecrease") //If not shot, dont drain the shield
		goto DrainLow
	DrainLow:
		PLAY A 0 A_GiveToTarget("WTShieldDecrease",1)
		stop
	DrainMid: //Deprecated
		PLAY A 0 A_GiveToTarget("WTShieldDecreaseMega",1)
		stop
	DrainHigh: //Deprecated
		PLAY A 0 A_GiveToTarget("WTShieldDecreaseGiga",1)
		stop
	DontDecrease:
		TNT1 A 0
		stop
	}
}

Actor WTShieldProjectile_Coop : WTShieldProjectile
{
  //damagefactor "normal", 0.0
  damagefactor "Pistol", 0.0
  DamageFactor "DoomFist", 0.0
  damagefactor "ZorchPistol", 0.0
  damagefactor "Wraithverge", 0.0
  damagefactor "zorch", 0.0
  //damagefactor "fire", 0.0
  //damagefactor "MarathonFire", 0.0
  //damagefactor "MarathonPlasmaFire", 0.0
  //damagefactor "ice", 0.0
  //damagefactor "slime", 0.0
  damagefactor "bfg", 0.0
  damagefactor "bfgspray", 0.0
  damagefactor "disintegrate", 0.0
  //damagefactor "electric", 0.0
  DamageFactor "BFG", 0.0
  DamageFactor "BFGSpray", 0.0
  //DamageFactor "Poison", 0.0
  DamageFactor "PoisonCloud", 0.0
  DamageFactor "Mace", 0.0
  DamageFactor "DragonClaw", 0.0
  DamageFactor "WolfenFlamethrower", 0.0
  DamageFactor "DukeDamage", 0.0
  DamageFactor "DukeExplosive", 0.0
  DamageFactor "DukeSpectral", 0.0
  DamageFactor "MightyBoot", 0.0
  DamageFactor "DukeIce", 0.0
  DamageFactor "DukePistol", 0.0
  DamageFactor "MarathonPistol", 0.0
  //DamageFactor "Explosive", 0.0
  //DamageFactor "LostSoul64Explosion", 0.0
  DamageFactor "DoomPlasma", 0.0
  DamageFactor "CorvusCrossbow", 0.0
  DamageFactor "CorvusHellstaff", 0.0
  DamageFactor "CorvusHellstaffTomed", 0.0
  DamageFactor "MarathonPlasma", 0.0
  DamageFactor "BJSpear", 0.0
  //DamageFactor "DoomCacodemon", 0.0
  //DamageFactor "DoomHellNoble", 0.0
  //DamageFactor "DoomSpiderPlasma", 0.0
  //DamageFactor "DoomTheseGuysAreTheBest", 0.0
  //DamageFactor "HereNitrogolem", 0.0
  //DamageFactor "HereAxeGreen", 0.0
  //DamageFactor "HereAxeRed", 0.0
  //DamageFactor "Wizard", 0.0
  //DamageFactor "HereLichWind", 0.0
  //DamageFactor "HereDsparil", 0.0
  //DamageFactor "HexBishop", 0.0
  //DamageFactor "HexSlaughtaur", 0.0
  //DamageFactor "HexGreenFire", 0.0
  //DamageFactor "HexStalkerShot", 0.0
  //DamageFactor "HexHeresiarchPurple", 0.0
  DamageFactor "QuakePistol", 0.0
  DamageFactor "NotQuadded", 0.0
  DamageFactor "SpectralNoQuad", 0.0
  DamageFactor "WTMelee", 0.0
  DamageFactor "Nuke", 0.0

  DamageFactor "MarathonFusion", 1.0
  DamageFactor "Kamikaze", 1.0
  DamageFactor "ZorchKamikaze", 1.0
  DamageFactor "Suicide", 1.0
  DamageFactor "Telefrag", 1.0
}

Actor WTShieldDecrease : WTACSTrigger
{
	States
	{
	Spawn:
		TNT1 A 1
		stop
	Pickup:
		stop
	Use:
		TNT1 A 1 A_TakeInventory("WTShieldCounter",1)
		stop
	}
}

Actor WTShieldDecreaseMega : WTACSTrigger
{
	States
	{
	Spawn:
		NULL A 0
		stop
	Pickup:
		stop
	Use:
		TNT1 A 1 A_TakeInventory("WTShieldCounter",2)
		stop
	}
}

Actor WTShieldDecreaseGiga : WTACSTrigger
{
	States
	{
	Spawn:
		NULL A 0
		stop
	Pickup:
		stop
	Use:
		TNT1 A 1 A_TakeInventory("WTShieldCounter",3) //Not sure if 3 or 4...
		stop
	}
}