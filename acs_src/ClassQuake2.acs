Script "Q2Scripts" (void)
{
	ACS_NamedExecuteWithResult("Q2PowerupSounds");
	ACS_NamedExecuteWithResult("Q2HUDHPDown");
	ACS_NamedExecuteWithResult("Q2HUDArmorDown");
	ACS_NamedExecuteWithResult("Q2JumpCheck");
	ACS_NamedExecuteWithResult("Q2CrouchCheck");
}

Script "Q2PowerupSounds" (void)
{
	int powerupboxindex;
	While(CheckInventory("BittermanClass"))
	{
		If(GetActorPowerupTics(0,"PowerQ2QuadDamage") > 0)
		{
			SetFont("Q2FONT");
			SetHudSize(320,200,1);
			HudMessage(d:GetActorPowerupTics(0,"PowerQ2QuadDamage")/35; HUDMSG_FADEOUT, 59000, CR_UNTRANSLATED, 296.2, 140.1, 1.5, 1.0);
			SetFont("Q2IHD1");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 59001, CR_UNTRANSLATED, 296.1, 140.1, 1.5, 1.0);
			If(GetActorPowerupTics(0,"PowerQ2QuadDamage")==125)
				PlaySound(0,"Q2Misc/QuadDamage/Empty",0);
				
			SetHudSize(0,0,0);
		}
		Else If(GetActorPowerupTics(0,"SamsaraPowerInvulnerable") > 0)
		{
			SetFont("Q2FONT");
			SetHudSize(320,200,1);
			HudMessage(d:GetActorPowerupTics(0,"SamsaraPowerInvulnerable")/35; HUDMSG_FADEOUT, 59000, CR_UNTRANSLATED, 296.2, 140.1, 1.5, 1.0);
			SetFont("Q2IHD5");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 59001, CR_UNTRANSLATED, 296.1, 140.1, 1.5, 1.0);
			If(GetActorPowerupTics(0,"SamsaraPowerInvulnerable")==125)
				PlaySound(0,"Q2Misc/Invulnerability/Empty",0);
				
			SetHudSize(0,0,0);
		}
		Else If(GetActorPowerupTics(0,"PowerDoubleFiringSpeed") > 0)
		{
			SetFont("Q2FONT");
			SetHudSize(320,200,1);
			HudMessage(d:GetActorPowerupTics(0,"PowerDoubleFiringSpeed")/35; HUDMSG_FADEOUT, 59000, CR_UNTRANSLATED, 296.2, 140.1, 1.5, 1.0);
			SetFont("Q2IHD2");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 59001, CR_UNTRANSLATED, 296.1, 140.1, 1.5, 1.0);
			If(GetActorPowerupTics(0,"PowerDoubleFiringSpeed")==125)
				PlaySound(0,"Q2Misc/DoubleFire/Empty",0);
				
			SetHudSize(0,0,0);
		}
		Else If(GetActorPowerupTics(0,"PowerQ2DoubleDamage") > 0)
		{
			SetFont("Q2FONT");
			SetHudSize(320,200,1);
			HudMessage(d:GetActorPowerupTics(0,"PowerQ2DoubleDamage")/35; HUDMSG_FADEOUT, 59000, CR_UNTRANSLATED, 296.2, 140.1, 1.5, 1.0);
			SetFont("Q2IHD3");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 59001, CR_UNTRANSLATED, 296.1, 140.1, 1.5, 1.0);
			If(GetActorPowerupTics(0,"PowerQ2DoubleDamage")==125)
				PlaySound(0,"Q2Misc/DoubleDamage/Empty",0);
				
			SetHudSize(0,0,0);
		}
		Else If(GetActorPowerupTics(0,"PowerIronFeet") > 0)
		{
			SetFont("Q2FONT");
			SetHudSize(320,200,1);
			HudMessage(d:GetActorPowerupTics(0,"PowerIronFeet")/35; HUDMSG_FADEOUT, 59000, CR_UNTRANSLATED, 296.2, 140.1, 1.5, 1.0);
			SetFont("Q2IHD4");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 59001, CR_UNTRANSLATED, 296.1, 140.1, 1.5, 1.0);
			If(GetActorPowerupTics(0,"PowerIronFeet")==125)
				PlaySound(0,"Q2Misc/EnvironmentSuit/Empty",0);
				
			SetHudSize(0,0,0);
		}
		Else If(GetActorPowerupTics(0,"PowerSilencer") > 0)
		{
			SetFont("Q2FONT");
			SetHudSize(320,200,1);
			HudMessage(d:GetActorPowerupTics(0,"PowerSilencer")/35; HUDMSG_FADEOUT, 59000, CR_UNTRANSLATED, 296.2, 140.1, 1.5, 1.0);
			SetFont("Q2IHD0");
			HudMessage(s:"A"; HUDMSG_FADEOUT, 59001, CR_UNTRANSLATED, 296.1, 140.1, 1.5, 1.0);	
			SetHudSize(0,0,0);
		}
		Else
		{
			HudMessage(d:""; HUDMSG_FADEOUT, 59000, CR_UNTRANSLATED, 261.667, 172.222, 0.1, 1.0);
			HudMessage(d:""; HUDMSG_FADEOUT, 59001, CR_UNTRANSLATED, 261.667, 172.222, 0.1, 1.0);
		}
		
		/* Unused stuff Taken from Lo-Mio
		If(GetActorPowerupTics(0,"PowerIronFeet")==125)
		PlaySound(0,"Powerups/RadsuitDepleted",0);
		
		If(GetActorPowerupTics(0,"PowerRegen")==125)
		PlaySound(0,"Powerups/RegenerationSphereDepleted",0);*/
		Delay(1);
	}
}
Script "CosoDelOffset" (Int X, Int Y, Int Z) // Gran ayuda para colocar offsets con A_SpawnItemEx
{
	SetActivatorToTarget(0);
	Int TID = UniqueTID();
	Thing_ChangeTID(0,TID);
	SpawnSpotForced("Wea",TID,666,0);
	SetActivator(666);
	SetPointer(AAPTR_TARGET,TID);
	SetUserArray(666,"User_Offset",0,X);
	SetUserArray(666,"User_Offset",1,Y);
	SetUserArray(666,"User_Offset",2,Z);
	Terminate;
}
Script "Q2GrenadeTimer" (Void)
{
	Int GrenadeTime = 120;
	While(GrenadeTime>0)
	{
		If(CheckInventory("Clip")==1)
		{
			Int TID = UniqueTID();
			Thing_ChangeTID(0,TID);
			SetActivatorToTarget(0);
			Int speed = -cos(-GetActorPitch(0)) *12 >> 16;
			Int vspeed = sin(-GetActorPitch(0)-29491) *50 >> 16 ;
			SetActivator(TID);
			Thing_ChangeTID(0,0);
			ThrustThing(GetActorAngle(0) >> 8, speed, 0, 0);
			ThrustThingZ(0,-vspeed, 0, 0);
			SetActorState(0,"UnHide");
			TakeInventory("Clip",999);
		}
		Delay(1);
		GrenadeTime--;
	}
	SetActorState(0,"XDeath");
}
Script "Q2HUDLowHealth" (void)
{
	While(CheckInventory("BittermanClass"))
	{
		Delay(1);
//		Print(d:GetActorProperty(0,APROP_SpawnHealth));
		If(GetActorProperty(0,0)<=25)//FixedMul(GetActorProperty(1200,APROP_SpawnHealth),0.25))
		{ GiveInventory("HUDLowHP",1); Delay(20); TakeInventory("HUDLowHP",1); Delay(20); }
	}
}
Script "Q2HUDHPDown" Enter
{
	Int HP1,HP2;
	While(CheckInventory("BittermanClass"))
	{
		HP1 = GetActorProperty(0,0);
		Delay(1);
		HP2 = GetActorProperty(0,0);
		If(HP2<HP1)
		{ GiveInventory("HUDHPDown",1); Delay(6); TakeInventory("HUDHPDown",1);}
	}
}
Script "Q2HUDArmorDown" Enter
{
	Int A1,A2;
	While(CheckInventory("BittermanClass"))
	{
		A1 = CheckInventory("Armor");
		Delay(1);
		A2 = CheckInventory("Armor");
		If(A2<A1)
		{ GiveInventory("HUDArmorDown",1); Delay(6); TakeInventory("HUDArmorDown",1);}
	}
}
Script "Q2JumpCheck" Enter
{
	While(CheckInventory("BittermanClass"))
	{
		While(GetActorVelZ(0)==0)
		{
			Delay(1);
			If((GetPlayerInput(-1,INPUT_BUTTONS) & BT_JUMP) && GetActorVelZ(0)>1.0)
			SetActorState(0,"Jump");
		}
		Delay(1);
	}
}
Script "Q2CrouchCheck" Enter
{
	While(CheckInventory("BittermanClass"))
	{
		While(isCrouching(28.0))
		{
			GiveInventory("IsCrouching",1);
			TakeInventory("IsNotCrouching",1);
			Delay(1);
		}
		GiveInventory("IsNotCrouching",1);
		TakeInventory("IsCrouching",1);
		Delay(1);
	}
}
Script "Q2FlechetteShieldPierce" (void)
{
	SetActivator(0,AAPTR_Tracer);
	if(CheckActorProperty(0,APROP_Species,"BrainProj")||CheckActorProperty(0,APROP_Species,"DaedalusProj")||CheckActorProperty(0,APROP_Species,"GladiatorProj")||CheckActorProperty(0,APROP_Species,"SuperTankProj"))
		SetResultValue(1);
	else
		SetResultValue(0);
}
Script "Q2FlechetteRetrieveSpecies" (void)
{
	SetActivatorToTarget(0);
	str species = GetActorProperty(0,APROP_Species);
	SetActorProperty(0,APROP_Species,species);
	SetResultValue(1);
}
Script "Q2BoomerangShooterPitch" (void)
{
	SetActivatorToTarget(0);
	SetResultValue(GetActorPitch(0));
}
Script "Q2ETFRifleShake" (int type) Clientside
{
	int a;
	int pln = PlayerNumber();
	if (GetUserCvar(pln,"samsara_cl_norecoil") <= 0)
	{
		switch(type)
		{
			case 1:
				for(a = 0; a < 4; a++) { SetActorPitch(0, GetActorPitch(0) - a*12); Delay(1); }
				for(a = 3; a > 0; a--) { SetActorPitch(0, GetActorPitch(0) + a*12); Delay(1); }
				break;
			case 2:
				for(a = 3; a > 0; a--) { SetActorPitch(0, GetActorPitch(0) + a*12); Delay(1); }
				for(a = 0; a < 4; a++) { SetActorPitch(0, GetActorPitch(0) - a*12); Delay(1); }
				break;
		}
	}
}
Script "Q2DrawLaser" (int type)
{
	int x = GetActorX(0);
	int y = GetActorY(0);
	int z = GetActorZ(0);
	SetActivatorToTarget(0);
	switch(type)
	{
		case 0: ACS_NamedExecuteWithResult("Q2PlasmaBeam",x,y,z); break;
	}
}

Script "Q2PlasmaBeam" (int tx, int ty, int tz) clientside
{
	int t, k = 0, l, angle, pitch, x, y, z, vx, vy, vz, mag, magI, spaceCounter;
	
	//Properties
	int height = GetActorViewHeight(0);
	int space = 16;
	int horz = 4;
	int i = 16;
	int heightoffset = -6;

	str segment = "Q2PlasmaBeamProjectileSegment";
	str ringActor = "Q2PlasmaBeamProjectileRing";
	
	int newtid = UniqueTid();
	
	int xoff = (horz * sin(GetActorAngle(0))) - FixedMul(-i * cos(GetActorAngle(0)),cos(GetActorPitch(0)));
	int yoff = (horz * cos(GetActorAngle(0))) + FixedMul(-i * sin(GetActorAngle(0)),cos(GetActorPitch(0)));
				
    x = GetActorX(0) + xoff + FixedMul(heightoffset * sin(GetActorPitch(0)),cos(GetActorAngle(0)));
	y = GetActorY(0) - yoff + FixedMul(heightoffset * sin(GetActorPitch(0)),sin(GetActorAngle(0)));
	z = GetActorZ(0) + height + (-i * sin(GetActorPitch(0))) + (heightoffset * cos(GetActorPitch(0)));
	
	int vectorx = tx - x;
	int vectory = ty - y;
	int vectorz = tz - z;
	angle = VectorAngle(vectorx, vectory);
	
	int length = magnitudeTwo(vectorx>>16,vectory>>16);
	pitch = VectorAngle(length<<16, vectorz);

    vx = tx-x; vy = ty-y; vz = tz-z; mag = magnitudeThree_f(vx, vy, vz);
    vx = FixedDiv(vx, mag); vy = FixedDiv(vy, mag); vz = FixedDiv(vz, mag);
    magI = ftoi(mag) - (space*!isSinglePlayer());;
	for(int j = 0; j < magI/64; j++)
	{
		int finalRingOffset = CheckInventory("SamsaraQuake2PlasmaBeamRingOffset") + 64 * j;
		SpawnForced(ringActor, x+(vx*finalRingOffset), y+(vy*finalRingOffset), z+(vz*finalRingOffset), newtid);
		SetActorPitch(newtid, pitch);
		SetActorAngle(newtid, angle);
    }
	for (i = i; i < magI; i += space)
    {
        SpawnForced(segment, x+(vx*i), y+(vy*i), z+(vz*i), newtid);
		SetActorPitch(newtid, pitch);
		SetActorAngle(newtid, angle);

		if(i % 1500 == 0)
			Delay(1);
    }
}

script "SamsaraQuake2PlasmaBeamEffect" (void)
{
    SetInventory("SamsaraQuake2PlasmaBeamFiring", 1);

    while (CheckWeapon("Q2PlasmaBeam") && !isDead(0) && CheckInventory("SamsaraQuake2PlasmaBeamFiring"))
    {
        Giveinventory("SamsaraQuake2PlasmaBeamEffectHandler", 1);
        Delay(1);
    }
}

script "Q2TrapCharge" (void)
{
    SetActivatorToTarget(0);

    SetResultValue(CheckInventory("SamsaraQuake2TrapFuseTimer"));
}

script "Q2BFG10KOnlineFix" (void)
{
    SetActivatorToTarget(0);

    SetResultValue((ClassifyActor(0) & ACTOR_PLAYER) || (ClassifyActor(0) & ACTOR_MONSTER));
}
