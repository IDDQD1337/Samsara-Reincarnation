script "TomeOfPowerStartCheck" (void)
{
	if (!isFreeForAll() && !isTeamGame()) { GiveInventory("PortTomeCoOp",1); }
}

script "TomeOfPowerCooldownReduction" (void)
{
	TakeInventory("TomeOfPowerCooldown",CheckInventory("TomeOfPowerCooldown")/2);
	SetResultValue(1);
}

script "LesserTomeCooldown" (void) //202
{
	while (CheckInventory("LesserTomeCooldown") > 0)
	{
		Delay(35);

		if (CheckInventory("LesserTomeCooldown") > 85)
		{
			TakeInventory("LesserTomeCooldown",1);
		}
		else
		{
			TakeInventory("LesserTomeCooldown",1);
			//TakeInventory("RainTracker",1);
		}
	}
}

script "HereticTomeChargeRate" (void)
{
	int weaponCount = CheckInventory("GotWeapon0") + CheckInventory("GotWeapon2") + CheckInventory("GotWeapon3") + CheckInventory("GotWeapon4") + CheckInventory("GotWeapon5") + CheckInventory("GotWeapon6") + CheckInventory("GotWeapon7");
	int result = 1800;

	until(weaponCount == 0)
	{
		weaponCount--;
		result = (result * 2)/3;
	}

	SetResultValue(result);
}

script "CorvusFaceTarget" (void)
{
	SetActivator(0, AAPTR_MASTER);
	SetResultValue(GetActorAngle(0));
}

script "HereticCloneSpawner" (int powered, int clonetype)
{
	int corvTid = UniqueTID();
	int x = GetActorX(0), y = GetActorY(0), z = GetActorZ(0);
	str cloneClassname;

	if (powered)
	{
		cloneClassname = clonetype > 0 ? "HereticCorvusCloneCoop" : "HereticCorvusClone";
		z -= 28.0;
	}
	else
	{
		cloneClassname = clonetype > 0 ? "FWizardCoop" : "FWizard";
		z -= 34.0;
	}

	SpawnForced(cloneClassname, x, y, z, corvTid);
	SetActorAngle(corvTid, GetActorAngle(0));
	SetActivator(0, AAPTR_TARGET);
	SetPointerExt(AAPTR_MASTER, 0, corvTid);
	Thing_SetTranslation(corvTid, -1);
	GiveActorInventory(corvTid, "SamsaraHereticCloneCopyFriendliness", 1);
	Thing_ChangeTID(corvTid, 0);
}

script "HereticTurnTowardTarget" (int invertPitch)
{
	int corvX = GetActorX(0);
	int corvY = GetActorY(0);
	int corvZ = GetActorZ(0);
	int tempTid = UniqueTid();
	int corvTid = ActivatorTid();
	Thing_ChangeTID(0, tempTid);

	SetActivator(0, AAPTR_MASTER);

	int playAngle = GetActorAngle(0);
	int playPitch = GetActorPitch(0);
	int playX = GetActorX(0) + FixedMul(512 * cos(playAngle), cos(playPitch));
	int playY = GetActorY(0) + FixedMul(512 * sin(playAngle), cos(playPitch));
	int playZ = GetActorZ(0) + 768 * sin(playPitch);

	int vX = corvX - playX;
	int vY = corvY - playY;
	int vZ = corvZ - playZ;

	int vAngle = VectorAngle(vX, vY) - 0.5;
	int vPitch = VectorAngle(VectorLength(vX, vY), vZ);

	SetActorAngle(tempTid, vAngle);
	SetActorPitch(tempTid, invertPitch ? -vPitch : vPitch);

	Thing_ChangeTID(tempTid, corvTid);
}
