int msgColors[26] = 
{
    "\ca", "\cb", "\cc", "\cd", "\ce", "\cf", "\cg", "\ch", "\ci", "\cj", "\ck", "\cl", "\cm",
    "\cn", "\co", "\cp", "\cq", "\cr", "\cs", "\ct", "\cu", "\cv", "\cw", "\cx", "\cy", "\cz"
};

script "SamsaraClientClass" (int slot) CLIENTSIDE //228 -- SAMSARA_CLIENT_CLASS
{
	int alternativeclass;
    int toClass = SamsaraClientClass-1;
    int displaymode;
    if (GetCVar("samsara_runninginzdoom") == 1)
    {
        displaymode = GetCVar("samsara_zd_pickupmode");
    } else {
        displaymode = GetUserCVar(ConsolePlayerNumber(), "samsara_cl_pickupmode");
    }
    int oldslot = slot;
    int success = 0;

    slot = itemToSlot(slot);
    
    int hasSlot = SamsaraClientWeps[slot];

    if (displaymode != 0)
    {
        if ((SamsaraItemFlash >= (Timer() - 35)) && (Timer() >= 70))
        {
            Spawn("SamsaraChangeFlash", GetActorX(0), GetActorY(0), GetActorZ(0));
        }
        
        if (toClass == -1)
        {
            SetActorState(0, "NoGuy");
            terminate;
        }
    }

    str statetojump = "NoGuy";

    if (oldslot <= SLOT_UNIQUE1)
    {
        switch (displaymode)
        {
          default:
            statetojump = "NoGuy";
            break;

          case 1:
            statetojump = "NoGuyClassic";
            break;
            
          case 2:
            if (!success) 
			{ 
				switch(SamsaraAlternativeClass)
				{
					case 0:
						statetojump = PickupStates[toClass][3];
						break;
					case 1:
						statetojump = PickupStates[toClass][11];
						break;
					case 2:
						statetojump = PickupStates[toClass][15];
						break;
					case 3:
						statetojump = PickupStates[toClass][19];
						break;
					case 4:
						statetojump = PickupStates[toClass][23];
						break;
				}
			}
            break;
            
          case 3:
            if (!success) 
			{ 
				switch(SamsaraAlternativeClass)
				{
					case 0:
						statetojump = PickupStates[toClass][0];
						break;
					case 1:
						statetojump = PickupStates[toClass][8];
						break;
					case 2:
						statetojump = PickupStates[toClass][12];
						break;
					case 3:
						statetojump = PickupStates[toClass][16];
						break;
					case 4:
						statetojump = PickupStates[toClass][20];
						break;
				}
			}
            break;
        }
    }
    else switch (displaymode)
    {
      default:
        statetojump = "NoGuy";
        break;
		
      case 1:
        statetojump = "NoGuyClassic";
        break;
        
      case 2:
        if ((SamsaraClientWepFlashes[slot] >= (Timer() - 35)) && (Timer() >= 35))
        {
            Spawn("SamsaraChangeFlash2", GetActorX(0), GetActorY(0), GetActorZ(0));
        }
        
        if (!success)
        {
            if (hasSlot) 
			{ 
				switch(SamsaraAlternativeClass)
				{
					case 0:
						statetojump = PickupStates[toClass][1];
						break;
					case 1:
						statetojump = PickupStates[toClass][9];
						break;
					case 2:
						statetojump = PickupStates[toClass][13];
						break;
					case 3:
						statetojump = PickupStates[toClass][17];
						break;
					case 4:
						statetojump = PickupStates[toClass][21];
						break;
				}
			}
            else         
			{ 
				switch(SamsaraAlternativeClass)
				{
					case 0:
						statetojump = PickupStates[toClass][2];
						break;
					case 1:
						statetojump = PickupStates[toClass][10];
						break;
					case 2:
						statetojump = PickupStates[toClass][14];
						break;
					case 3:
						statetojump = PickupStates[toClass][18];
						break;
					case 4:
						statetojump = PickupStates[toClass][22];
						break;
				}
			}
        }
        break;
        
      case 3:
        switch (slot)
        {
          case SLOT_CHAINSAW:
			switch(SamsaraAlternativeClass)
			{
				case 0:
					statetojump = PickupStates[toClass][0];
					break;
				case 1:
					statetojump = PickupStates[toClass][8];
					break;
				case 2:
					statetojump = PickupStates[toClass][12];
					break;
				case 3:
					statetojump = PickupStates[toClass][16];
					break;
				case 4:
					statetojump = PickupStates[toClass][20];
					break;
			}
            break;
        }
          
        if (!success) 
		{ 
			switch(SamsaraAlternativeClass)
			{
				case 0:
					statetojump = PickupStates[toClass][0];
					break;
				case 1:
					statetojump = PickupStates[toClass][8];
					break;
				case 2:
					statetojump = PickupStates[toClass][12];
					break;
				case 3:
					statetojump = PickupStates[toClass][16];
					break;
				case 4:
					statetojump = PickupStates[toClass][20];
					break;
			}
		}
        break;
    }

    if (StrCmp(statetojump, "NoGuy") && StrCmp(statetojump, "NoGuyClassic"))
    {
        if (oldslot <= SLOT_UNIQUE1)
        {
            if (SamsaraEquipmentLoadout[SLOTCOUNT - 1 - oldslot] > 0) { statetojump = StrParam(s:statetojump, s:"Loadout", d:SamsaraEquipmentLoadout[SLOTCOUNT - 1 - oldslot]); }
        } else {
            if (SamsaraEquipmentLoadout[slot] > 0) { statetojump = StrParam(s:statetojump, s:"Loadout", d:SamsaraEquipmentLoadout[slot]); }
        }

    }

    SetActorState(0, statetojump);
}

/*
*      WARNING
*  This script is over 20 variables. Check here first for segfaults.
*  Also, keep an eye on this script for potential desync issues.
*  (current count: 25)
*/

script "SamsaraGiveWeapon" (int slot, int dropped, int silent) //229 -- SAMSARA_GIVEWEAPON
{
    // clients were running this before, that's bad
    if (!IsServer) { terminate; }

    slot = itemToSlot(slot);
    if (slot == -1) { terminate; }   

    int weaponStay = !!GetCVar("sv_weaponstay");

    int weaponGet  = 0;
    int pclass = samsaraClassNum();
    int hasWep = HasClassWeapon(pclass, slot);
	
    if (slot == SLOT_BFG9000 || slot == SLOT_BFG10K) { weaponStay = !!GetCVar("samsara_permault"); }
    
    int a1cnt  = 0, a2cnt = 0;
    int a1max  = 0, a2max = 0;
    int a1max2 = 0, a2max2 = 0;
    int a1Full = 0, a2Full = 0;
    int a1diff = 0, a2diff = 0;
    
    int weapon  = ClassWeapons[pclass][slot][S_WEP],        wepbool = !!StrLen(weapon); 
    int ammo1   = ClassWeapons[pclass][slot][S_AMMO1],      a1bool  = !!StrLen(ammo1);
    int ammo2   = ClassWeapons[pclass][slot][S_AMMO2],      a2bool  = !!StrLen(ammo2);
    int check   = ClassWeapons[pclass][slot][S_CHECKITEM],  chkbool = !!StrLen(check);

    // If we have the check-fail item, kill the pickup if this wasn't a drop
    // (it was originally for the wastems and LevelLimiter)
    // (the wastems are still fucking terrible)
    if (!wepbool || (CheckInventory(ClassWeapons[pclass][slot][S_CHECKFAILITEM]) && dropped <= 0))
    {
        SetResultValue(weaponStay * WEPFLAGS_WEAPONSTAY);
        terminate;
    }
    
    if (a1bool)
    {
        a1cnt   = CheckInventory(ammo1);
        a1max   = GetAmmoCapacity(ammo1);
        a1max2  = a1max * 4;
        // so that when shaving off half the given ammo, we don't run into the ammo cap
        // and note an erroneous amount of ammo given
    }
    
    if (a2bool)
    {
        a2cnt   = CheckInventory(ammo2);
        a2max   = GetAmmoCapacity(ammo2);
        a2max2  = a2max * 4; // ditto
    }
    
    if (a1Bool) { a1Full = (CheckInventory(ammo1) == a1max); }
    if (a2Bool) { a2Full = (CheckInventory(ammo2) == a2max); }
    
    if (dropped >= 2)
    {
        if (!GetCVar("samsara_noammocap"))
		{
			if (a1bool) { SetAmmoCapacity(ammo1, a1max2); }
			if (a2bool) { SetAmmoCapacity(ammo2, a2max2); }
		}
    }
    
    // check for both the weapon AND the check item
    // if we miss either, or we're using more advanced
    // behavior using a script, we're giving the weapon
    if (!hasWep || (chkbool && !CheckInventory(check)) || ACS_NamedExecuteWithResult("Samsara_MapInventory", weaponConditionScripts[pclass][slot], dropped))
    {
        weaponGet = 1;
    }
    else if (!weaponStay || dropped >= 1)
    {
        // still attempt a pickup if we can get ammo from it
        if ((a1bool && !a1Full) || (a2Bool && !a2Full)) { weaponGet = 1; }
    }

    if (weaponGet)
    {
        int success = _giveclassweapon(pclass, slot, 3, dropped, 0);

        if (!silent && success)
        {
            // this is for mugshot grins and weapon switching
            if (!hasWep)
            {
                Spawn("WeaponGetYaaaay", GetActorX(0), GetActorY(0), GetActorZ(0));
                Spawn("WeaponGetYaaaay2", GetActorX(0), GetActorY(0), GetActorZ(0));
				
				if(isSinglePlayer())
				{
					ACS_NamedExecuteWithResult("SamsaraForceGrinMugShot");
				}
				
				If (GetCVar("samsara_runninginzdoom") == 1)
				{
					If (GetCVar("neverswitchonpickup") == 0)
					{
						SetWeapon(weapon);
					}
				}
            }

            ACS_NamedExecuteAlways("SamsaraClientWeaponPickup", 0, slot, 0, dropped);		

            if (dropped <= 1) { ACS_NamedExecuteWithResult("SamsaraWeaponTaunt"); } // so it gives the taunt cooldown properly

            if (CheckInventory("SamsaraHeroMusicHalfLifeActive") && !CheckInventory("HalfLifeMusicPlayingToken")) { GiveInventory("HLMusicWeapon", 1); }
		}
	}
	
    if (dropped >= 2)
    {
        // shave off half the ammo given
		TakeInventory(ammo1, (CheckInventory(ammo1) - a1cnt) / 2);
		TakeInventory(ammo2, (CheckInventory(ammo2) - a2cnt) / 2);

        // go back to normal ammo capacity
		if (a1bool) { SetAmmoCapacity(ammo1, a1max); }
		if (a2bool) { SetAmmoCapacity(ammo2, a2max); }
	}
    
    // make sure we're not over max ammo capacity
    TakeInventory(ammo1, CheckInventory(ammo1) - a1max);
    TakeInventory(ammo2, CheckInventory(ammo2) - a2max);

    // tell the pickup if weaponstay was on, and if the pickup succeeded
    SetResultValue((weaponStay * WEPFLAGS_WEAPONSTAY) + (success * WEPFLAGS_GOTWEAPON));
}

script "SamsaraGiveUnique" (int alt) //231 -- SAMSARA_GIVEUNIQUE
{
    if (!IsServer) { terminate; }
    
    int uniqueGet = 0;
    int pclass = samsaraClassNum();

    while (!uniqueGet && alt >= 0)
    {
        uniqueGet = GiveUnique(pclass, alt);
        alt--;
    }
    
    if (uniqueGet && IsServer)
    {
        ACS_NamedExecuteAlways("SamsaraClientUniquePickup", 0, alt + 1, 0, 0);

        if (CheckInventory("SamsaraHeroMusicHalfLifeActive") && !CheckInventory("HalfLifeMusicPlayingToken")) { GiveInventory("HLMusicWeapon", 1); }
    }
    
    SetResultValue(uniqueGet);
}

int QuoteStorage[MSGCOUNT];

script "SamsaraClientWeaponPickup" (int slot, int soundmode, int dropped) CLIENTSIDE //616 -- SAMSARA_CLIENT_WEAPONPICKUP
{
    int pln = PlayerNumber(), cpln = ConsolePlayerNumber();
    int pclass = samsaraClassNum();
    int i, j, quoteCount = 0;
    int logMsg;
    str pickupsound = ClassPickupSounds[pclass][SamsaraAlternativeClass][slot][SamsaraEquipmentLoadout[slot]];
    
    if (dropped >= 2) { pickupsound = ClassDropSounds[pclass][SamsaraAlternativeClass][slot][SamsaraEquipmentLoadout[slot]]; }
    
    if (cpln == pln && GetCVar("msg") == 0)
    {
        if (GetCVar("samsara_cl_moremessages"))
        {
            for (i = 0; i < MSGCOUNT; i++)
            {
                j = ClassPickupMessages[pclass][SamsaraAlternativeClass][slot][SamsaraEquipmentLoadout[slot]][i];

                if (!StrLen(j)) { continue; }
                QuoteStorage[quoteCount++] = j;
            }
            
            if (!quoteCount) { logMsg = "Oh bugger there's no messages for this weapon."; }
            else { logMsg = QuoteStorage[random(0, quoteCount-1)]; }
        }
        else
        {
            logMsg = ClassPickupMessages[pclass][SamsaraAlternativeClass][slot][SamsaraEquipmentLoadout[slot]][0];
            
            if (!StrLen(logMsg)) { logMsg = "Oh bugger there's no message for this weapon."; } 
        }

        if (GetCVar("samsara_cl_printpickup")) { Print(s:logMsg); }
        else { Log(s:msgColors[GetCVar("msg0color")], s:logMsg); }
    }

    PlaySound(0, pickupsound, CHAN_ITEM|CHAN_MAYBE_LOCAL);

    if (!CheckInventory("PickupFlashesAreDisabled"))
	{
		FadeRange(ClassFades[pclass][0], ClassFades[pclass][1], ClassFades[pclass][2], ClassFades[pclass][3],
		ClassFades[pclass][0], ClassFades[pclass][1], ClassFades[pclass][2], 0.0, itof(ClassFades[pclass][4]) / 35);
	}
}

script "SamsaraClientUniquePickup" (int alt, int soundmode) CLIENTSIDE //633 -- SAMSARA_CLIENT_UNIQUEPICKUP
{
    int pln = PlayerNumber(), cpln = ConsolePlayerNumber();
    int pclass = samsaraClassNum();
    int i, j, quoteCount = 0;
    int logMsg;
    str pickupsound = ClassUniqueSounds[pclass][SamsaraAlternativeClass][alt][SamsaraEquipmentLoadout[SLOTCOUNT + alt]];
    
    if (cpln == pln && GetCVar("msg") == 0)
    {
        if (GetCVar("samsara_cl_moremessages"))
        {
            for (i = 0; i < MSGCOUNT; i++)
            {
                j = ClassUniqueMessages[pclass][SamsaraAlternativeClass][alt][SamsaraEquipmentLoadout[SLOTCOUNT + alt]][i];

                if (!StrLen(j)) { continue; }
                QuoteStorage[quoteCount++] = j;
            }
            
            if (!quoteCount) { logMsg = "Oh bugger there's no messages for this unique."; }
            else { logMsg = QuoteStorage[random(0, quoteCount-1)]; }
        }
        else
        {
            logMsg = ClassUniqueMessages[pclass][SamsaraAlternativeClass][alt][SamsaraEquipmentLoadout[SLOTCOUNT + alt]][0];
            
            if (!StrLen(logMsg)) { logMsg = "Oh bugger there's no message for this unique."; } 
        }

        if (GetCVar("samsara_cl_printpickup")) { Print(s:logMsg); }
        else { Log(s:msgColors[GetCVar("msg0color")], s:logMsg); }
    }

    PlaySound(0, pickupsound, CHAN_ITEM|CHAN_MAYBE_LOCAL);

    if (!CheckInventory("PickupFlashesAreDisabled"))
	{
		FadeRange(ClassFades[pclass][0], ClassFades[pclass][1], ClassFades[pclass][2], ClassFades[pclass][3],
		ClassFades[pclass][0], ClassFades[pclass][1], ClassFades[pclass][2], 0.0, itof(ClassFades[pclass][4]) / 35);
	}
}

Script "SamsaraForceGrinMugShot" (void)
{
	// Prevents classes without grinning mugshots from using the script
	if (!CheckInventory("CatacombClass"))
	{
		SetMugShotState("Grin");
	}
}

script "SamsaraWeaponTaunt" (void)
{
    switch (samsaraClassNum())
    {
      case CLASS_DUKE:
        Delay(8);
        GiveInventory("DukeWeaponTaunt", 1);
        break;

      case CLASS_RR:
        Delay(8);
        GiveInventory("LeonardWeaponTaunt", 1);
        break;

      default:
        terminate;
    }
}
