script "SamsaraOpen" open  //623 -- SAMSARA_OPEN
{
	IsServer = 1;
	int opd, pd;
	int opdu, pdu;
	int opds, pds;

	int checkerTid = UniqueTid();
	int spawnerTid = UniqueTid();
	while(!Spawn("SamsaraIWADChecker",GetFirstPlayerCoords(0),GetFirstPlayerCoords(1),GetFirstPlayerCoords(2),spawnerTid)) { Delay(1); }

	Thing_SpawnNoFog(spawnerTid,240,0,checkerTid);

	// New iwad detection system
	// First, check for the non-Doom iwads supported natively by Zandronum
	if(GetActorClass(checkerTid) == "SamsaraIWADChecker_Chex")
		currentGame = GAME_CHEX;
	else if(GetActorClass(checkerTid) == "SamsaraIWADChecker_Heretic")
		currentGame = GAME_HERETIC;
	else if(GetActorClass(checkerTid) == "SamsaraIWADChecker_Hexen")
		currentGame = GAME_HEXEN;
	else if(GetActorClass(checkerTid) == "SamsaraIWADChecker_Strife")
		currentGame = GAME_STRIFE;

	// Next, check for the non-Doom iwads that GZDoom can run natively
	else if(GetActorClass(checkerTid) == "SamsaraIWADChecker_Doom" && StrICmp(strparam(l:"GOTNUKER"),"You grab a NUKER! Suck on this!") == 0)
		currentGame = GAME_HACX;
	else if(GetActorClass(checkerTid) == "SamsaraIWADChecker_Doom" && StrICmp(strparam(l:"GOTPLASMA"),"Entropy thrower!") == 0)
		currentGame = GAME_HARMONY;
	else if(GetActorClass(checkerTid) == "SamsaraIWADChecker_Doom" && StrICmp(strparam(l:"OB_IMPHIT"),"You were burned by the wizard cat!") == 0)
		currentGame = GAME_ROTWB;

	// Now we check for custom iwads or TCs that we want to add compatibility for
	else if(GetActorClass(checkerTid) == "SamsaraIWADChecker_Doom" && StrICmp(strparam(l:"TAG_SHOTGUN"),"Steel-shot Launcher") == 0)
		currentGame = GAME_REKKR;

	// Finally, check for the Doom iwad
	else if(GetActorClass(checkerTid) == "SamsaraIWADChecker_Doom")
		currentGame = GAME_DOOM;

	Thing_Remove(spawnerTid);
	Thing_Remove(checkerTid);

	SetCvar("samsara_currentgame",currentGame);
	SetCvar("samsara_processedgame",1);

	if (!GetCVar("samsara_cvarinfo"))
	{   SetCVar ("samsara_cvarinfo", 0);
	//ConsoleCommand("archivecvar samsara_cvarinfo");
	}

	//ACS_NamedExecuteAlways("samsara_RESETPLAYER_COOP",0,0,0,0);

	for(int c = 0; c < PLAYERMAX; c++)
	{
		playerClasses[c] = -1;
	}

	if (SamsaraGlobal[GLOBAL_DONEBITCHING] == 0)
	{
		if (GameType() == GAME_TITLE_MAP) { terminate; }
		HudMessage(s:"Samsara Reincarnation 2.0"; HUDMSG_FADEOUT|HUDMSG_LOG, 93002, CR_GOLD, 1.5, 0.265, 2.0, 0.5);

		if (isSinglePlayer())
		{
			if(GetCvar("samsara_cvarinfo") == 0)
			{
				/*HudMessage(s:"Reincarnation Changelist ",d:SAMSARA_CHANGELIST;
				HUDMSG_FADEOUT, 93002, CR_WHITE, 1.5, 0.2, 2.0, 0.5);*/
				HudMessage(s:HELPSTR;
				HUDMSG_PLAIN|HUDMSG_LOG|HUDMSG_ALPHA, 92712, CR_WHITE, 1.5, 0.225, 2.5, 0.0);
				HudMessage(s:HELPSTR_CL;
				HUDMSG_PLAIN|HUDMSG_LOG|HUDMSG_ALPHA, 92713, CR_WHITE, 1.5, 0.25, 2.5, 0.0);
				HudMessage(s:"\cjSee the console for \caCVAR information\c-.";
				HUDMSG_FADEOUT, 92712, CR_WHITE, 1.5, 0.305, 2.0, 0.5);
				SetCVar ("samsara_cvarinfo", 1);
				//ConsoleCommand("archivecvar samsara_cvarinfo");
			}
		}
		else
		{
			HudMessage(s:HELPSTR;
			HUDMSG_PLAIN|HUDMSG_LOG|HUDMSG_ALPHA, 92712, CR_WHITE, 1.5, 0.225, 2.5, 0.0);
			HudMessage(s:HELPSTR_CL;
			HUDMSG_PLAIN|HUDMSG_LOG|HUDMSG_ALPHA, 92713, CR_WHITE, 1.5, 0.25, 2.5, 0.0);
			HudMessage(s:"\cjSee the console for \caCVAR information\c-.";
			HUDMSG_FADEOUT, 92712, CR_WHITE, 1.5, 0.305, 2.0, 0.5);
		}

		SamsaraGlobal[GLOBAL_DONEBITCHING] = 1;

        // Warn the player about playing Samsara in GZDoom multiplayer
        if (PlayerCount() > 1 && isZDoom())
        {
            SetFont("CMPSDOOM");
            HudMessageBold(l:"SAMSARA_INCOMPATIBILITY_GZDOOMMP"; HUDMSG_TYPEON | HUDMSG_LOG, 0, CR_WHITE, 1.5, 0.8, 5.0, 0.05, 2.0);
        }

        /*
        // Let's check for incompatibilities and warn the player about loading mods they shouldn't with Samsara
        int incompatibilityTid = UniqueTid();

        // Check if Brutal Doom or its sister mods have been loaded
        if (SpawnForced("Brutal_Blood", 0, 0, 0, incompatibilityTid, 0))
        {
            SetFont("CMPSDOOM");
            HudMessageBold(l:"SAMSARA_INCOMPATIBILITY_BRUTALDOOM"; HUDMSG_TYPEON | HUDMSG_LOG, 0, CR_WHITE, 1.5, 0.8, 5.0, 0.05, 2.0);
        }

        Thing_Remove(incompatibilityTid);
        */
	}

	ArmorMode = middle(0, GetCVar("samsara_armormode"), ARMORMODES-1);
	CheckMapArmors();

	while (1)
	{
		// I'd use defaultCVar but best-ever breaks on it for some reason :/

		// KINSNOTE - I'm pretty sure that this effectively sets the default settings, so nothing that
		// CVARINFO doesn't already do. Let's comment it out and see if we can get away with it.

		/*
		if (!GetCVar("samsara_banjetpack"))
		{   SetCVar ("samsara_banjetpack", 0);
		//ConsoleCommand("archivecvar samsara_banjetpack");
		}

		if (!GetCVar("samsara_banwolfmove"))
		{   SetCVar ("samsara_banwolfmove", 0);
		//ConsoleCommand("archivecvar samsara_banwolfmove");
		}

		if (!GetCVar("samsara_lmshealth"))
		{   SetCVar ("samsara_lmshealth", 0);
		//ConsoleCommand("archivecvar samsara_lmshealth");
		}

		if (!GetCVar("samsara_lmsarmor"))
		{   SetCVar ("samsara_lmsarmor", 0);
		//ConsoleCommand("archivecvar samsara_lmsarmor");
		}

		if (!GetCVar("samsara_lmsarmortier"))
		{   SetCVar ("samsara_lmsarmortier", 0);
		//ConsoleCommand("archivecvar samsara_lmsarmortier");
		}

		if (GetCVar("samsara_lmsunique"))
		{
			//ConsoleCommand("unset samsara_lmsunique");

			if (!GetCVar("samsara_uniquestart"))
			{
				SetCVar ("samsara_uniquestart", 2);
				//ConsoleCommand("archivecvar samsara_uniquestart");
			}
		}

		if (!GetCVar("samsara_lmsult"))
		{   SetCVar ("samsara_lmsult", 0);
		//ConsoleCommand("archivecvar samsara_lmsult");
		}

		if (!GetCVar("samsara_nocustomgravity"))
		{   SetCVar ("samsara_nocustomgravity", 0);
		//ConsoleCommand("archivecvar samsara_nocustomgravity");
		}

		if (!GetCVar("samsara_permault"))
		{   SetCVar ("samsara_permault", 0);
		//ConsoleCommand("archivecvar samsara_permault");
		}

		if (!GetCVar("samsara_jumpmod"))
		{   SetCVar ("samsara_jumpmod", 0);
		//ConsoleCommand("archivecvar samsara_jumpmod");
		}

		if (!GetCVar("samsara_pdwtak_damage"))
		{   SetCVar ("samsara_pdwtak_damage", 0);
		//ConsoleCommand("archivecvar samsara_pdwtak_damage");
		}

		if (!GetCVar("samsara_pdwtak_distance"))
		{   SetCVar ("samsara_pdwtak_distance", 0);
		//ConsoleCommand("archivecvar samsara_pdwtak_distance");
		}

		if (!GetCVar("samsara_pdwtak_fulldamagedistance"))
		{   SetCVar ("samsara_pdwtak_fulldamagedistance", 0);
		//ConsoleCommand("archivecvar samsara_pdwtak_fulldamagedistance");
		}
		*/

        if (!isZDoom())
        {
            if (!GetCVar("compat_clientssendfullbuttoninfo") && IsNetworkGame()) { ConsoleCommand("compat_clientssendfullbuttoninfo 1"); } // cannot use SetCVar with cvars defined in the source ports
        }

		/*
		if (!GetCVar("samsara_armormode"))
		{   SetCVar ("samsara_armormode", 0);
		//ConsoleCommand("archivecvar samsara_armormode");
		}

		if (!GetCVar("samsara_nohealthcap"))
		{   SetCVar ("samsara_nohealthcap", 0);
		//ConsoleCommand("archivecvar samsara_nohealthcap");
		}

		if (!GetCVar("samsara_noarmorcap"))
		{   SetCVar ("samsara_noarmorcap", 0);
		//ConsoleCommand("archivecvar samsara_noarmorcap");
		}

		if (!GetCVar("samsara_chainsawstart"))
		{   SetCVar ("samsara_chainsawstart", 0);
		//ConsoleCommand("archivecvar samsara_chainsawstart");
		}

		if (!GetCVar("samsara_uniquestart"))
		{   SetCVar ("samsara_uniquestart", 0);
		//ConsoleCommand("archivecvar samsara_uniquestart");
		}

		if (!GetCVar("samsara_punchdrunk"))
		{   SetCVar ("samsara_punchdrunk", 0);
		//ConsoleCommand("archivecvar samsara_punchdrunk");
		}

		if (!GetCVar("samsara_nomonologues"))
		{   SetCVar ("samsara_nomonologues", 0);
		//ConsoleCommand("archivecvar samsara_nomonologues");
		}

		if (!GetCVar("samsara_punchdrunkuniques"))
		{   SetCVar ("samsara_punchdrunkuniques", 0);
		//ConsoleCommand("archivecvar samsara_punchdrunkuniques");
		}

		if (!GetCVar("samsara_punchdrunksaws"))
		{   SetCVar ("samsara_punchdrunksaws", 0);
		//ConsoleCommand("archivecvar samsara_punchdrunksaws");
		}

		if (!GetCVar("samsara_noult"))
		{   SetCVar ("samsara_noult", 0);
		//ConsoleCommand("archivecvar samsara_noult");
		}

		if (!GetCVar("samsara_backpackstart"))
		{   SetCVar ("samsara_backpackstart", 0);
		//ConsoleCommand("archivecvar samsara_backpackstart");
		}

		if (!GetCVar("samsara_superturboturkeypuncher3000"))
		{   SetCVar ("samsara_superturboturkeypuncher3000", 0);
		//ConsoleCommand("archivecvar samsara_superturboturkeypuncher3000");
		}

		if (!GetCVar("samsara_superturboturkeylimit"))
		{   SetCVar ("samsara_superturboturkeylimit", 0);
		//ConsoleCommand("archivecvar samsara_superturboturkeylimit");
		}

		if (!GetCVar("samsara_superturboturkeyfrequency"))
		{   SetCVar ("samsara_superturboturkeyfrequency", 35);
		//ConsoleCommand("archivecvar samsara_superturboturkeyfrequency");
		}

		if (!GetCVar("samsara_classiclaz"))
		{   SetCVar ("samsara_classiclaz", 0);
		//ConsoleCommand("archivecvar samsara_classiclaz");
		}

		if (!GetCVar("samsara_allcanrj"))
		{   SetCVar ("samsara_allcanrj", 0);
		//ConsoleCommand("archivecvar samsara_allcanrj");
		}

		if (!GetCVar("samsara_nounique"))
		{   SetCVar ("samsara_nounique", 0);
		//ConsoleCommand("archivecvar samsara_nounique");
		}

		if (!GetCVar("samsara_noinvuln"))
		{   SetCVar ("samsara_noinvuln", 0);
		//ConsoleCommand("archivecvar samsara_noinvuln");
		}

		if (!GetCVar("samsara_bandoomguy"))
		{   SetCVar ("samsara_bandoomguy", 0);
		//ConsoleCommand("archivecvar samsara_bandoomguy");
		}

		if (!GetCVar("samsara_banchex"))
		{   SetCVar ("samsara_banchex", 0);
		//ConsoleCommand("archivecvar samsara_banchex");
		}

		if (!GetCVar("samsara_bancorvus"))
		{   SetCVar ("samsara_bancorvus", 0);
		//ConsoleCommand("archivecvar samsara_bancorvus");
		}

		if (!GetCVar("samsara_banbj"))
		{   SetCVar ("samsara_banbj", 0);
		//ConsoleCommand("archivecvar samsara_banbj");
		}

		if (!GetCVar("samsara_banparias"))
		{   SetCVar ("samsara_banparias", 0);
		//ConsoleCommand("archivecvar samsara_banparias");
		}

		if (!GetCVar("samsara_banduke"))
		{   SetCVar ("samsara_banduke", 0);
		//ConsoleCommand("archivecvar samsara_banduke");
		}

		if (!GetCVar("samsara_banso"))
		{   SetCVar ("samsara_banso", 0);
		//ConsoleCommand("archivecvar samsara_banso");
		}

		if (!GetCVar("samsara_banranger"))
		{   SetCVar ("samsara_banranger", 0);
		//ConsoleCommand("archivecvar samsara_banranger");
		}

		if (!GetCVar("samsara_lmsrules"))
		{   SetCVar ("samsara_lmsrules", 0);
		//ConsoleCommand("archivecvar samsara_lmsrules");
		}

		if (!GetCVar("samsara_doomguydamage"))
		{   SetCVar ("samsara_doomguydamage", 0);
		//ConsoleCommand("archivecvar samsara_doomguydamage");
		}

		if (!GetCVar("samsara_doomguydefense"))
		{   SetCVar ("samsara_doomguydefense", 0);
		//ConsoleCommand("archivecvar samsara_doomguydefense");
		}

		if (!GetCVar("samsara_chexdamage"))
		{   SetCVar ("samsara_chexdamage", 0);
		//ConsoleCommand("archivecvar samsara_chexdamage");
		}

		if (!GetCVar("samsara_chexdefense"))
		{   SetCVar ("samsara_chexdefense", 0);
		//ConsoleCommand("archivecvar samsara_chexdefense");
		}

		if (!GetCVar("samsara_corvusdamage"))
		{   SetCVar ("samsara_corvusdamage", 0);
		//ConsoleCommand("archivecvar samsara_corvusdamage");
		}

		if (!GetCVar("samsara_corvusdefense"))
		{   SetCVar ("samsara_corvusdefense", 0);
		//ConsoleCommand("archivecvar samsara_corvusdefense");
		}

		if (!GetCVar("samsara_bjdamage"))
		{   SetCVar ("samsara_bjdamage", 0);
		//ConsoleCommand("archivecvar samsara_bjdamage");
		}

		if (!GetCVar("samsara_bjdefense"))
		{   SetCVar ("samsara_bjdefense", 0);
		//ConsoleCommand("archivecvar samsara_bjdefense");
		}

		if (!GetCVar("samsara_pariasdamage"))
		{   SetCVar ("samsara_pariasdamage", 0);
		//ConsoleCommand("archivecvar samsara_pariasdamage");
		}

		if (!GetCVar("samsara_pariasdefense"))
		{   SetCVar ("samsara_pariasdefense", 0);
		//ConsoleCommand("archivecvar samsara_pariasdefense");
		}

		if (!GetCVar("samsara_dukedamage"))
		{   SetCVar ("samsara_dukedamage", 0);
		//ConsoleCommand("archivecvar samsara_dukedamage");
		}

		if (!GetCVar("samsara_dukedefense"))
		{   SetCVar ("samsara_dukedefense", 0);
		//ConsoleCommand("archivecvar samsara_dukedefense");
		}

		if (!GetCVar("samsara_sodamage"))
		{   SetCVar ("samsara_sodamage", 0);
		//ConsoleCommand("archivecvar samsara_sodamage");
		}

		if (!GetCVar("samsara_sodefense"))
		{   SetCVar ("samsara_sodefense", 0);
		//ConsoleCommand("archivecvar samsara_sodefense");
		}

		if (!GetCVar("samsara_rangerdamage"))
		{   SetCVar ("samsara_rangerdamage", 0);
		//ConsoleCommand("archivecvar samsara_rangerdamage");
		}

		if (!GetCVar("samsara_rangerdefense"))
		{   SetCVar ("samsara_rangerdefense", 0);
		//ConsoleCommand("archivecvar samsara_rangerdefense");
		}

		if (!GetCVar("samsara_permaquad"))
		{   SetCVar ("samsara_permaquad", 0);
		//ConsoleCommand("archivecvar samsara_permaquad");
		}

		if (!GetCVar("samsara_pistolammo"))
		{   SetCVar ("samsara_pistolammo", 0);
		//ConsoleCommand("archivecvar samsara_pistolammo");
		}

		if (!GetCVar("samsara_dukesoundboard"))
		{   SetCVar ("samsara_dukesoundboard", 0);
		//ConsoleCommand("archivecvar samsara_dukesoundboard");
		}

		if (!GetCVar("samsara_nohealth"))
		{   SetCVar ("samsara_nohealth", 0);
		//ConsoleCommand("archivecvar samsara_nohealth");
		}

		if (!GetCVar("samsara_vanillaquake"))
		{   SetCVar ("samsara_vanillaquake", 0);
		//ConsoleCommand("archivecvar samsara_vanillaquake");
		}
		*/

		Delay(1);
	}
}

script "SamsaraEnter" enter { ACS_NamedExecuteWithResult("SamsaraSpawn", 0,0,0); } //611 -- SAMSARA_ENTER
script "SamsaraRespawn" respawn { ACS_NamedExecuteWithResult("SamsaraSpawn", 1,0,0); } //618 -- SAMSARA_RESPAWN
script "SamsaraReturn" return { UnloadingNow = 0; ACS_NamedExecuteWithResult("SamsaraSpawn", 0,0,0); } //613 -- SAMSARA_RETURN

script "SamsaraSpawn" (int respawning) //624 -- SAMSARA_SPAWN
{
	if(GameType() == GAME_TITLE_MAP)
		terminate;

	int pln = PlayerNumber();
	int pcount, opcount;
	int startTime = Timer();
	int endloop;
	int canbuddha;
	int armor, oarmor, type, otype;
	int i;
	int doommode, dukemode, hexmode, wolfmode, rottmode, blakemode, eradmode, ipogmode, halflifemode, previousvalue, cvalue;
	int targettid;
	int bot = PlayerIsBot(pln);
	int strifeCeilingHeight = GetActorCeilingZ(0); //strife related
	int strifeLastKillCount;
	int strifeDead;
	int sigilCounter;
	int oldInstaGib;
	int pariasLastRepairTimer;
	int toPTimer;
	int speedmod;
	int XMASActive;

	if(PlayerClass(pln) != playerClasses[pln])
		playerClasses[pln] = ExecuteClassScripts(pln);

	if(bot)
		ACS_NamedExecuteAlways("Samsara_BotAltClassHandler",0,pln,0,0);

	TakeInventory("ShrunkPlayer",1);
	UnMorphActor(0,1);
	//ACS_NamedExecuteAlways("SAMSARA_RESETPLAYER_COOP",0,0,0,0);
	ServerEnterTimes[pln] = startTime;
	ACS_NamedExecuteWithResult("SamsaraSynthFire", startTime);

	if (!CheckInventory("IsSamsaraClass")) { terminate; }

	ACS_NamedExecuteAlways("SamsaraEnterClient", 0, startTime,0,0);
	ACS_NamedExecuteWithResult("SamsaraWolfMove", startTime,0,0);
	ACS_NamedExecuteWithResult("SamsaraQPowers",  startTime,0,0);

	ACS_NamedExecuteWithResult("SamsaraFirstTimeUserTutorialSystem", PlayerNumber(), 0, 0);

	if (isLMS() || GetCVar("samsara_lmsrules")) { ApplyLMS(); }

	if (isSinglePlayer()) { SamsaraWepType = samsaraClassNum() + 1; }

	if (!respawning)
	{
		if(!CheckInventory("SamsaraPlayerShrinkDefaults"))
		{
			GiveInventory("SamsaraPlayerScaleX",GetActorProperty(0,APROP_ScaleX));
			GiveInventory("SamsaraPlayerScaleY",GetActorProperty(0,APROP_ScaleY));
			GiveInventory("SamsaraPlayerViewHeight",GetActorProperty(0,APROP_ViewHeight));
			GiveInventory("SamsaraPlayerShrinkDefaults",1);
		}
		if(GetActorProperty(0,APROP_ScaleX) != CheckInventory("SamsaraPlayerScaleX") || GetActorProperty(0,APROP_ScaleY) != CheckInventory("SamsaraPlayerScaleY") || GetActorProperty(0,APROP_ViewHeight) != CheckInventory("SamsaraPlayerViewHeight"))
		{
			SetActorProperty(0,APROP_ScaleX,CheckInventory("SamsaraPlayerScaleX"));
			SetActorProperty(0,APROP_ScaleY,CheckInventory("SamsaraPlayerScaleY"));
			SetActorProperty(0,APROP_ViewHeight,CheckInventory("SamsaraPlayerViewHeight"));
		}
		ClientTipboxes[pln] = 0;
		ACS_NamedExecuteAlways("SamsaraScheduled", 0, respawning,1,0);
	} else {
        if (isSinglePlayer() || isCoop())
        {
            SetInventory("SamsaraBaseSpawnHealth", 0);
            SetInventory("SamsaraExtraBaseSpawnHealth", 0);
            SetInventory("SamsaraExtraSpawnHealth", 0);

            if (!GetCVar("samsara_keepmaxhealth"))
            {
                SetInventory("SamsaraExtraBaseSpawnHealthDeterminant", 0);
                SetInventory("SamsaraExtraSpawnHealthDeterminant", 0);
                SetInventory("SamsaraHasMaxHealth", 0);
            }
        }
	}

    CalcPlayerSpawnHealth(); // added this here for stamina check later on

    if (GetCVar("samsara_backpackstart") && !CheckInventory("SamsaraBackpackGiven") && (!respawning || (respawning && !(isSinglePlayer() || isCoop()))))
    {
        switch (samsaraClassNum())
        {
          case CLASS_CHEX:
            GiveInventory("Backpack", 1);
            GiveInventory("Dual Mini-Zorchers", 1);
            break;
		
          case CLASS_WOLFEN:
            GiveInventory("Backpack", 1);

            if (GetUserCVar(pln, "samsara_cl_wolfmode") == 2) { GiveInventory("Totenkopf_IHaveDualPistols", 1); }
            else
            {
                GiveInventory("Clip", 8);
                TakeInventory("Shell", 8);
            }

            GiveInventory("Samsara_ModeWeaponChange", 1);
            break;

          case CLASS_HEXEN:
            GiveInventory("PortKraterOfMight", 1);
            GiveInventory("SamsaraClassicPariasHasSpikedGauntlet", 1);
            break;

          case CLASS_DUKE:
            GiveInventory("Backpack", 1);

            if (GetUserCVar(pln, "samsara_cl_dukemode") == 2)
            {
                GiveInventory("Duke64DumDums", 6);
                GiveInventory("Duke64ExplosiveShells", 2);
                GiveInventory("Duke64HeatSeekingRockets", 3);
                GiveInventory("Duke64ShrinkerAmmo", 2);
            }
            break;

          case CLASS_MARATHON:
            GiveInventory("Backpack", 1);
            GiveInventory("Talon Ceramic Combat Blade", 1);
            GiveInventory("Tech.50 Pacifier", 1);
            break;

          case CLASS_KATARN:
            GiveInventory("Backpack", 1);
            GiveInventory("Palandrix Stun Gauntlets", 1);
            break;

          case CLASS_DEMONESS:
            GiveInventory("PortKraterOfMight2", 1);
            break;

          case CLASS_BOND:
            GiveInventory("Backpack", 1);
            GiveInventory("Goldeneye_PP7DualToken", 1);
            break;

          case CLASS_CATACOMB:
            GiveInventory("Catacomb_Waves", Random(1, 2));
            GiveInventory("Catacomb_XTerminators", Random(1, 2));
            GiveInventory("Catacomb_Nukes", Random(1, 2));
            GiveInventory("Catacomb_Bolts", Random(1, 2));
            GiveInventory("Catacomb_Zappers", Random(1, 2));
            GiveInventory("Catacomb_Bursts", Random(1, 2));

            if (GetCVar("samsara_nohealthcap")) { ACS_NamedExecuteWithResult("SamsaraPlayerHealer", Random(1, 2) * 25); }
            else { GiveInventory("Catacomb_SmallHealthPotion", Random(1, 2)); }
            break;

          case CLASS_PAINKILLER:
            GiveInventory("Backpack", 1);
            GiveInventory("Clip", 35);
            GiveInventory("Painkiller_FlamerAmmo", 10);
            GiveInventory("Shell", 8);
            GiveInventory("Painkiller_FreezerAmmo", 1);
            GiveInventory("RocketAmmo", 5);
            GiveInventory("Painkiller_HeaterAmmo", 20);
            GiveInventory("Cell", 10);
            GiveInventory("Painkiller_ElectroAmmo", 20);

            if (CheckInventory("Painkiller_Replenish_Power"))
            {
                GiveInventory("Backpack", 1);
                GiveInventory("Clip", 35);
                GiveInventory("Painkiller_FlamerAmmo", 10);
                GiveInventory("Shell", 8);
                GiveInventory("Painkiller_FreezerAmmo", 1);
                GiveInventory("RocketAmmo", 5);
                GiveInventory("Painkiller_HeaterAmmo", 20);
                GiveInventory("Cell", 10);
                GiveInventory("Painkiller_ElectroAmmo", 20);
            }
            break;

          case CLASS_UNREAL:
            GiveInventory("Backpack", 1);

            if (CheckInventory("UDPistolUpgrade") < 4)
            {
                GiveInventory("UDPistolUpgrade", 1);
                GiveInventory("UDPistolUpgradePreferred", 1);
            }
            break;

          case CLASS_QUAKE3:
            GiveInventory("Q3AmmoRegenerationDummy", 1);
            break;

          case CLASS_DESCENT:
            GiveInventory("Backpack", 1);
            GiveInventory("DescentLaserLevel", 1);
            break;

          case CLASS_DEUSEX:
            GiveInventory("Backpack", 1);
            GiveInventory("Backpack", 1);
            GiveInventory("Clip", 20);
            GiveInventory("RocketAmmo", 3);
            ACS_NamedExecuteWithResult("DeusEx_Decorate", 23);
            GiveInventory("DeusEx_StealthPistol", 1);
            GiveInventory("DeusEx_LAM", 1);
            break;

          default:
            GiveInventory("Backpack", 1);
            break;
        }

        GiveInventory("SamsaraBackpackGiven", 1);
		GiveInventory("SamsaraBackpacksInInventory", 1);
    }

	HandleChainsawSpawn(respawning);
	HandleShotgunSpawn(respawning);
	HandleUniqueSpawn(respawning);
	HandleInstagib(GetCvar("instagib") != oldInstagib);
	oldInstagib = GetCvar("instagib");

	ACS_NamedExecuteAlways("SamsaraScheduled", 0, respawning,0,0);

	switch (samsaraClassNum())
	{
	case CLASS_DOOM:
		if (!CheckInventory("SamsaraDoom64StartingUnmakerArtifactsGiven"))
		{
			if (GetCVar("samsara_unmakerartifacts") > 0) { SetInventory("SamsaraDoom64UnmakerArtifact", GetCVar("samsara_unmakerartifacts")); }
			SetInventory("SamsaraDoom64StartingUnmakerArtifactsGiven", 1);
		}

		GiveInventory("SamsaraDoomguyRailgunReloader", 1);
		if (respawning) { GiveInventory("SamsaraDoomguyStrPistolLoaded", 1); }
		break;

	case CLASS_CHEX:
		GiveInventory("SamsaraChexGigazorcherReloader", 1);
		break;

	case CLASS_HEXEN:
		if (CheckInventory("SamsaraHexenClericInvulnerabilityNonShootableActive")) { GiveInventory("SamsaraHexenClericInvulnerabilityNonShootableOff", 1); }
		if (CheckInventory("SamsaraHexenMageInvulnerabilityReflectiveActive")) { GiveInventory("SamsaraHexenMageInvulnerabilityReflectiveOff", 1); }
		break;

	case CLASS_DUKE:
		if (!respawning) { GiveInventory("DukeReady", 1); }
		break;

	case CLASS_MARATHON:
		if (isInvasion()) { GiveInventory("InvasionDualShottyCheck", 1); }
		break;

	case CLASS_QUAKE:
		if (!respawning && CheckInventory("Shell") < 25) { SetInventory("Shell", 25); }
		break;

	case CLASS_CALEB:
		if (!respawning) { GiveInventory("CalebReady", 1); }
		if(!GetCvar("samsara_permakimbo")) TakeInventory("GunsAkimboP",1);
		break;

	case CLASS_STRIFE:
		if (CheckInventory("StrifeguyStartingUpgradesHasBeenGiven"))
		{
            if (respawning)
            {
                if (CheckInventory("StaminaUpgradeHealth")) { ACS_NamedExecuteWithResult("SamsaraPlayerHealer"); }
                if (CheckInventory("AccuracyUpgrade2")) { SetActorProperty(0, APROP_Accuracy, CheckInventory("AccuracyUpgrade2")); }
            }
		}
		else
		{
			if (!(IsLMS() || GetCVar("samsara_lmsrules")) || ((IsLMS() || GetCVar("samsara_lmsrules")) && !GetCVar("samsara_lmsuniques")))
			{
				int sup = GetCVar("samsara_strifeupgrades");
				int supdone = 0;

				if (sup > 10) { sup = 10; }

				while (supdone < sup)
				{
					GiveInventory("StaminaUpgradeDamage", 10);
					GiveInventory("AccuracyUpgrade1", 10);
					GiveInventory("AccuracyUpgrade2", 10);

                    ACS_NamedExecuteWithResult("SamsaraPlayerSpawnHealthAdjust", 10, 1, 7, 100);
                    ACS_NamedExecuteWithResult("SamsaraPlayerHealer");

					GiveInventory("StrifeUpgradeCount", 1);

					supdone++;
				}
			}

			GiveInventory("StrifeguyStartingUpgradesHasBeenGiven", 1);
		}

		if (!respawning)
		{
			if(ThingCountName("Candle",0) > 0 )
			{
				GiveInventory("StrifeGuyInStrife", 1);
				GiveInventory("BlackBirdInStrife", 1);
			}

			if(!GetUserCvar(pln,"samsara_cl_ballgag"))
				GiveInventory("BlackBirdReady", 1);
		}
		break;

	case CLASS_ERAD:
		if (!respawning) { GiveInventory("EleenaReady", 1); }
		break;

    case CLASS_C7:
        if (!respawning)
        {
            GiveInventory("Allmap", 1);
            ACS_NamedExecuteWithResult("SamsaraMapRevealerPickup");
        }
        break;

    case CLASS_KATARN:
        ACS_NamedExecuteWithResult("DarkForces_GiveShield");
        break;

	case CLASS_SW:
		if (!respawning) { GiveInventory("LoWangReady", 1); }
		break;

	case CLASS_RR:
		if (!respawning)
		{
			GiveInventory("LeonardReady", 1);
			if(CheckInventory("BubbaGivesYouMotorcycle"))
			{
				TakeInventory("BubbaGivesYouMotorcycle",1);
				SpawnSpotFacingForced("LeonardMotorcycle",0,0);
			}
		}
		break;

    case CLASS_BITTERMAN:
        if (respawning)
        {
            if (CheckInventory("Q2Chainfist") && !CheckWeapon("Q2Chainfist")) { StopSound(0, CHAN_WEAPON); } // hack
        }
        break;

    case CLASS_DEMONESS:
        if (respawning) { SetActorProperty(0, APROP_Health, 70 + CheckInventory("Hexen2HealthAdd")); }
        break;

    case CLASS_BOND:
        if (CheckInventory("Goldeneye_TankWeapon") && !CheckInventory("SamsaraGoldenEyePermanentTankCannon")) { TakeInventory("Goldeneye_TankWeapon", 1); }
        break;
	}

	if (isSinglePlayer())
	{
		GiveInventory("SPModeOn", 1);
		SetActorState(0, "CoopModeOn");
	}
	else if (isDeathMatch())
	{
		GiveInventory("DMModeOn", 1);
	}
	else if (isCoop())
	{
		GiveInventory("CoopModeOn", 1);
		SetActorState(0, "CoopModeOn");
	}

	if (isTeamGame()) { SetInventory("SamsaraCurrentTeam", GetPlayerInfo(pln, PLAYERINFO_TEAM) + 1); }

    if (respawning && (isSinglePlayer() || isCoop()))
    {
        if (GetCVar("samsara_keepmaxhealth"))
        {
            if (CheckInventory("SamsaraHasBonusStamina"))
            {
                SetActorProperty(0, APROP_Stamina, CheckInventory("SamsaraHasBonusStamina"));
                AdjustHealthOverMaxDisplay();

                ACS_NamedExecuteWithResult("SamsaraPlayerHealer"); // UpgradeStamina gives a health refill
            }
        }
        else { SetInventory("SamsaraHasBonusStamina", 0); }
    }

	pcount = PlayerCount();

	while (!endloop && ServerEnterTimes[pln] == startTime)
	{
		// Inventory cheatage

		if(CheckInventory("MetaCheatDetector")) { ACS_NamedExecuteWithResult("Samsara_FillInventory",0,0,0,0); }

		// Token checkers

        SetInventory("SamsaraHasBonusStamina", GetActorProperty(0, APROP_Stamina));

        CalcPlayerSpawnHealth();

        AdjustArmorDisplays();

        SetInventory("SamsaraHasDoubleFiringSpeed", CheckInventory("PowerDoubleFiringSpeed") || CheckInventory("RuneDoubleFiringSpeed") || CheckInventory("CustomDoubleFiringSpeed") ||
                                                    CheckInventory("PowerRage1") || CheckInventory("PowerCatacomb_RapidFire") || CheckInventory("Painkiller_DoubleFireSpeed"));

        SetInventory("SamsaraHasProsperity", CheckInventory("PowerProsperity") || CheckInventory("RuneProsperity") || CheckInventory("CustomProsperity"));

        SetInventory("SamsaraHasSpread", CheckInventory("PowerSpread") || CheckInventory("RuneSpread") || CheckInventory("CustomSpread") ||
                                         CheckInventory("PowerSpread1"));

		SetInventory("SamsaraReloadMode", GetCVar("samsara_reloadmode"));

        if (GetCVar("sv_infiniteammo") ||
            CheckInventory("PowerInfiniteAmmo") || CheckInventory("RuneInfiniteAmmo") || CheckInventory("CustomInfiniteAmmo") || // the latter two don't exist, but are there just in case
            CheckInventory("Painkiller_MagicGun_Ammo"))
        { SetInventory("SamsaraHasInfiniteAmmo", 1 + GetCVar("samsara_bottomlessmagazines")); }
        else { SetInventory("SamsaraHasInfiniteAmmo", 0); }

        SetInventory("SamsaraWeaponOverheatingDisabled", GetCVar("samsara_weaponoverheating") <= 0 || (GetCVar("samsara_weaponoverheating") == 1 && CheckInventory("SamsaraHasInfiniteAmmo")));

		SetInventory("SamsaraHasInfiniteInventory", GetCVar("sv_infiniteinventory"));

		SetInventory("SamsaraHasDisabledInventoryCooldown", GetCVar("sv_infiniteinventory") && GetCVar("samsara_noinventorycooldown"));

		SetInventory("SamsaraCurrentWaterLevel", GetActorProperty(0, APROP_WaterLevel));

		SetInventory("WolfenMovement", GetUserCVar(pln, "samsara_cl_wolfmove") && !GetCVar("samsara_banwolfmove"));

		if (bot && Random(0, 1024) == 0)
		{
			if (!isDead(0) && GameType() != GAME_TITLE_MAP) { PlaySound(0, "*taunt", CHAN_VOICE); }
		}

		if(CheckInventory("ShrunkPlayer"))
			GiveInventory("StepDeathLogic1",1);

		if (GetUserCvar(pln,"samsara_cl_ballgag") || CheckInventory("IsMorphed"))
		{
			switch (samsaraClassNum())
			{
				case CLASS_DUKE:
					GiveInventory("DukeBallgag", 1);
					break;

				case CLASS_CALEB:
					GiveInventory("CalebBallgag", 1);
					break;

				case CLASS_Strife:
					GiveInventory("BlackBirdBallgag", 1);
					break;

				case CLASS_ERAD:
					GiveInventory("EleenaBallgag", 1);
					break;

				case CLASS_SW:
					GiveInventory("LoWangBallgag", 1);
					break;

				case CLASS_Jon:
					GiveInventory("JonBallgag", 1);
					break;

				case CLASS_RR:
					GiveInventory("LeonardBallgag", 1);
					break;
			}
		}
		else
		{
			TakeInventory("DukeBallgag", 0x7FFFFFFF);
			TakeInventory("CalebBallgag", 0x7FFFFFFF);
			TakeInventory("EleenaBallgag", 0x7FFFFFFF);
			TakeInventory("LoWangBallgag", 0x7FFFFFFF);
			TakeInventory("JonBallgag", 0x7FFFFFFF);
			TakeInventory("LeonardBallgag", 0x7FFFFFFF);
			TakeInventory("BlackBirdBallgag", 0x7FFFFFFF);
		}

		if (GetUserCvar(pln,"samsara_cl_idleballgag") || CheckInventory("CompendiumOpened") || CheckInventory("IsMorphed"))
		{
			switch (samsaraClassNum())
			{
				case CLASS_DUKE:
					GiveInventory("DukeIdleBallgag", 1);
					break;

				case CLASS_CALEB:
					GiveInventory("CalebIdleBallgag", 1);
					break;

				case CLASS_SW:
					GiveInventory("LoWangIdleBallgag", 1);
					break;

				case CLASS_RR:
					GiveInventory("LeonardIdleBallgag", 1);
					break;
			}
		}
		else
		{
			TakeInventory("DukeIdleBallgag", 0x7FFFFFFF);
			TakeInventory("CalebIdleBallgag", 0x7FFFFFFF);
			TakeInventory("LoWangIdleBallgag", 0x7FFFFFFF);
			TakeInventory("LeonardIdleBallgag", 0x7FFFFFFF);
		}

		if (GetUserCvar(pln,"samsara_cl_smoothanims")) { GiveInventory("SamsaraUsingSmoothAnims", 1); }
		else { TakeInventory("SamsaraUsingSmoothAnims", 0x7FFFFFFF); }

		if (GetUserCvar(pln,"samsara_cl_weaponhud")) { GiveInventory("ExpandedHud", 1); }
		else { TakeInventory("ExpandedHud", 0x7FFFFFFF); }

		if (!GetUserCvar(pln,"samsara_cl_legacyfullscreenhud") &&
			(samsaraClassNum() == CLASS_ROTT || samsaraClassNum() == CLASS_HALFLIFE || samsaraClassNum() == CLASS_BITTERMAN || samsaraClassNum() == CLASS_BOND
			|| samsaraClassNum() == CLASS_PAINKILLER || samsaraClassNum() == CLASS_RTCW || samsaraClassNum() == CLASS_QUAKE3 || samsaraClassNum() == CLASS_DESCENT))
		{ GiveInventory("SamsaraUsingNewFullscreenHUD", 1); }
		else { TakeInventory("SamsaraUsingNewFullscreenHUD", 0x7FFFFFFF); }

		if (GetCvar("samsara_permakimbo") == 1) { GiveInventory("AkimboStay", 1); }
		else { TakeInventory("AkimboStay", 0x7FFFFFFF); }

		if (GetUserCvar(pln,"samsara_cl_teamtext") && isTeamGame())
		{
			SetInventory("SamsaraTeamTextActivated", 1);
			SetInventory("SamsaraCurrentTeamIndicator", GetPlayerInfo(pln, PLAYERINFO_TEAM) + 1);
		} else {
			SetInventory("SamsaraTeamTextActivated", 0);
			SetInventory("SamsaraCurrentTeamIndicator", 0);
		}

		if (GetCvar("samsara_skulltagspawn") >= 1) { GiveInventory("SamsaraSkulltagWeaponsAreEnabled", 1); }
		else { TakeInventory("SamsaraSkulltagWeaponsAreEnabled", 0x7FFFFFFF); }

		if (GetCvar("samsara_extraweapons") == 1) { GiveInventory("SamsaraExtraWeaponsAreEnabled", 1); }
		else { TakeInventory("SamsaraExtraWeaponsAreEnabled", 0x7FFFFFFF); }

		SetInventory("SamsaraReverseDualWieldFiring", GetUserCVar(pln, "samsara_cl_dualwieldswap"));

		switch (samsaraClassNum())
		{
			case CLASS_DOOM:
				if (CheckInventory("SamsaraDoomguyStrRailgunScope") && !CheckWeapon(" RailGun ")) { SetInventory("SamsaraDoomguyStrRailgunScope", 0); }

				if (CheckInventory("SamsaraDoomguyStrChaingunFiringSoundCheck") && !CheckWeapon(" Chaingun "))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraDoomguyStrChaingunFiringSoundCheck", 0);
				}

				if (CheckInventory("SamsaraDoomguyStrMinigunFiringSoundCheck") && !CheckWeapon(" Minigun "))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraDoomguyStrMinigunFiringSoundCheck", 0);
				}

				if ((CheckInventory("SamsaraDoom64PlasmaRifleSoundActive") || CheckInventory("SamsaraDoomguyStrPlasmaRifleReadySoundCheck")) && !CheckWeapon("Plasma Rifle"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraDoom64PlasmaRifleSoundActive", 0);
					SetInventory("SamsaraDoomguyStrPlasmaRifleReadySoundCheck", 0);
				}

				if (CheckInventory("SamsaraDoomguyStrStunnerRifleReadySoundCheck") && !CheckWeapon("Stunner Rifle"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraDoomguyStrStunnerRifleReadySoundCheck", 0);
				}

				if (CheckInventory("SamsaraDoomguyStrBFGReadySoundCheck") && !CheckWeapon("B.F.G. 9000"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraDoomguyStrBFGReadySoundCheck", 0);
				}

				doommode = GetUserCvar(pln,"samsara_cl_doommode");
				if(doommode == 2)
				{
					if(CheckInventory("SamsaraExtraWeaponsAreEnabled") && CheckInventory("Super Shotgun"))
					{
						GiveInventory("Automatic Shotgun", 1);
					}
					else
					{
						if(CheckWeapon("Automatic Shotgun"))
						{
							SetWeapon("Super Shotgun");
						}
						TakeInventory("Automatic Shotgun", 1);
					}

					if(CheckInventory("SamsaraExtraWeaponsAreEnabled") && CheckInventory(" Chaingun "))
					{
						GiveInventory(" Flamer ", 1);
					}
					else
					{
						if(CheckWeapon(" Flamer "))
						{
							SetWeapon(" Chaingun ");
						}
						TakeInventory(" Flamer ", 1);
					}

					if(CheckInventory("SamsaraExtraWeaponsAreEnabled") && CheckInventory("Rocket Launcher"))
					{
						GiveInventory("Land Mine Layer", 1);
					}
					else
					{
						if(CheckWeapon("Land Mine Layer"))
						{
							SetWeapon("Rocket Launcher");
						}
						TakeInventory("Land Mine Layer", 1);
					}

					if(CheckInventory("SamsaraExtraWeaponsAreEnabled") && CheckInventory("Plasma Rifle"))
					{
						GiveInventory("Stunner Rifle", 1);
					}
					else
					{
						if(CheckWeapon("Stunner Rifle"))
						{
							SetWeapon("Plasma Rifle");
						}
						TakeInventory("Stunner Rifle", 1);
					}

					if(CheckInventory("SamsaraExtraWeaponsAreEnabled") && CheckInventory("B.F.G. 9000"))
					{
						GiveInventory("Pyro Cannon", 1);
					}
					else
					{
						if(CheckWeapon("Pyro Cannon"))
						{
							SetWeapon("B.F.G. 9000");
						}
						TakeInventory("Pyro Cannon", 1);
					}
					SetInventory("SamsaraAlternateSoundToken", GetUserCvar(pln,"samsara_cl_strongholddoomsounds"));
				}
				else
				{
					SetInventory("SamsaraAlternateSoundToken", GetUserCvar(pln,"samsara_cl_originaldoomsounds"));
				}

				if(doommode != previousvalue || CheckInventory("Samsara_ModeWeaponChange"))
				{
					TakeInventory("SamsaraModeCounter",999);
					GiveInventory("SamsaraModeCounter",doommode);
					TakeInventory("Samsara_ModeWeaponChange",1);
					if (doommode >= 0)
					{
						TakeInventory("DoomClassMode", 2);
						GiveInventory("DoomClassMode", doommode);

						if(doommode == 1)
						{
							GiveInventory("Doom64GuyScalar",1);
							if(CheckInventory("Doom64_IHaveUnmaker") && (!CheckInventory(" Unmaker ")))
								GiveInventory(" Unmaker ", 1);

							if(CheckInventory("DGStrHasAutoShotgun"))
							{
								if(CheckWeapon("Automatic Shotgun"))
									SetWeapon("Super Shotgun");
							}
							if(CheckInventory("DGStrHasFlamethrower"))
							{
								if(CheckWeapon(" Flamer "))
									SetWeapon(" Chaingun ");
							}
							if(CheckInventory("DGStrHasLandMines"))
							{
								if(CheckWeapon("Land Mine Layer"))
									SetWeapon("Rocket Launcher");
							}
							if(CheckInventory("DGStrHasStunnerRifle"))
							{
								if(CheckWeapon("Stunner Rifle"))
									SetWeapon("Plasma Rifle");
							}
							if(CheckInventory("DGStrHasPyroCannon"))
							{
								if(CheckWeapon("Pyro Cannon"))
									SetWeapon(" Unmaker ");
							}
							if(CheckInventory("DGStrHasHomingRocketLauncher"))
							{
								if(CheckWeapon("Homing Rocket Launcher"))
									SetWeapon(" Fist ");
							}
							if(CheckInventory("DGStrHasPlasmaRepeater"))
							{
								if(CheckWeapon("Plasma Repeater"))
									SetWeapon(" Fist ");
							}

							TakeInventory("Automatic Shotgun", 1);
							TakeInventory(" Flamer ", 1);
							TakeInventory("Land Mine Layer", 1);
							TakeInventory("Stunner Rifle", 1);
							TakeInventory("Pyro Cannon", 1);
							TakeInventory("Homing Rocket Launcher", 1);
							TakeInventory("Plasma Repeater", 1);
							SetInventory("SamsaraDoomguyStrWeaponPowerItem", 0);

							SetActorProperty(0,APROP_SoundClass,"Doom64Guy");
						}
						else if(doommode == 2)
						{
							if (CheckInventory("DGStrHasHomingRocketLauncher") && !CheckInventory("Homing Rocket Launcher")) { GiveInventory("Homing Rocket Launcher", 1); }

							if (CheckInventory("DGStrHasPlasmaRepeater") && !CheckInventory("Plasma Repeater")) { GiveInventory("Plasma Repeater", 1); }

							if (CheckInventory("DGStrHasWPK")) { SetInventory("SamsaraDoomguyStrWeaponPowerItem", CheckInventory("DGStrHasWPK")); }

							if(CheckInventory("Doom64_IHaveUnmaker"))
							{
								if(CheckWeapon(" Unmaker "))
								{
									if(CheckInventory("SamsaraExtraWeaponsAreEnabled"))
									{
										SetWeapon("Pyro Cannon");
									}
									else
									{
										SetWeapon("B.F.G. 9000");
									}
								}
							}

							GiveInventory("DoomGuyScalar",1);
							SetActorProperty(0,APROP_SoundClass,"Doomguy");
							TakeInventory(" Unmaker ", 0x7FFFFFFF);
						}
						else
						{
							if(CheckInventory("Doom64_IHaveUnmaker"))
							{
								if(CheckWeapon(" Unmaker "))
									SetWeapon("B.F.G. 9000");
							}
							if(CheckInventory("DGStrHasAutoShotgun"))
							{
								if(CheckWeapon("Automatic Shotgun"))
									SetWeapon("Super Shotgun");
							}
							if(CheckInventory("DGStrHasFlamethrower"))
							{
								if(CheckWeapon(" Flamer "))
									SetWeapon(" Chaingun ");
							}
							if(CheckInventory("DGStrHasLandMines"))
							{
								if(CheckWeapon("Land Mine Layer"))
									SetWeapon("Rocket Launcher");
							}
							if(CheckInventory("DGStrHasStunnerRifle"))
							{
								if(CheckWeapon("Stunner Rifle"))
									SetWeapon("Plasma Rifle");
							}
							if(CheckInventory("DGStrHasPyroCannon"))
							{
								if(CheckWeapon("Pyro Cannon"))
									SetWeapon("B.F.G. 9000");
							}
							if(CheckInventory("DGStrHasHomingRocketLauncher"))
							{
								if(CheckWeapon("Homing Rocket Launcher"))
									SetWeapon(" Fist ");
							}
							if(CheckInventory("DGStrHasPlasmaRepeater"))
							{
								if(CheckWeapon("Plasma Repeater"))
									SetWeapon(" Fist ");
							}

							TakeInventory("Automatic Shotgun", 1);
							TakeInventory(" Flamer ", 1);
							TakeInventory("Land Mine Layer", 1);
							TakeInventory("Stunner Rifle", 1);
							TakeInventory("Pyro Cannon", 1);
							TakeInventory("Homing Rocket Launcher", 1);
							TakeInventory("Plasma Repeater", 1);
							SetInventory("SamsaraDoomguyStrWeaponPowerItem", 0);

							GiveInventory("DoomGuyScalar",1);
							SetActorProperty(0,APROP_SoundClass,"Doomguy");
							TakeInventory(" Unmaker ", 0x7FFFFFFF);
							}
						}
					ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, doommode, pln);
					previousvalue = doommode;
				}

                if (GetCVar("samsara_doomguyoriginal_slot7") > 0) { SetInventory("SamsaraDoomOriginalLoadoutSlot7", GetCVar("samsara_doomguyoriginal_slot7") - 1); }
                else { SetInventory("SamsaraDoomOriginalLoadoutSlot7", GetUserCVar(pln, "samsara_cl_doomguyoriginal_slot7")); }

                if (CheckInventory("DoomClassMode") >= 1)
                {
                    if (loadoutPrevValue[pln][SLOT_BFG9000] != 0)
                    {
                        ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_BFG9000, 0, pln);
                        loadoutPrevValue[pln][SLOT_BFG9000] = 0;
                    }
                } else {
                    if (loadoutPrevValue[pln][SLOT_BFG9000] != CheckInventory("SamsaraDoomOriginalLoadoutSlot7"))
                    {
                        ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_BFG9000, CheckInventory("SamsaraDoomOriginalLoadoutSlot7"), pln);
                        loadoutPrevValue[pln][SLOT_BFG9000] = CheckInventory("SamsaraDoomOriginalLoadoutSlot7");
                    }
                }
				break;

          case CLASS_CHEX:
            if (GetCVar("samsara_chex_fallbackranged") > 0) { SetInventory("SamsaraChexLoadoutFallbackRanged", GetCVar("samsara_chex_fallbackranged") - 1); }
            else { SetInventory("SamsaraChexLoadoutFallbackRanged", GetUserCVar(pln, "samsara_cl_chex_fallbackranged")); }
            
            if (loadoutPrevValue[pln][SLOT_PISTOL] != CheckInventory("SamsaraChexLoadoutFallbackRanged"))
            {
                ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_PISTOL, CheckInventory("SamsaraChexLoadoutFallbackRanged"), pln);
                loadoutPrevValue[pln][SLOT_PISTOL] = CheckInventory("SamsaraChexLoadoutFallbackRanged");
            }
            break;

			case CLASS_HERETIC:
				SetInventory("DSparilStaffMinion", CheckInventory("DSparilStaff"));

				if (!CheckWeapon("Phoenix Rod"))
				{
					if (CheckInventory("SamsaraHereticPhoenixRodPoweredActive")) { GiveInventory("SamsaraHereticPhoenixRodPoweredPowerdownHandler", 1); }

					if (CheckInventory("SamsaraHereticPhoenixRodPoweredPlayingSound"))
					{
						StopSound(0, CHAN_WEAPON);

						SetInventory("SamsaraHereticPhoenixRodPoweredPlayingSound", 0);
					}
				}

				if(CheckInventory("TomeOfPowerCooldown") > 0 && !CheckInventory("PowerHereticTome"))
				{
					int weaponCount = CheckInventory("GotWeapon0") + CheckInventory("GotWeapon2") + CheckInventory("GotWeapon3") + CheckInventory("GotWeapon4") + CheckInventory("GotWeapon5") + CheckInventory("GotWeapon6") + CheckInventory("GotWeapon7");
					int tomeTimer = 1800;

					until(weaponCount == 0)
					{
						weaponCount--;
						tomeTimer = (tomeTimer * 2)/3;
					}

					if(CheckInventory("TomeOfPowerCooldown") > tomeTimer)
					{
						TakeInventory("TomeOfPowerCooldown", 1800);
						GiveInventory("TomeOfPowerCooldown", tomeTimer);
					}

					if(toPTimer >= 35)
					{
						toPTimer = 0;
						TakeInventory("TomeOfPowerCooldown",1);
					}

					toPTimer++;
				}
				break;

			case CLASS_WOLFEN:
				wolfmode = GetUserCvar(pln,"samsara_cl_wolfmode");
				if(wolfmode != previousvalue || CheckInventory("Samsara_ModeWeaponChange"))
				{
					TakeInventory("SamsaraModeCounter",999);
					GiveInventory("SamsaraModeCounter",wolfmode);
					TakeInventory("Samsara_ModeWeaponChange",1);
					if (wolfmode >= 0)
					{
						TakeInventory("WolfenClassMode", 2);
						GiveInventory("WolfenClassMode", wolfmode);
						if(wolfmode == 2)
						{
							TakeInventory("WolfExtraLife", 0x7FFFFFFF); if(CheckInventory("Totenkopf_IHaveMauser") && (!CheckInventory("Totenkopf_Mauser"))) { GiveInventory("Totenkopf_Mauser", 1); }
							if(CheckInventory("Totenkopf_IHaveDualMausers") && (!CheckInventory("Totenkopf_MauserDual"))) { GiveInventory("Totenkopf_MauserDual", 1); }
							if(CheckInventory("Totenkopf_IHaveDualPistols") && (!CheckInventory("Totenkopf_PistolDual"))) { GiveInventory("Totenkopf_PistolDual", 1); }
							if(CheckInventory("Totenkopf_IHaveDualMP40s") && (!CheckInventory("Totenkopf_MP40Dual"))) { GiveInventory("Totenkopf_MP40Dual", 1); }
							if(CheckInventory("Totenkopf_IHaveSTG44") && (!CheckInventory("Totenkopf_STG44"))) { GiveInventory("GotWeapon3", 1); GiveInventory("Totenkopf_STG44", 1); }
							if(CheckInventory("Totenkopf_IHaveFlameThrower") && (!CheckInventory("Totenkopf_FlameThrower"))) { GiveInventory("Totenkopf_FlameThrower", 1); }
							if(CheckInventory("Totenkopf_IHaveMG42") && (!CheckInventory("Totenkopf_MG42"))) { GiveInventory("Totenkopf_MG42", 1); }
							if(CheckInventory("Totenkopf_IHaveScope") && (!CheckInventory("Totenkopf_Sniper"))) { GiveInventory("Totenkopf_Sniper", 1); }
							if(CheckInventory("Totenkopf_IHavePowerArmor") && (!CheckInventory("TotenkopfHasPowerArmor"))) { GiveInventory("TotenkopfHasPowerArmor", 1); }
							if(CheckInventory("Totenkopf_IAmWolverine") && (!CheckInventory("TotenkopfHasHealingOrb"))) { GiveInventory("TotenkopfHasHealingOrb", 1); }
							if(!CheckInventory("Wolfen_IHaveSlot2")) { TakeInventory("GotWeapon2", 1); TakeInventory("Machine Gun",1); }
						}
						else if(wolfmode <= 1)
						{
							if(CheckInventory("Wolfen_IHaveExtraLife") && (!CheckInventory("WolfExtraLife"))) { GiveInventory("WolfExtraLife", CheckInventory("Wolfen_IHaveExtraLife")); }
							if(!CheckInventory("Wolfen_IHaveSlot2") && CheckInventory("Totenkopf_IHaveSTG44")) { GiveInventory("GotWeapon2", 1); GiveInventory("Machine Gun",1); }
							//if(CheckInventory("Totenkopf_IHaveSTG44") && (!CheckInventory("Machine Gun"))) { GiveInventory("Machine Gun", 1); }
							TakeInventory("Totenkopf_PistolDual", 0x7FFFFFFF); TakeInventory("Totenkopf_Mauser", 0x7FFFFFFF); TakeInventory("Totenkopf_MauserDual", 0x7FFFFFFF); TakeInventory("Totenkopf_MP40Dual", 0x7FFFFFFF); TakeInventory("Totenkopf_STG44", 0x7FFFFFFF); TakeInventory("Totenkopf_FlameThrower", 0x7FFFFFFF);  TakeInventory("Totenkopf_MG42", 0x7FFFFFFF);  TakeInventory("Totenkopf_Sniper", 0x7FFFFFFF); TakeInventory("TotenkopfHasPowerArmor", 0x7FFFFFFF);  TakeInventory("TotenkopfHasHealingOrb", 0x7FFFFFFF);
						}
					}
					else
					{
						if(!CheckInventory("Wolfen_IHaveSlot2") && CheckInventory("Totenkopf_IHaveSTG44")) { GiveInventory("GotWeapon2", 1); GiveInventory("Machine Gun",1); }
						TakeInventory("WolfenClassMode", 0x7FFFFFFF);
						TakeInventory("Totenkopf_PistolDual", 0x7FFFFFFF);
						TakeInventory("Totenkopf_Mauser", 0x7FFFFFFF);
						TakeInventory("Totenkopf_MauserDual", 0x7FFFFFFF);
						TakeInventory("Totenkopf_MP40Dual", 0x7FFFFFFF);
						TakeInventory("Totenkopf_STG44", 0x7FFFFFFF);
						TakeInventory("Totenkopf_FlameThrower", 0x7FFFFFFF);
						TakeInventory("Totenkopf_MG42", 0x7FFFFFFF);
						TakeInventory("Totenkopf_Sniper", 0x7FFFFFFF);
						TakeInventory("TotenkopfHasPowerArmor", 0x7FFFFFFF);
						TakeInventory("TotenkopfHasHealingOrb", 0x7FFFFFFF);
					}
					ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, wolfmode, pln);
					previousvalue = wolfmode;
					//if(CheckInventory("Wolfen_IHaveExtraLife") && (!CheckInventory("WolfExtraLife"))) { GiveInventory("WolfExtraLife", 1);  }
					//if(CheckInventory("Totenkopf_IHaveSTG44") && (!CheckInventory("Machine Gun"))) { GiveInventory("Machine Gun", 1); }
				}
				break;

			case CLASS_HEXEN:
				hexmode = GetUserCvar(pln,"samsara_cl_hexclass");
				if(hexmode != previousvalue || CheckInventory("Samsara_ModeWeaponChange"))
				{
					TakeInventory("SamsaraModeCounter",999);
					GiveInventory("SamsaraModeCounter",hexmode);
					TakeInventory("Samsara_ModeWeaponChange",1);
					GiveInventory("SamsaraAllySwitchCaller",1);
					if (hexmode > 0)
					{
						TakeInventory("HexenClassMode", 3);
						GiveInventory("HexenClassMode", hexmode);
						ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, hexmode, pln);
						if(hexmode == 1)
						{
							SetActorProperty(0,APROP_Speed,1.125);
							SetActorProperty(0,APROP_SoundClass,"HexenPlayer");
							GiveInventory("Mace of Contrition", 1);
							if (GetCvar("instagib") == 1) {
								if (GetCvar("samsara_slotmode") == 0) {
									TakeInventory("Sapphire Wand", 1);
								}
								else if (GetCvar("samsara_slotmode") == 1) {
									GiveInventory("Sapphire Wand", 1);
									TakeInventory("Mace of Contrition", 1);
								}
									else if (GetCvar("samsara_slotmode") >= 2) {
										TakeInventory("Sapphire Wand", 1);
										TakeInventory("Mace of Contrition", 1);
									}
							}
							if(CheckInventory("SamsaraClassicPariasHasBloodscourge") && !CheckInventory("Bloodscourge")) { GiveInventory("Bloodscourge", 1); }
							if(CheckInventory("SamsaraClassicPariasHasSpikedGauntlet") && !CheckInventory("Spiked Gauntlet")) { GiveInventory("Spiked Gauntlet", 1); }
						}
						else if(hexmode == 2)
						{
							if(CheckInventory("SamsaraClassicPariasHasBloodscourge"))
							{
								if(CheckWeapon("Bloodscourge"))
									SetWeapon("Wraithverge");
							}
							if(CheckInventory("SamsaraClassicPariasHasSpikedGauntlet"))
							{
								if(CheckWeapon("Spiked Gauntlet"))
									SetWeapon("Sapphire Wand");
							}
							SetActorProperty(0,APROP_Speed,0.935);
							SetActorProperty(0,APROP_SoundClass,"HexenDaedalon");
							if (CheckWeapon("Mace of Contrition")) { SetWeapon("Sapphire Wand"); }
							TakeInventory("Mace of Contrition", 1);
							if ((GetCvar("instagib") == 1 && (GetCvar("samsara_slotmode") == 0 || GetCvar("samsara_slotmode") == 1))) {
								GiveInventory("Sapphire Wand", 1);
							}
							TakeInventory("Bloodscourge", 0x7FFFFFFF);
							TakeInventory("Spiked Gauntlet", 0x7FFFFFFF);
						}
						else if(hexmode == 3)
						{
							if(CheckInventory("SamsaraClassicPariasHasBloodscourge"))
							{
								if(CheckWeapon("Bloodscourge"))
									SetWeapon("Wraithverge");
							}
							if(CheckInventory("SamsaraClassicPariasHasSpikedGauntlet"))
							{
								if(CheckWeapon("Spiked Gauntlet"))
									SetWeapon("Mace of Contrition");
							}
							SetActorProperty(0,APROP_Speed,1.125);
							SetActorProperty(0,APROP_SoundClass,"HexenBaratus");
							GiveInventory("Mace of Contrition", 1);
							if (GetCvar("instagib") == 1) {
								if (GetCvar("samsara_slotmode") == 0) {
									TakeInventory("Sapphire Wand", 1);
								}
								else if (GetCvar("samsara_slotmode") == 1) {
									GiveInventory("Sapphire Wand", 1);
									TakeInventory("Mace of Contrition", 1);
								}
								else if (GetCvar("samsara_slotmode") >= 2) {
									TakeInventory("Sapphire Wand", 1);
									TakeInventory("Mace of Contrition", 1);
								}
							}
							TakeInventory("Bloodscourge", 0x7FFFFFFF);
							TakeInventory("Spiked Gauntlet", 0x7FFFFFFF);
						}
					}
					else
					{
						if(CheckInventory("SamsaraClassicPariasHasBloodscourge"))
						{
							if(CheckWeapon("Bloodscourge"))
								SetWeapon("Wraithverge");
						}
						if(CheckInventory("SamsaraClassicPariasHasSpikedGauntlet"))
						{
							if(CheckWeapon("Spiked Gauntlet"))
								SetWeapon("Mace of Contrition");
						}
						SetActorProperty(0,APROP_Speed,1.0);
						ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, hexmode, pln);
						SetActorProperty(0,APROP_SoundClass,"HexenPlayer");
						TakeInventory("HexenClassMode", 0x7FFFFFFF);
						GiveInventory("Mace of Contrition", 1);
						if (GetCvar("instagib") == 1) {
							if (GetCvar("samsara_slotmode") == 0) {
								TakeInventory("Sapphire Wand", 1);
							}
							else if (GetCvar("samsara_slotmode") == 1) {
								GiveInventory("Sapphire Wand", 1);
								TakeInventory("Mace of Contrition", 1);
							}
								else if (GetCvar("samsara_slotmode") >= 2) {
									TakeInventory("Sapphire Wand", 1);
									TakeInventory("Mace of Contrition", 1);
							}
						}
						TakeInventory("Bloodscourge", 0x7FFFFFFF);
						TakeInventory("Spiked Gauntlet", 0x7FFFFFFF);
					}
					previousvalue = hexmode;
				}
				break;

			case CLASS_DUKE:
				if (CheckInventory("SamsaraDuke64PlasmaCannonLoopSoundCheck") && !CheckWeapon("Devastator Weapon"))
				{
					StopSound(0, CHAN_5);

					SetInventory("SamsaraDuke64PlasmaCannonLoopSoundCheck", 0);
				}

				dukemode = GetUserCvar(pln,"samsara_cl_dukemode");
				if(dukemode != previousvalue || CheckInventory("Samsara_ModeWeaponChange"))
				{
					TakeInventory("SamsaraModeCounter",999);
					GiveInventory("SamsaraModeCounter",dukemode);
					TakeInventory("Samsara_ModeWeaponChange",1);
					if (dukemode >= 0)
					{
						TakeInventory("DukeClassMode", 2);
						GiveInventory("DukeClassMode", dukemode);
						if(dukemode == 1)
						{
							if(CheckInventory("DukeHasShrinker"))
							{
								GiveInventory("Shrinker", 1);
							}

							if(CheckInventory("DukeHasExpander"))
							{
								GiveInventory("Expander", 1);
							}
							
							if(CheckInventory("SamsaraDukeHasGoldenDesertEagle"))
							{
								GiveInventory("Golden Desert Eagle", 1);
							}

							SetActorProperty(0,APROP_SoundClass,"DukePlayer");
						}
						else if(dukemode == 2)
						{
							if(CheckInventory("DukeHasShrinker"))
							{
								if(CheckWeapon("Shrinker"))
									SetWeapon("Freezethrower");
							}

							if(CheckInventory("DukeHasExpander"))
							{
								if(CheckWeapon("Expander"))
									SetWeapon("Freezethrower");
							}
							
							if(CheckInventory("SamsaraDukeHasGoldenDesertEagle"))
							{
								if(CheckWeapon("Golden Desert Eagle"))
									SetWeapon("Chaingun Cannon");
							}

							TakeInventory("Shrinker", 1);
							TakeInventory("Expander", 1);
							TakeInventory("Golden Desert Eagle", 1);

							SetActorProperty(0,APROP_SoundClass,"Duke64Player");
						}
						else
						{
							if(CheckInventory("DukeHasShrinker"))
							{
								GiveInventory("Shrinker", 1);
							}

							if(CheckInventory("DukeHasExpander"))
							{
								GiveInventory("Expander", 1);
							}
							
							if(CheckInventory("SamsaraDukeHasGoldenDesertEagle"))
							{
								GiveInventory("Golden Desert Eagle", 1);
							}

							SetActorProperty(0,APROP_SoundClass,"DukePlayer");
							}
						}
					ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, dukemode, pln);
					previousvalue = dukemode;
				}
				break;

			case CLASS_MARATHON:
				if (!CheckWeapon(".44 Magnum Mega Class A1") && !CheckWeapon("WSTE-M5 Combat Shotgun"))
				{
					SetInventory("SamsaraLevelSwitch_DualWielding", 0);
					SetInventory("SamsaraSynthFireActive", 0);
				}

				if (CheckWeapon("KKV-7 SMG Flechette")) { TakeInventory("SMGClicked", 1); } // weapon fires for 1 tic each frame
				else { SetInventory("SMGClicked", 0); }

				if (CheckWeapon("MA-75B Assault Rifle"))
				{
					TakeInventory("AssaultFiredS", 1 + CheckInventory("SamsaraHasDoubleFiringSpeed"));
					TakeInventory("AssaultClicked", 1); // weapon fires for 1 tic each frame
					TakeInventory("AssaultClicked2", 1 + CheckInventory("SamsaraHasDoubleFiringSpeed"));
					GiveInventory("SamsaraMarathonRifleAltReload", 1);
					GiveInventory("SamsaraMarathonRifleAltFire", 1);
				} else {
					SetInventory("AssaultFiredS", 0);
					SetInventory("AssaultClicked", 0);
					SetInventory("AssaultClicked2", 0);
				}

				if (CheckWeapon("Alien Weapon"))
				{
					TakeInventory("AlienWeaponFired", 1 + CheckInventory("SamsaraHasDoubleFiringSpeed"));
					TakeInventory("AlienWeaponFiredP", 1 + CheckInventory("SamsaraHasDoubleFiringSpeed"));
					TakeInventory("AlienWeaponFiredS", 1 + CheckInventory("SamsaraHasDoubleFiringSpeed"));
				} else {
					SetInventory("AlienWeaponFired", 0);
					SetInventory("AlienWeaponFiredP", 0);
					SetInventory("AlienWeaponFiredS", 0);
					SetInventory("AlienWeaponSecondarySide", 0);
				}

				if (!CheckInventory("SamsaraHasInfiniteAmmo"))
				{
					if (CheckInventory("Alien Weapon") && !CheckWeapon("Alien Weapon") && !CheckInventory("UnknownAmmo")) { TakeInventory("Alien Weapon", 1); }
					if (CheckInventory(" Alien Weapon ") && !CheckWeapon(" Alien Weapon ") && !CheckInventory("UnknownAmmo2")) { TakeInventory(" Alien Weapon ", 1); }
					if (CheckInventory("Talon Ceramic Combat Blade") && !CheckWeapon("Talon Ceramic Combat Blade") && !CheckInventory("KnifeAmmo")) { TakeInventory("Talon Ceramic Combat Blade", 1); }
				}
				break;

			case CLASS_QUAKE:
				SetInventory("Grenade Launcher DOE", CheckInventory("Grenade Launcher") && !GetCVar("samsara_vanillaquake"));
				SetInventory("Nailgun DOE", CheckInventory("Nailgun") && !GetCVar("samsara_vanillaquake"));
				SetInventory("  Rocket Launcher DOE  ", CheckInventory("  Rocket Launcher  ") && !GetCVar("samsara_vanillaquake"));
				SetInventory("Super Nailgun DOE", CheckInventory("Super Nailgun") && !GetCVar("samsara_vanillaquake"));
				SetInventory("Thunderbolt DOE", CheckInventory("Thunderbolt") && !GetCVar("samsara_vanillaquake"));

				SetInventory("UsingDoEAmmo", CheckWeapon("Grenade Launcher DOE") || CheckWeapon("Nailgun DOE") || CheckWeapon("  Rocket Launcher DOE  ") || CheckWeapon("Super Nailgun DOE") || CheckWeapon("Thunderbolt DOE"));

				if (CheckInventory("SamsaraQuakeThunderboltLightningFiringSoundCheck") && !CheckWeapon("Thunderbolt"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuakeThunderboltLightningFiringSoundCheck", 0);
				}
				break;

			case CLASS_ROTT:
				GiveInventory("RottDamageEnemyBeneath",1);
				rottmode = GetUserCvar(pln,"samsara_cl_rottmode");
				//only run these actions if the value changes
				if(rottmode != previousvalue)
				{
					GiveInventory("SamsaraAllySwitchCaller",1);
					TakeInventory("RottMode", 4);
					GiveInventory("RottMode",rottmode);
					ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, rottmode, pln);
					switch(rottmode)
					{
						default:
							SetActorProperty(0,APROP_DamageFactor,0.9);
							SetActorProperty(0,APROP_ViewHeight,50.0);
							SetActorProperty(0,APROP_Speed,0.975);
							SetActorProperty(0,APROP_SoundClass,"Freely");
							break;
						case 1:
							SetActorProperty(0,APROP_DamageFactor,1.0);
							SetActorProperty(0,APROP_ViewHeight,48.0);
							SetActorProperty(0,APROP_Speed,1.0);
							SetActorProperty(0,APROP_SoundClass,"Cassatt");
							break;
						case 2:
							SetActorProperty(0,APROP_DamageFactor,1.1);
							SetActorProperty(0,APROP_ViewHeight,46.0);
							SetActorProperty(0,APROP_Speed,1.0675);
							SetActorProperty(0,APROP_SoundClass,"Barrett");
							break;
						case 3:
							SetActorProperty(0,APROP_DamageFactor,1.2);
							SetActorProperty(0,APROP_ViewHeight,44.0);
							SetActorProperty(0,APROP_Speed,1.125);
							SetActorProperty(0,APROP_SoundClass,"Ni");
							break;
						case 4:
							SetActorProperty(0,APROP_DamageFactor,0.8);
							SetActorProperty(0,APROP_ViewHeight,52.0);
							SetActorProperty(0,APROP_Speed,0.935);
							SetActorProperty(0,APROP_SoundClass,"Wendt");
							break;
					}
					previousvalue = rottmode;
				}
				break;
			case CLASS_BLAKE:
				// stupid fragile code prevention hack
				if (CheckWeapon("Rapid Assault Weapon")) { SetInventory("SamsaraBStoneCurrentAmmoUsed", 1); }
				else if (CheckWeapon("Slow Fire Protector") || CheckWeapon("Heavy Assault Weapon")) { SetInventory("SamsaraBStoneCurrentAmmoUsed", 2); }
				else if (CheckWeapon("Plasma Discharge Unit")) { SetInventory("SamsaraBStoneCurrentAmmoUsed", 3); }
				else if (CheckWeapon("Dual Neutron Disruptor") || CheckWeapon("Anti-Plasma Cannon")) { SetInventory("SamsaraBStoneCurrentAmmoUsed", 4); }
				else { SetInventory("SamsaraBStoneCurrentAmmoUsed", 0); }

				TakeInventory("SamsaraBStoneAutoChargePistolCooldown", 1 + CheckInventory("SamsaraHasDoubleFiringSpeed"));

				blakemode = GetUserCvar(pln,"samsara_cl_bsaog");
				if(blakemode != previousvalue)
				{
					TakeInventory("SamsaraModeCounter",999);
					GiveInventory("SamsaraModeCounter",blakemode);
					if(blakemode)
					{
						GiveInventory("BlakeAOGToken", 1);
						ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, 1, pln);
					}
					else
					{
						ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, 0, pln);
						TakeInventory("BlakeAOGToken", 0x7FFFFFFF);
					}
					previousvalue = blakemode;
				}
				break;
			case CLASS_STRIFE:
				SetInventory("  Crossbow Poison  ", CheckInventory("  Crossbow  "));
				SetInventory(" Grenade Launcher WP ", CheckInventory(" Grenade Launcher "));
				SetInventory(" Grenade Launcher Gas ", CheckInventory(" Grenade Launcher "));
				SetInventory(" Mauler Torpedo ", CheckInventory(" Mauler "));

				if (!CheckInventory("BlackBirdBallgag") && !CheckInventory("BlackBirdTauntCooldown") && !CheckInventory("BlackBirdInStrife"))
				{
					if (strifeCeilingHeight != GetActorCeilingZ(0) && random(0, 100) <= 1)
					{
						GiveInventory("BlackBirdTauntCooldown", 5);
						ACS_NamedExecuteWithResult("BlackBirdTauntCooldown");
						ACS_NamedExecuteWithResult("StrifeBlackBirdQuote", 1, pln);
					} else if(CheckInventory("KillCountAmountTrue") > strifeLastKillCount && random(0, 40) <= 3) {
						GiveInventory("BlackBirdTauntCooldown", 5);
						ACS_NamedExecuteWithResult("BlackBirdTauntCooldown");
						ACS_NamedExecuteWithResult("StrifeBlackBirdQuote", 2, pln);
					} else if (isDead(0) && strifeDead == 0 && !isCompetitiveGamemode()) {
						GiveInventory("BlackBirdTauntCooldown", 5);
						ACS_NamedExecuteWithResult("BlackBirdTauntCooldown");
						ACS_NamedExecuteWithResult("StrifeBlackBirdQuote", 5, pln);
					}
				}

				strifeDead = GetActorProperty(0,APROP_Health) <= 0;
				strifeCeilingHeight = GetActorCeilingZ(0);
				strifeLastKillCount = CheckInventory("KillCountAmountTrue");
				break;
			/*
			case CLASS_ERAD:
				eradmode = GetUserCvar(pln,"samsara_cl_eradmode");
				//only run these actions if the value changes
				if(eradmode != previousvalue)
				{
					GiveInventory("SamsaraAllySwitchCaller",1);
					TakeInventory("EradMode", 3);
					GiveInventory("EradMode",eradmode);
					ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, eradmode, pln);
					switch(eradmode)
					{
						default:
							SetActorProperty(0,APROP_SoundClass,"Eleena");
							break;
						case 1:
							SetActorProperty(0,APROP_SoundClass,"Kamchak");
							break;
						case 2:
							SetActorProperty(0,APROP_SoundClass,"DanBlaze");
							break;
						case 3:
							SetActorProperty(0,APROP_SoundClass,"EMarine");
							break;
					}
					previousvalue = eradmode;
				}
				break;
			*/
			case CLASS_RMR:
				if(CheckInventory("SamsaraExtraWeaponsAreEnabled") && CheckInventory(" RMR Plasma Cannon "))
				{
					GiveInventory("Subestron Arm", 1);
				}
				else
				{
					if(CheckWeapon("Subestron Arm"))
					{
						SetWeapon(" RMR Plasma Cannon ");
					}
					TakeInventory("Subestron Arm", 1);
				}

                if (!CheckInventory("PowerRMRFlyAbilityHack")) { TakeInventory("PowerRMRFlyAbility", 1); } // hexen

				SetInventory("SamsaraAlternateSoundToken", GetUserCvar(pln,"samsara_cl_rebelmoonrisingsounds"));
				break;
			case CLASS_KATARN:
                if (CheckInventory("KatarnBlazeIt"))
                {
                    if (CheckInventory("KatarnFireRateUp"))
                    {
                        TakeInventory("KatarnBlazeIt", 1);
                        SetInventory("KatarnBlazeItTimer", CheckInventory("KatarnBlazeIt") / 35);
                    }
                }
                else { SetInventory("KatarnFireRateUp", 0); }
				break;
			case CLASS_POGREED:
				ipogmode = GetUserCvar(pln,"samsara_cl_ipogmode");
				//only run these actions if the value changes
				if(ipogmode != previousvalue)
				{
					GiveInventory("SamsaraAllySwitchCaller",1);
					TakeInventory("IpogMode", 4);
					GiveInventory("IpogMode",ipogmode);
					ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, ipogmode, pln);
					switch(ipogmode)
					{
						default:
							SetActorProperty(0,APROP_SoundClass,"Mooman");
							break;
						case 1:
							SetActorProperty(0,APROP_SoundClass,"Cyborg");
							break;
						case 2:
							SetActorProperty(0,APROP_SoundClass,"Lizard");
							break;
						case 3:
							SetActorProperty(0,APROP_SoundClass,"Specimen");
							break;
						case 4:
							SetActorProperty(0,APROP_SoundClass,"Dominatrix");
							break;
					}
					previousvalue = ipogmode;
				}
				break;
			case CLASS_DISRUPTOR:
				SetInventory("SamsaraDisruptorUsingAltAmmo", (CheckWeapon(" Phase Rifle ") && CheckInventory("SamsaraDisruptorPhaseRifleMode")) || (CheckWeapon("Phase Repeater") && CheckInventory("SamsaraDisruptorPhaseRepeaterMode")) || (CheckWeapon(" Lock-on Cannon ") && CheckInventory("SamsaraDisruptorLockOnCannonMode")));

				if (CheckInventory("SamsaraDisruptorPlasmaLanceFiringSoundCheck") && !CheckWeapon(" Disruptor Plasmalance "))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraDisruptorPlasmaLanceFiringSoundCheck", 0);
				}
				break;
			case CLASS_WITCHAVEN:
				if (!CheckInventory("PowerWTSpellFlyHack")) { TakeInventory("PowerWTSpellFly", 1); } // hexen
				break;
			case CLASS_HALFLIFE:
				if (CheckInventory("HLXBowIsZoomed") && !CheckWeapon("HL Crossbow")) { SetInventory("HLXBowIsZoomed", 0); }

				TakeInventory("SamsaraHalfLifeSAWReloadCooldown", 1); // reload takes 1 tic each frame
				TakeInventory("SamsaraHalfLifeSniperReloadCooldown", 1); // reload takes 1 tic each frame

				if (CheckInventory("HLEGONSoundActive") && !CheckWeapon("E.G.O.N."))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("HLEGONSoundActive", 0);
				}

				if (!CheckWeapon("HLOPBarnacle"))
				{
					if (CheckInventory("SamsaraHalfLifeBarnacleGrappleSoundLoop"))
					{
						StopSound(0, CHAN_WEAPON);

						SetInventory("SamsaraHalfLifeBarnacleGrappleSoundLoop", 0);
					}

					SetInventory("HLOPBarnacleReleaseTether", 0);
					SetInventory("HLOPBarnacleLatchedTether", 0);
					SetInventory("HLOPBarnacleTetherActive", 0);
				}

				halflifemode = GetUserCvar(pln,"samsara_cl_shephardmode");
				if(halflifemode != previousvalue || CheckInventory("Samsara_ModeWeaponChange"))
				{
					TakeInventory("SamsaraModeCounter",999);
					GiveInventory("SamsaraModeCounter",halflifemode);
					if(halflifemode)
						GiveInventory("HalfLifeOpposingForce", 1);
					else
						TakeInventory("HalfLifeOpposingForce", 0x7FFFFFFF);

					ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, halflifemode, pln);
					previousvalue = halflifemode;
				}

                if (CheckInventory("HalfLifeOpposingForce"))
                {
                    if (GetCVar("samsara_shephard_fallbackmelee") > 0) { SetInventory("SamsaraHalfLifeLoadoutFallbackMelee", GetCVar("samsara_shephard_fallbackmelee") - 1); }
                    else { SetInventory("SamsaraHalfLifeLoadoutFallbackMelee", GetUserCVar(pln, "samsara_cl_shephard_fallbackmelee")); }

                    if (GetCVar("samsara_shephard_slot1") > 0) { SetInventory("SamsaraHalfLifeLoadoutSlot1", GetCVar("samsara_shephard_slot1") - 1); }
                    else { SetInventory("SamsaraHalfLifeLoadoutSlot1", GetUserCVar(pln, "samsara_cl_shephard_slot1")); }

                    if (GetCVar("samsara_shephard_slot3") > 0) { SetInventory("SamsaraHalfLifeLoadoutSlot3", GetCVar("samsara_shephard_slot3") - 1); }
                    else { SetInventory("SamsaraHalfLifeLoadoutSlot3", GetUserCVar(pln, "samsara_cl_shephard_slot3")); }

                    if (GetCVar("samsara_shephard_slot5") > 0) { SetInventory("SamsaraHalfLifeLoadoutSlot5", GetCVar("samsara_shephard_slot5") - 1); }
                    else { SetInventory("SamsaraHalfLifeLoadoutSlot5", GetUserCVar(pln, "samsara_cl_shephard_slot5")); }

                    if (GetCVar("samsara_shephard_slot6") > 0) { SetInventory("SamsaraHalfLifeLoadoutSlot6", GetCVar("samsara_shephard_slot6") - 1); }
                    else { SetInventory("SamsaraHalfLifeLoadoutSlot6", GetUserCVar(pln, "samsara_cl_shephard_slot6")); }

                    if (GetCVar("samsara_shephard_slot7") > 0) { SetInventory("SamsaraHalfLifeLoadoutSlot7", GetCVar("samsara_shephard_slot7") - 1); }
                    else { SetInventory("SamsaraHalfLifeLoadoutSlot7", GetUserCVar(pln, "samsara_cl_shephard_slot7")); }

                    if (GetCVar("samsara_shephard_unique1") > 0) { SetInventory("SamsaraHalfLifeLoadoutUnique1", GetCVar("samsara_shephard_unique1") - 1); }
                    else { SetInventory("SamsaraHalfLifeLoadoutUnique1", GetUserCVar(pln, "samsara_cl_shephard_unique1")); }

                    if (GetCVar("samsara_shephard_unique2") > 0) { SetInventory("SamsaraHalfLifeLoadoutUnique2", GetCVar("samsara_shephard_unique2") - 1); }
                    else { SetInventory("SamsaraHalfLifeLoadoutUnique2", GetUserCVar(pln, "samsara_cl_shephard_unique2")); }

                    if (GetCVar("samsara_shephard_unique3") > 0) { SetInventory("SamsaraHalfLifeLoadoutUnique3", GetCVar("samsara_shephard_unique3") - 1); }
                    else { SetInventory("SamsaraHalfLifeLoadoutUnique3", GetUserCVar(pln, "samsara_cl_shephard_unique3")); }
                } else {
                    if (GetCVar("samsara_freeman_fallbackmelee") > 0) { SetInventory("SamsaraHalfLifeLoadoutFallbackMelee", GetCVar("samsara_freeman_fallbackmelee") - 1); }
                    else { SetInventory("SamsaraHalfLifeLoadoutFallbackMelee", GetUserCVar(pln, "samsara_cl_freeman_fallbackmelee")); }

                    if (GetCVar("samsara_freeman_slot1") > 0) { SetInventory("SamsaraHalfLifeLoadoutSlot1", GetCVar("samsara_freeman_slot1") - 1); }
                    else { SetInventory("SamsaraHalfLifeLoadoutSlot1", GetUserCVar(pln, "samsara_cl_freeman_slot1")); }

                    if (GetCVar("samsara_freeman_slot3") > 0) { SetInventory("SamsaraHalfLifeLoadoutSlot3", GetCVar("samsara_freeman_slot3") - 1); }
                    else { SetInventory("SamsaraHalfLifeLoadoutSlot3", GetUserCVar(pln, "samsara_cl_freeman_slot3")); }

                    if (GetCVar("samsara_freeman_slot5") > 0) { SetInventory("SamsaraHalfLifeLoadoutSlot5", GetCVar("samsara_freeman_slot5") - 1); }
                    else { SetInventory("SamsaraHalfLifeLoadoutSlot5", GetUserCVar(pln, "samsara_cl_freeman_slot5")); }

                    if (GetCVar("samsara_freeman_slot6") > 0) { SetInventory("SamsaraHalfLifeLoadoutSlot6", GetCVar("samsara_freeman_slot6") - 1); }
                    else { SetInventory("SamsaraHalfLifeLoadoutSlot6", GetUserCVar(pln, "samsara_cl_freeman_slot6")); }

                    if (GetCVar("samsara_freeman_slot7") > 0) { SetInventory("SamsaraHalfLifeLoadoutSlot7", GetCVar("samsara_freeman_slot7") - 1); }
                    else { SetInventory("SamsaraHalfLifeLoadoutSlot7", GetUserCVar(pln, "samsara_cl_freeman_slot7")); }

                    if (GetCVar("samsara_freeman_unique1") > 0) { SetInventory("SamsaraHalfLifeLoadoutUnique1", GetCVar("samsara_freeman_unique1") - 1); }
                    else { SetInventory("SamsaraHalfLifeLoadoutUnique1", GetUserCVar(pln, "samsara_cl_freeman_unique1")); }

                    if (GetCVar("samsara_freeman_unique2") > 0) { SetInventory("SamsaraHalfLifeLoadoutUnique2", GetCVar("samsara_freeman_unique2") - 1); }
                    else { SetInventory("SamsaraHalfLifeLoadoutUnique2", GetUserCVar(pln, "samsara_cl_freeman_unique2")); }

                    if (GetCVar("samsara_freeman_unique3") > 0) { SetInventory("SamsaraHalfLifeLoadoutUnique3", GetCVar("samsara_freeman_unique3") - 1); }
                    else { SetInventory("SamsaraHalfLifeLoadoutUnique3", GetUserCVar(pln, "samsara_cl_freeman_unique3")); }
                }

                if (CheckInventory("HLOPHasBarnacleLongJump") && CheckInventory("SamsaraHalfLifeLoadoutUnique3") && !GetCVar("samsara_banjetpack")) { GiveInventory("HLOPBarnacle", 1); }
                else
                {
                    TakeInventory("freeman_unique3selected", 1);
                    TakeInventory("HLOPBarnacleReleaseTether", 1);
                    TakeInventory("HLOPBarnacleLatchedTether", 1);
                    TakeInventory("HLOPBarnacleTetherActive", 1);
                    TakeInventory("HLOPBarnacle", 1);
                }

                if (loadoutPrevValue[pln][SLOT_FIST] != CheckInventory("SamsaraHalfLifeLoadoutFallbackMelee"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_FIST, CheckInventory("SamsaraHalfLifeLoadoutFallbackMelee"), pln);
                    loadoutPrevValue[pln][SLOT_FIST] = CheckInventory("SamsaraHalfLifeLoadoutFallbackMelee");
                }

                if (loadoutPrevValue[pln][SLOT_CHAINSAW] != CheckInventory("SamsaraHalfLifeLoadoutSlot1"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_CHAINSAW, CheckInventory("SamsaraHalfLifeLoadoutSlot1"), pln);
                    loadoutPrevValue[pln][SLOT_CHAINSAW] = CheckInventory("SamsaraHalfLifeLoadoutSlot1");
                }

                if (loadoutPrevValue[pln][SLOT_SUPERSHOTGUN] != CheckInventory("SamsaraHalfLifeLoadoutSlot3"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_SUPERSHOTGUN, CheckInventory("SamsaraHalfLifeLoadoutSlot3"), pln);
                    loadoutPrevValue[pln][SLOT_SUPERSHOTGUN] = CheckInventory("SamsaraHalfLifeLoadoutSlot3");
                }

                if (loadoutPrevValue[pln][SLOT_ROCKETLAUNCHER] != CheckInventory("SamsaraHalfLifeLoadoutSlot5"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_ROCKETLAUNCHER, CheckInventory("SamsaraHalfLifeLoadoutSlot5"), pln);
                    loadoutPrevValue[pln][SLOT_ROCKETLAUNCHER] = CheckInventory("SamsaraHalfLifeLoadoutSlot5");
                }

                if (loadoutPrevValue[pln][SLOT_GRENADELAUNCHER] != CheckInventory("SamsaraHalfLifeLoadoutSlot5")) // netplay hack
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_GRENADELAUNCHER, CheckInventory("SamsaraHalfLifeLoadoutSlot5"), pln);
                    loadoutPrevValue[pln][SLOT_GRENADELAUNCHER] = CheckInventory("SamsaraHalfLifeLoadoutSlot5");
                }

                if (loadoutPrevValue[pln][SLOT_PLASMARIFLE] != CheckInventory("SamsaraHalfLifeLoadoutSlot6"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_PLASMARIFLE, CheckInventory("SamsaraHalfLifeLoadoutSlot6"), pln);
                    loadoutPrevValue[pln][SLOT_PLASMARIFLE] = CheckInventory("SamsaraHalfLifeLoadoutSlot6");
                }

                if (loadoutPrevValue[pln][SLOT_RAILGUN] != CheckInventory("SamsaraHalfLifeLoadoutSlot6")) // netplay hack
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_RAILGUN, CheckInventory("SamsaraHalfLifeLoadoutSlot6"), pln);
                    loadoutPrevValue[pln][SLOT_RAILGUN] = CheckInventory("SamsaraHalfLifeLoadoutSlot6");
                }

                if (loadoutPrevValue[pln][SLOT_BFG9000] != CheckInventory("SamsaraHalfLifeLoadoutSlot7"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_BFG9000, CheckInventory("SamsaraHalfLifeLoadoutSlot7"), pln);
                    loadoutPrevValue[pln][SLOT_BFG9000] = CheckInventory("SamsaraHalfLifeLoadoutSlot7");
                }

                if (loadoutPrevValue[pln][SLOT_BFG10K] != CheckInventory("SamsaraHalfLifeLoadoutSlot7")) // netplay hack
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOT_BFG10K, CheckInventory("SamsaraHalfLifeLoadoutSlot7"), pln);
                    loadoutPrevValue[pln][SLOT_BFG10K] = CheckInventory("SamsaraHalfLifeLoadoutSlot7");
                }

                if (loadoutPrevValue[pln][SLOTCOUNT - 1 - SLOT_UNIQUE1] != CheckInventory("SamsaraHalfLifeLoadoutUnique1"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOTCOUNT - 1 - SLOT_UNIQUE1, CheckInventory("SamsaraHalfLifeLoadoutUnique1"), pln);
                    loadoutPrevValue[pln][SLOTCOUNT - 1 - SLOT_UNIQUE1] = CheckInventory("SamsaraHalfLifeLoadoutUnique1");
                }

                if (loadoutPrevValue[pln][SLOTCOUNT - 1 - SLOT_UNIQUE2] != CheckInventory("SamsaraHalfLifeLoadoutUnique2"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOTCOUNT - 1 - SLOT_UNIQUE2, CheckInventory("SamsaraHalfLifeLoadoutUnique2"), pln);
                    loadoutPrevValue[pln][SLOTCOUNT - 1 - SLOT_UNIQUE2] = CheckInventory("SamsaraHalfLifeLoadoutUnique2");
                }

                if (loadoutPrevValue[pln][SLOTCOUNT - 1 - SLOT_UNIQUE3] != CheckInventory("SamsaraHalfLifeLoadoutUnique3"))
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, SLOTCOUNT - 1 - SLOT_UNIQUE3, CheckInventory("SamsaraHalfLifeLoadoutUnique3"), pln);
                    loadoutPrevValue[pln][SLOTCOUNT - 1 - SLOT_UNIQUE3] = CheckInventory("SamsaraHalfLifeLoadoutUnique3");
                }
				break;

			case CLASS_SW:
				if (CheckInventory("SWZoomed") && !CheckWeapon(" SWRailgun ")) { SetInventory("SWZoomed", 0); }
				break;

			case CLASS_RR:
				if (CheckInventory("RZoomed") && !CheckWeapon(" Hunting Rifle With Scope ")) { SetInventory("RZoomed", 0); }

				if (CheckInventory(" RR Hunting Crossbow "))
				{
					if (CheckInventory(" Dyn 'O' Mites "))
					{
						if (CheckInventory("RocketAmmo") || CheckInventory("SamsaraHasInfiniteAmmo"))
						{
							if (!CheckInventory(" RR Dynomite Crossbow ")) { GiveInventory(" RR Dynomite Crossbow ", 1); }
						} else {
							if (CheckInventory(" RR Dynomite Crossbow ") && !CheckWeapon(" RR Dynomite Crossbow ")) { TakeInventory(" RR Dynomite Crossbow ", 1); }
						}
					} else {
						if (CheckInventory(" RR Dynomite Crossbow ")) { TakeInventory(" RR Dynomite Crossbow ", 1); }
					}

					if (CheckInventory("ChickenAmmo") || CheckInventory("SamsaraHasInfiniteAmmo"))
					{
						if (!CheckInventory(" Chicken Crossbow ")) { GiveInventory(" Chicken Crossbow ", 1); }
					} else {
						if (CheckInventory(" Chicken Crossbow ") && !CheckWeapon(" Chicken Crossbow ")) { TakeInventory(" Chicken Crossbow ", 1); }
					}
				} else {
					if (CheckInventory(" RR Dynomite Crossbow ")) { TakeInventory(" RR Dynomite Crossbow ", 1); }
					if (CheckInventory(" Chicken Crossbow ")) { TakeInventory(" Chicken Crossbow ", 1); }
				}
				break;

			case CLASS_BITTERMAN:
				if (CheckInventory("SamsaraQuake2ChainfistLoopSoundCheck") && !CheckWeapon("Q2Chainfist"))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraQuake2ChainfistLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake2ChaingunLoopSoundCheck") && !CheckWeapon("Q2Chaingun"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake2ChaingunLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake2PhalanxLoopSoundCheck") && !CheckWeapon("Q2Phalanx"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake2PhalanxLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake2HyperBlasterLoopSoundCheck") && !CheckWeapon("Q2HyperBlaster"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake2HyperBlasterLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake2PlasmaBeamLoopSoundCheck") && !CheckWeapon("Q2PlasmaBeam"))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraQuake2PlasmaBeamLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake2BFG10KLoopSoundCheck") && !CheckWeapon("Q2BFG10K"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake2BFG10KLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake2TrapLoopSoundCheck") && !CheckWeapon("Q2Trap"))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraQuake2TrapLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake2IonRipperLoopSoundCheck") && !CheckWeapon("Q2IonRipper"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake2IonRipperLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake2RailgunLoopSoundCheck") && !CheckWeapon("Q2Railgun"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake2RailgunLoopSoundCheck", 0);
				}
				break;

			case CLASS_BOND:
				if (CheckInventory("BondWatchDetonatorToken") && !CheckWeapon("Goldeneye_WatchDetonator")) { SetInventory("BondWatchDetonatorToken", 0); }

				if(CheckInventory("SamsaraExtraWeaponsAreEnabled") && CheckInventory("Goldeneye_Moonraker"))
				{
					GiveInventory("Goldeneye_GoldenGun", 1);
				}
				else
				{
					if(CheckWeapon("Goldeneye_GoldenGun"))
					{
						SetWeapon("Goldeneye_Moonraker");
					}
					TakeInventory("Goldeneye_GoldenGun", 1);
				}
				break;

			case CLASS_CATACOMB:
				SetInventory("Catacomb_WeaponMode", GetUserCVar(pln, "samsara_cl_pettonweapons"));

				if (CheckInventory("Catacomb_Waves"))
				{
					if (!CheckInventory("Catacomb_WavesQuickSpell")) { GiveInventory("Catacomb_WavesQuickSpell", 1); }
				} else {
					if (CheckInventory("Catacomb_WavesQuickSpell") && !CheckWeapon("Catacomb_WavesQuickSpell") && !CheckInventory("SamsaraHasInfiniteAmmo")) { TakeInventory("Catacomb_WavesQuickSpell", 1); }
				}

				if (CheckInventory("Catacomb_XTerminators"))
				{
					if (!CheckInventory("Catacomb_XTerminatorsQuickSpell")) { GiveInventory("Catacomb_XTerminatorsQuickSpell", 1); }
				} else {
					if (CheckInventory("Catacomb_XTerminatorsQuickSpell") && !CheckWeapon("Catacomb_XTerminatorsQuickSpell") && !CheckInventory("SamsaraHasInfiniteAmmo")) { TakeInventory("Catacomb_XTerminatorsQuickSpell", 1); }
				}

				if (CheckInventory("Catacomb_Bursts"))
				{
					if (!CheckInventory("Catacomb_BurstsQuickSpell")) { GiveInventory("Catacomb_BurstsQuickSpell", 1); }
				} else {
					if (CheckInventory("Catacomb_BurstsQuickSpell") && !CheckWeapon("Catacomb_BurstsQuickSpell") && !CheckInventory("SamsaraHasInfiniteAmmo")) { TakeInventory("Catacomb_BurstsQuickSpell", 1); }
				}

				if (CheckInventory("Catacomb_Zappers"))
				{
					if (!CheckInventory("Catacomb_ZappersQuickSpell")) { GiveInventory("Catacomb_ZappersQuickSpell", 1); }
				} else {
					if (CheckInventory("Catacomb_ZappersQuickSpell") && !CheckWeapon("Catacomb_ZappersQuickSpell") && !CheckInventory("SamsaraHasInfiniteAmmo")) { TakeInventory("Catacomb_ZappersQuickSpell", 1); }
				}

				if (CheckInventory("Catacomb_Nukes"))
				{
					if (!CheckInventory("Catacomb_NukesQuickSpell")) { GiveInventory("Catacomb_NukesQuickSpell", 1); }
				} else {
					if (CheckInventory("Catacomb_NukesQuickSpell") && !CheckWeapon("Catacomb_NukesQuickSpell") && !CheckInventory("SamsaraHasInfiniteAmmo")) { TakeInventory("Catacomb_NukesQuickSpell", 1); }
				}

				if (CheckInventory("Catacomb_Bolts"))
				{
					if (!CheckInventory("Catacomb_BoltsQuickSpell")) { GiveInventory("Catacomb_BoltsQuickSpell", 1); }
				} else {
					if (CheckInventory("Catacomb_BoltsQuickSpell") && !CheckWeapon("Catacomb_BoltsQuickSpell") && !CheckInventory("SamsaraHasInfiniteAmmo")) { TakeInventory("Catacomb_BoltsQuickSpell", 1); }
				}
				break;

			case CLASS_PAINKILLER:
				if (CheckInventory("Painkiller_Zoomed") && !CheckWeapon("Painkiller_Boltgun")) { SetInventory("Painkiller_Zoomed", 0); }

				if (CheckInventory("SamsaraPainkillerPainkillerPrimaryFiringSoundCheck") && !CheckWeapon("Painkiller_Painkiller"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraPainkillerPainkillerPrimaryFiringSoundCheck", 0);
				}

				if (CheckInventory("SamsaraPainkillerRifleSecondaryFiringSoundCheck") && !CheckWeapon("Painkiller_Rifle"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraPainkillerRifleSecondaryFiringSoundCheck", 0);
				}

				if (CheckInventory("SamsaraPainkillerRocketLauncherSecondaryFiringSoundCheck") && !CheckWeapon("Painkiller_RocketLauncher"))
				{
					StopSound(0, CHAN_5);
					StopSound(0, CHAN_6);

					SetInventory("SamsaraPainkillerRocketLauncherSecondaryFiringSoundCheck", 0);
				}

				if (CheckInventory("SamsaraPainkillerElectrodriverSecondaryFiringSoundCheck") && !CheckWeapon("Painkiller_Electrodriver"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraPainkillerElectrodriverSecondaryFiringSoundCheck", 0);
				}

				if (CheckInventory("SamsaraPainkillerDemonMorphLoopSoundCheck") && !CheckWeapon("Painkiller_DemonMorph"))
				{
					StopSound(0, CHAN_7);

					SetInventory("SamsaraPainkillerDemonMorphLoopSoundCheck", 0);
				}
				break;

			case CLASS_UNREAL:
				SetInventory("SamsaraAlternateSoundToken", GetUserCvar(pln,"samsara_cl_unrealsounds"));

				if (CheckInventory("Unreal_ZoomedIn") && !CheckWeapon("Unreal_Rifle")) { SetInventory("Unreal_ZoomedIn", 0); }

				if (CheckInventory("SamsaraUnrealStingerPrimaryFiringSoundCheck") && !CheckWeapon("Unreal_Stinger"))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraUnrealStingerPrimaryFiringSoundCheck", 0);
				}

				if (CheckInventory("SamsaraUnrealMinigunFiringSoundCheck") && !CheckWeapon("Unreal_Minigun"))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraUnrealMinigunFiringSoundCheck", 0);
				}

				if (CheckInventory("SamsaraUnrealGESBioRifleSecondaryChargingSoundCheck") && !CheckWeapon("Unreal_GESBioRifle"))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraUnrealGESBioRifleSecondaryChargingSoundCheck", 0);
				}

				if (CheckInventory("SamsaraUnrealCARiflePrimaryFiringSoundCheck") && !CheckWeapon("Unreal_Duster"))
				{
					StopSound(0, CHAN_WEAPON);

					SetInventory("SamsaraUnrealCARiflePrimaryFiringSoundCheck", 0);
				}

				TakeInventory("SamsaraUnrealCARifleSecondaryCooldown", 1 + CheckInventory("SamsaraHasDoubleFiringSpeed"));

				if (CheckWeapon("Unreal_Duster")) { GiveInventory("SamsaraUnrealCARifleAltFire", 1); }
				break;

			case CLASS_RTCW:
				SetInventory("SamsaraAlternateSoundToken", GetUserCvar(pln,"samsara_cl_rtcwsounds"));

				if (CheckInventory("RTCW_Scoped") && !CheckWeapon("RTCW_Mauser") && !CheckWeapon("RTCW_FG42") && !CheckWeapon("RTCW_Snooper")) { SetInventory("RTCW_Scoped", 0); }

				if (!CheckWeapon("RTCW_Flamethrower"))
				{
					if (CheckInventory("SamsaraRTCWFlamethrowerFiringSoundCheck"))
					{
						StopSound(0, CHAN_WEAPON);

						SetInventory("SamsaraRTCWFlamethrowerFiringSoundCheck", 0);
					}

					if (CheckInventory("SamsaraRTCWFlamethrowerNozzleIdleSoundCheck"))
					{
						StopSound(0, CHAN_6);

						SetInventory("SamsaraRTCWFlamethrowerNozzleIdleSoundCheck", 0);
					}
				}

				if (CheckInventory("RTCW_HasAlliedCrate") && CheckInventory("RTCW_StG44") && !CheckInventory("RTCW_BAR")) { GiveInventory("RTCW_BAR", 1); }
				if (CheckInventory("RTCW_HasAlliedCrate") && CheckInventory("RTCW_K43") && !CheckInventory("RTCW_M1Garand")) { GiveInventory("RTCW_M1Garand", 1); }
				if (CheckInventory("RTCW_HasAlliedCrate") && CheckInventory("RTCW_MG42") && !CheckInventory("RTCW_Browning")) { GiveInventory("RTCW_Browning", 1); }
				break;

			case CLASS_QUAKE3:
				SetInventory("SamsaraAlternateSoundToken", GetUserCvar(pln,"samsara_cl_quake3sounds"));

				if (CheckInventory("SamsaraQuake3GauntletFiringSoundCheck") && !CheckWeapon("Q3Gauntlet"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake3GauntletFiringSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake3LightningGunLoopSoundCheck") && !CheckWeapon("Q3LightningGun"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake3LightningGunLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake3BFG10KLoopSoundCheck") && !CheckWeapon("Q3BFG10K"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake3BFG10KLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake3ChaingunLoopSoundCheck") && !CheckWeapon("Q3Chaingun"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake3ChaingunLoopSoundCheck", 0);
				}

				if (CheckInventory("SamsaraQuake3RailgunLoopSoundCheck") && !CheckWeapon("Q3Railgun"))
				{
					StopSound(0, CHAN_6);

					SetInventory("SamsaraQuake3RailgunLoopSoundCheck", 0);
				}
				break;

			case CLASS_DEUSEX:
				if (CheckInventory("DeusEx_Zoomed") && !CheckWeapon("DeusEx_SniperRifle")) { SetInventory("DeusEx_Zoomed", 0); }

				if (!CheckInventory("SamsaraHasInfiniteAmmo"))
				{
					if (CheckInventory("DeusEx_LAW") && !CheckWeapon("DeusEx_LAW") && !CheckInventory("DeusEx_LAWAmmo")) { TakeInventory("DeusEx_LAW", 1); }
				}
				break;

			default:
                if (cvalue != 1)
                {
                    ACS_NamedExecuteAlways("SAMSARA_CLIENT_ALTERNATIVECLASS", 0, 0, pln);
                    for (i = 0; i < SLOTCOUNT + UNIQUECOUNT; i++) { ACS_NamedExecuteAlways("SAMSARA_CLIENT_CLASSLOADOUT", 0, i, 0, pln); }
                    cvalue = 1;
                }
				break;
		}

		if (GetCVar("samsara_runninginzdoom") == 1)
		{
			TakeInventory("SamsaraIsPlayingInZandronum", 1);

			if (GetCVar("sv_nobfgaim") == 1) { GiveInventory("DoomNoBFGAim", 1); }
			else { TakeInventory("DoomNoBFGAim",  0x7FFFFFFF); }
		}

		if (GetCVar("samsara_runninginzandro") == 1)
		{
			GiveInventory("SamsaraIsPlayingInZandronum", 1);

			if (GetCVar("sv_bfgfreeaim") == 0) { GiveInventory("DoomNoBFGAim", 1); }
			else { TakeInventory("DoomNoBFGAim",  0x7FFFFFFF); }
		}

		SetInventory("SamsaraImprovedDoomguyBalance", (GetCVar("samsara_doomguybalance") == 1 || (GetCVar("samsara_doomguybalance") >= 2 && GetCVar("samsara_mixerloaded"))) && (samsaraClassNum() == CLASS_DOOM || samsaraClassNum() == CLASS_CHEX));

		if (CheckSamsaraRecoilSettings(1)) { GiveInventory("SamsaraRecoilIsDisabled", 1); }
		else { TakeInventory("SamsaraRecoilIsDisabled", 0x7FFFFFFF); }

		SetInventory("PickupFlashesAreDisabled", GetUserCVar(pln, "samsara_cl_noflashes") == 1 || GetUserCVar(pln, "samsara_cl_noflashes") >= 3);
		SetInventory("WeaponFlashesAreDisabled", GetUserCVar(pln, "samsara_cl_noflashes") >= 2);

		if (GetCVar("samsara_classiclaz") == 1) { GiveInventory("ChexClassicLaz", 1); }
		else { TakeInventory("ChexClassicLaz", 0x7FFFFFFF); }

		/*if (GetCVar("samsara_allcanrj") == 1) { GiveInventory("RJingModeOn", 1); }
		else { TakeInventory("RJingModeOn", 0x7FFFFFFF); }*/	// Goodbye, rocket jumping mode!

		if (GetCVar("samsara_pistolammo") == 1) { GiveInventory("PistolModeOn", 1); }
		else { TakeInventory("PistolModeOn", 0x7FFFFFFF); }

		if (GetCVar("samsara_vanillaquake") == 1) { GiveInventory("QuakeModeOn", 1); }
		else { TakeInventory("QuakeModeOn", 0x7FFFFFFF); }

		if (GetCVar("samsara_nodemonmorph") == 1) { GiveInventory("Painkiller_NoDemonMorph", 1); }
		else { TakeInventory("Painkiller_NoDemonMorph", 0x7FFFFFFF); }

		if (GetCVar("samsara_notarotcardlimit") == 1) { GiveInventory("Painkiller_NoTarotCardLimit", 1); }
		else { TakeInventory("Painkiller_NoTarotCardLimit", 0x7FFFFFFF); }

		if (GetCVar("samsara_deusexmovementpenalty") == 1) { GiveInventory("DeusEx_MovementPenaltyEnabled", 1); }
		else { TakeInventory("DeusEx_MovementPenaltyEnabled", 0x7FFFFFFF); }

		if (GetCVar("samsara_deusexstartingskills") >= 1) { SetInventory("DeusEx_StartingSkills", GetCVar("samsara_deusexstartingskills")); }
		else { TakeInventory("DeusEx_StartingSkills", 0x7FFFFFFF); }

		if (GetCVar("samsara_banallies") == 1) { GiveInventory("SamsaraAlliesAreBanned", 1); }
		else { TakeInventory("SamsaraAlliesAreBanned", 0x7FFFFFFF); }

		if (GetCVar("samsara_dukesoundboard") == 1) { if (CheckInventory("DukeClass") == 1) {
		GiveInventory("Soundboard - Boss Kill",1);
		GiveInventory("Soundboard - Deathmatch Kill",1);
		GiveInventory("Soundboard - Dukematch Kill",1);
		GiveInventory("Soundboard - Boss Sight",1);
		GiveInventory("Soundboard - Enemy Kill",1);
		GiveInventory("Soundboard - Boot Kill",1);
		GiveInventory("Soundboard - Gib Kill",1);
		GiveInventory("Soundboard - Weapon Acquired",1);
		GiveInventory("Soundboard - Level Intro",1);
		GiveInventory("Soundboard - Idle Taunt",1);
		GiveInventory("Soundboard - Critical Heal",1);
		GiveInventory("Soundboard - Death Taunt",1);
		GiveInventory("Soundboard - Doug Huggem",1); }}
		else { TakeInventory("Soundboard - Boss Kill",1);
		TakeInventory("Soundboard - Deathmatch Kill",1);
		TakeInventory("Soundboard - Dukematch Kill",1);
		TakeInventory("Soundboard - Boss Sight",1);
		TakeInventory("Soundboard - Enemy Kill",1);
		TakeInventory("Soundboard - Boot Kill",1);
		TakeInventory("Soundboard - Gib Kill",1);
		TakeInventory("Soundboard - Weapon Acquired",1);
		TakeInventory("Soundboard - Level Intro",1);
		TakeInventory("Soundboard - Idle Taunt",1);
		TakeInventory("Soundboard - Critical Heal",1);
		TakeInventory("Soundboard - Death Taunt",1);
		TakeInventory("Soundboard - Doug Huggem",1); }

		if (GetCVar("samsara_cl_legacydukevoices") == 1) { GiveInventory("DukeLegacyVoices", 1); }
		else { TakeInventory("DukeLegacyVoices", 0x7FFFFFFF); }

		SetInventory("SamsaraHasPermaWeaponLevel2", GetCVar("samsara_permaweaponlevel2") &&
		                                            (samsaraClassNum() == CLASS_DOOM || samsaraClassNum() == CLASS_HERETIC || samsaraClassNum() == CLASS_ERAD ||
		                                             samsaraClassNum() == CLASS_KATARN || samsaraClassNum() == CLASS_DEMONESS || samsaraClassNum() == CLASS_PAINKILLER));

		HandleAmmoCapacities();
		HandleBans();
		HandleBuffCVars(respawning);

		TakeInventory("WeaponGetYaaaay",  1);
		TakeInventory("WeaponGetYaaaay2", 1);
		//if (GetCvar("samsara_lmsrules") == 0) { ConvertClassWeapons(-1); } seems pointless to have this, but will leave commented for now

		if (GetCVar("samsara_runninginzandro") && GetCVar("samsara_banmorphovum") && CheckInventory("SamsaraCorvusArtiEgg"))
		{
			for (i = 0; i < CheckInventory("SamsaraCorvusArtiEgg"); i++)
			{
				if (!CheckInventory("Grim Ballista") || (CheckInventory("Grim Ballista") && CheckInventory("Shell") < GetAmmoCapacity("Shell")))
				{
					Print(l:"CORVUSMORPHOVUMDISABLED2");
					GiveInventory("Grim Ballista", 1);
				}
				else { Print(l:"CORVUSMORPHOVUMDISABLED1"); }
			}

			SetInventory("SamsaraCorvusArtiEgg", 0);
		}

		if (GetCVar("samsara_banjetpack") && CheckInventory("DukePortJetpack"))
		{
			GiveInventory("DukeBootserk", 1);
			TakeInventory("DukePortJetpack", 0x7FFFFFFF);
			TakeInventory("DukeJetpackFuel", 0x7FFFFFFF);
			Print(s:"The jetpack is disabled. Received 8x boot damage instead.");
		}

		if (GetCVar("samsara_banjetpack") && CheckInventory("RMRJetPack"))
		{
			SetInventory("RMRJetPack", 0);
			Print(l:"RMRJETPACKDISABLED");
		}

		for (i = 0; i < ACCURACYCOUNT; i++)
		{
			if (CheckInventory("DoomZerkCounter") > i && !CheckInventory(DoomAccuracyZerks[i]))
			{
				GiveInventory(DoomAccuracyZerks[i], 1);
			}
		}

		sigilCounter = SamsaraGlobal[2]+SamsaraGlobal[3]+SamsaraGlobal[4]+SamsaraGlobal[5]+SamsaraGlobal[6];
		for (i = 0; i < SIGILCOUNT; i++)
		{
			if (SamsaraGlobal[GLOBAL_SIGILBASE+i+1])
			{
				if(CheckWeapon("Sigil"))
					SetWeapon(ClassWeapons[samsaraClassNum()][0][0]);

				if (!CheckInventory(SigilSplinters[i]))
				{
					GiveInventory(SigilSplinters[i], 1);
					if(samsaraClassNum() == CLASS_STRIFE && CheckInventory("StrifeSigilPiece") < sigilCounter)
					{
						TakeInventory("StrifeSigilPiece",5);
						GiveInventory("StrifeSigilPiece",sigilCounter);
						TakeInventory("StrifeSigilPiecePreferred",5);
						GiveInventory("StrifeSigilPiecePreferred",sigilCounter);
						GiveInventory(" Sigil ",1);
					}
					else
					{
						if(i > 0)
						{
							for(int a = 0; a < SIGILCOUNT; a++)
							{
								TakeInventory(SpectralTogglers[a], 0x7FFFFFFF);
							}
						}
						TakeInventory("StrifeSigilPiece",5);
						GiveInventory("StrifeSigilPiece",sigilCounter);
						GiveInventory(SpectralTogglers[sigilCounter-1], 1);
					}
				}
		   }
		}

		// triggers buddha mode when Original/Lost Missions Blazko has an extra life
		if (CheckInventory("WolfExtraLife") && !canbuddha) { SetPlayerProperty(0, 1, 16); }
		if (!CheckInventory("WolfExtraLife") && canbuddha) { SetPlayerProperty(0, 0, 16); }
		canbuddha = CheckInventory("WolfExtraLife");

		oarmor = armor;
		otype = type;
		armor = CheckInventory("BasicArmor");
		type = GetArmorInfo(0);

		if (oarmor > armor && StrRight(otype, 8) == "Marathon")
		{
			if (samsaraClassNum() == CLASS_MARATHON)
			{
				ActivatorSound("marathon/shieldhit", 127);
				FadeRange(255, 255, 255, 0.4, 0, 0, 0, 0.0, 8.0 / 35);
			}
			else
			{
				ActivatorSound("samsara/shieldhit", 127);
				FadeRange(255, 255, 0, min(0.5, (oarmor - armor) * 0.015), 0, 0, 0, 0.0, min(35.0, 1.5 * (oarmor - armor)) / 35);
			}
		}

        int okeys = CheckInventory("SamsaraKeysAcquired");

        SetInventory("SamsaraKeysAcquired", CheckInventory("BlueCard") + CheckInventory("YellowCard") + CheckInventory("RedCard") + // Doom
                                            CheckInventory("BlueSkull") + CheckInventory("YellowSkull") + CheckInventory("RedSkull") +
                                            CheckInventory("ChexBlueCard") + CheckInventory("ChexYellowCard") + CheckInventory("ChexRedCard") + // Chex Quest
                                            CheckInventory("BlueFlemKey") + CheckInventory("YellowFlemKey") + CheckInventory("RedFlemKey") + // Chex Quest 3
                                            CheckInventory("KeyGreen") + CheckInventory("KeyBlue") + CheckInventory("KeyYellow") + // Heretic
                                            CheckInventory("KeySteel") + CheckInventory("KeyCave") + CheckInventory("KeyAxe") + // Hexen
                                            CheckInventory("KeyFire") + CheckInventory("KeyEmerald") + CheckInventory("KeyDungeon") +
                                            CheckInventory("KeySilver") + CheckInventory("KeyRusted") + CheckInventory("KeyHorn") +
                                            CheckInventory("KeySwamp") + CheckInventory("KeyCastle") +
                                            CheckInventory("BaseKey") + CheckInventory("GovsKey") + CheckInventory("Passcard") + // Strife
                                            CheckInventory("IDBadge") + CheckInventory("PrisonKey") + CheckInventory("SeveredHand") +
                                            CheckInventory("Power1Key") + CheckInventory("Power2Key") + CheckInventory("Power3Key") +
                                            CheckInventory("GoldKey") + CheckInventory("IDCard") + CheckInventory("SilverKey") +
                                            CheckInventory("OracleKey") + CheckInventory("MilitaryID") + CheckInventory("OrderKey") +
                                            CheckInventory("WarehouseKey") + CheckInventory("BrassKey") + CheckInventory("RedCrystalKey") +
                                            CheckInventory("BlueCrystalKey") + CheckInventory("ChapelKey") + CheckInventory("CatacombKey") +
                                            CheckInventory("SecurityKey") + CheckInventory("CoreKey") + CheckInventory("MaulerKey") +
                                            CheckInventory("FactoryKey") + CheckInventory("MineKey") + CheckInventory("NewKey5") +
                                            CheckInventory("PrisonPass"));

        if (CheckInventory("SamsaraKeysAcquired") > okeys && (isSinglePlayer() || isCoop()))
        {
            if (CheckInventory("SamsaraHeroMusicHalfLifeActive") && !CheckInventory("HalfLifeMusicPlayingToken")) { GiveInventory("HLMusicKey", 1); }
        }

		/*
		 * Jumping and miscellaneous shit
		 */

		switch (samsaraClassNum())
		{
		case CLASS_HEXEN:
			int boosted, damagefactor, damagefactormod;
			if(CheckInventory("HexenClassMode")>0)
			{
				damagefactormod = 0.8;
				if(CheckInventory("HexenClassMode")==1)
				{
					boosted = false;
					damagefactor = GetActorProperty(0,APROP_DamageFactor);
					SetActorProperty(0,APROP_DamageFactor,1.0);
				}
				else if(CheckInventory("HexenClassMode")==2)
				{
					if(!isCoop() && !isSinglePlayer())
						GiveInventory("DaedalonInRangeBroadcastDM",1);
					else
						GiveInventory("DaedalonInRangeBroadcast",1);
					if(!CheckInventory("DaedalonInRange"))
					{
						if(!boosted) { damagefactor = GetActorProperty(0,APROP_DamageFactor); boosted = true; SetActorProperty(0,APROP_DamageFactor,FixedMul(damagefactor,damagefactormod)); }
					}
					else
					{
						ACS_NamedExecuteWithResult("SamsaraDecorate",40);
						boosted = false;
						SetActorProperty(0,APROP_DamageFactor,1.0);
					}
				}
				else if(CheckInventory("HexenClassMode")==3)
				{
					if(ACS_NamedExecuteWithResult("SAMSARA_BARATUSRANGECHECK")==1)
					{
						if(!boosted) { damagefactor = GetActorProperty(0,APROP_DamageFactor); boosted = true; SetActorProperty(0,APROP_DamageFactor,FixedMul(damagefactor,damagefactormod)); }
					}
					else
					{
						boosted = false;
						SetActorProperty(0,APROP_DamageFactor,1.0);
					}
				}
			}
			else
			{
				if(IsSinglePlayer() || IsCoop())
				{
					if(timer() > pariasLastRepairTimer + 35)
					{
						pariasLastRepairTimer = timer();
						GiveInventory("PariasArmorRepair",1);
					}
				}
				boosted = false;
				damagefactor = GetActorProperty(0,APROP_DamageFactor);
				SetActorProperty(0,APROP_DamageFactor,1.0);
			}
			break;

		case CLASS_MARATHON:
			if (GetCVar("samsara_nocustomgravity"))
			{
				SetActorProperty(0, APROP_Gravity, 1.0);
				SetActorProperty(0, APROP_Mass, 100);
				SetInventory("SamsaraIncreasedFallingDamageMode", 0);
			} else {
				SetActorProperty(0, APROP_Gravity, 0.15);
				SetActorProperty(0, APROP_Mass, 220);
				SetInventory("SamsaraIncreasedFallingDamageMode", 1);
			}
			break;

		case CLASS_QUAKE:
			if (GetCVar("samsara_nocustomgravity"))
			{
				SetActorProperty(0, APROP_Gravity, 1.0);
				SetActorProperty(0, APROP_Mass, 100);
				SetInventory("SamsaraIncreasedFallingDamageMode", 0);
			} else {
				SetActorProperty(0, APROP_Gravity, 0.75);
				SetActorProperty(0, APROP_Mass, 100);
				SetInventory("SamsaraIncreasedFallingDamageMode", 2);
			}
			break;

		case CLASS_ERAD:
			if (GetCVar("samsara_nocustomgravity"))
			{
				SetActorProperty(0, APROP_Gravity, 1.0);
				SetActorProperty(0, APROP_Mass, 100);
				SetInventory("SamsaraIncreasedFallingDamageMode", 0);
			} else {
				SetActorProperty(0, APROP_Gravity, 0.68);
				SetActorProperty(0, APROP_Mass, 100);
				SetInventory("SamsaraIncreasedFallingDamageMode", 3);
			}
			break;

		case CLASS_DEMONESS:
			if (GetCVar("samsara_nocustomgravity")) { SetActorProperty(0, APROP_Gravity, 1.0); }
			SetActorProperty(0, APROP_Mass, 100);
			SetInventory("SamsaraIncreasedFallingDamageMode", 0);
			break;

		default:
			SetActorProperty(0, APROP_Gravity, 1.0);
			SetActorProperty(0, APROP_Mass, 100);
			SetInventory("SamsaraIncreasedFallingDamageMode", 0);
			break;
		}

        if (CheckInventory("ForceNormalGravity"))
        {
            SetActorProperty(0, APROP_Gravity, 1.0);
            SetActorProperty(0, APROP_Mass, 100);
            SetInventory("SamsaraIncreasedFallingDamageMode", 0);
        } else if (CheckInventory("ForceSOGravity")) {
            SetActorProperty(0, APROP_Gravity, 0.15);
            SetActorProperty(0, APROP_Mass, 220);
            SetInventory("SamsaraIncreasedFallingDamageMode", 1);
        } else if (CheckInventory("ForceRangerGravity")) {
            SetActorProperty(0, APROP_Gravity, 0.75);
            SetActorProperty(0, APROP_Mass, 100);
            SetInventory("SamsaraIncreasedFallingDamageMode", 2);
        } else if (CheckInventory("ForceEleenaGravity")) {
            SetActorProperty(0, APROP_Gravity, 0.68);
            SetActorProperty(0, APROP_Mass, 100);
            SetInventory("SamsaraIncreasedFallingDamageMode", 3);
        } else if (CheckInventory("ForceDemonessGravity")) {
            SetActorProperty(0, APROP_Gravity, 0.8125);
            SetActorProperty(0, APROP_Mass, 100);
            SetInventory("SamsaraIncreasedFallingDamageMode", 0);
        }

        SetInventory("SamsaraIncreasedFallingDamage", CheckInventory("SamsaraIncreasedFallingDamageMode") == 1);
        SetInventory("SamsaraIncreasedFallingDamage2", CheckInventory("SamsaraIncreasedFallingDamageMode") == 2);
        SetInventory("SamsaraIncreasedFallingDamage3", CheckInventory("SamsaraIncreasedFallingDamageMode") >= 3);

        if (CheckWeapon("RedneckMotorcycle") || CheckInventory("ShrunkPlayer") || CheckInventory("IsMorphed")) { i = 0; }
        else if (samsaraClassNum() == CLASS_HEXEN) { i = JumpZFromHeight(41 + GetCVar("samsara_jumpmod"), GetActorProperty(0, APROP_Gravity)); }
        else if (samsaraClassNum() == CLASS_MARATHON && !GetCVar("samsara_nocustomgravity")) { i = JumpZFromHeight(38 + GetCVar("samsara_jumpmod"), GetActorProperty(0, APROP_Gravity)); }
        else if (samsaraClassNum() == CLASS_QUAKE && !GetCVar("samsara_nocustomgravity")) { i = JumpZFromHeight(36 + GetCVar("samsara_jumpmod"), GetActorProperty(0, APROP_Gravity)); }
        else if (samsaraClassNum() == CLASS_ERAD && !GetCVar("samsara_nocustomgravity")) { i = JumpZFromHeight(36 + GetCVar("samsara_jumpmod"), GetActorProperty(0, APROP_Gravity)); }
        else if (samsaraClassNum() == CLASS_DEUSEX && !GetCVar("samsara_nocustomgravity")) { i = JumpZFromHeight(FixedMul(36 + GetCVar("samsara_jumpmod"), 1.0 + (CheckInventory("DeusEx_Augmentation_SpeedEnhancement") * CheckInventory("DeusEx_Augmentation_SpeedEnhancementToken") * 0.2)), GetActorProperty(0, APROP_Gravity)); }
        else { i = JumpZFromHeight(32 + GetCVar("samsara_jumpmod"), GetActorProperty(0, APROP_Gravity)); }

		// Hexen requires an increased jumping height
		if (isZDoom() && GetCvar("samsara_currentgame") == 8 && samsaraClassNum() != CLASS_HEXEN) { GiveInventory("SamsaraIncreasedJumpHeightForHexen", 1); }
		else { TakeInventory("SamsaraIncreasedJumpHeightForHexen", 0x7FFFFFFF); }

		// Strife requires a decreased step height
		if (GetCvar("samsara_currentgame") == 16) { SetActorProperty(0, APROP_MaxStepHeight, 16.0); }

        if (CheckInventory("PowerHighJump1")) { SetActorProperty(0, APROP_JumpZ, max(FixedMul(i, FixedDiv(GetUserCVar(pln, "HighJumpRuneHeight"), 8.0)), 0)); } // multi runes compatibility (doesn't work in netplay, sadly)
        else { SetActorProperty(0, APROP_JumpZ, max(i, 0)); }

		//This is ACS, so we can get away with this

		if((timer() % 15) == 0) XMASActive = ACS_NamedExecuteWithResult("Samsara_XMAS_XmasTextures",XMASActive);

		//if (isDead(0)) { endloop = 1; }
		
        if (!GetCVar("sv_disableautohealth") && !isDead(0) &&
            GetActorProperty(0, APROP_Health) <= (GetUserCVar(pln, "samsara_cl_autoinventoryhealth") > 100 ? getMaxHealth(0) : GetUserCVar(pln, "samsara_cl_autoinventoryhealth")))
        { AutoUseHealth(PlayerClass(pln), GetUserCVar(pln, "samsara_cl_autoinventoryhealth") > 100 ? getMaxHealth(0) : GetUserCVar(pln, "samsara_cl_autoinventoryhealth")); }

        if (!isDead(0) && !CheckInventory("BasicArmor") && GetUserCVar(pln, "samsara_cl_autoinventoryarmor"))
        {
            // these are ordered by SavePercent. however, if a player has different armors of the same SavePercent, but with different SaveAmount values,
            // the armor with the higher SaveAmount will take priority, not the latest armor you stored. pretty much no easy way to recreate exact behavior.

            if (CheckInventory("StrifeArmorPack3ArmorMarathonInventory")) { UseInventory("StrifeArmorPack3ArmorMarathonInventory"); } // 100, 200
            else if (CheckInventory("StrifeArmorPack1ArmorMarathonInventory")) { UseInventory("StrifeArmorPack1ArmorMarathonInventory"); } // 100, 100
            else if (CheckInventory("StrifeArmorPack3ArmorQuakePlusTier2ActiveInventory")) { UseInventory("StrifeArmorPack3ArmorQuakePlusTier2ActiveInventory"); } // 90, 250
            else if (CheckInventory("StrifeArmorPack3ArmorQuakeTier2ActiveInventory")) { UseInventory("StrifeArmorPack3ArmorQuakeTier2ActiveInventory"); } // 80, 200
            else if (CheckInventory("StrifeArmorPack3ArmorQuakePlusTier2InactiveInventory")) { UseInventory("StrifeArmorPack3ArmorQuakePlusTier2InactiveInventory"); } // 80, 200
            else if (CheckInventory("StrifeArmorPack3ArmorHereticInventory")) { UseInventory("StrifeArmorPack3ArmorHereticInventory"); } // 75, 200
            else if (CheckInventory("StrifeArmorPack3ArmorQuakeTier2InactiveInventory")) { UseInventory("StrifeArmorPack3ArmorQuakeTier2InactiveInventory"); } // 60, 150
            else if (CheckInventory("StrifeArmorPack1ArmorQuakePlusInventory")) { UseInventory("StrifeArmorPack1ArmorQuakePlusInventory"); } // 60, 150
            else if (CheckInventory("StrifeArmorPack3ArmorNormalInventory")) { UseInventory("StrifeArmorPack3ArmorNormalInventory"); } // 50, 200
            else if (CheckInventory("StrifeArmorPack1ArmorHereticInventory")) { UseInventory("StrifeArmorPack1ArmorHereticInventory"); } // 50, 100
            else if (CheckInventory("StrifeArmorPack1ArmorNormalInventory")) { UseInventory("StrifeArmorPack1ArmorNormalInventory"); } // 33, 100
            else if (CheckInventory("StrifeArmorPack1ArmorQuakeInventory")) { UseInventory("StrifeArmorPack1ArmorQuakeInventory"); } // 30, 100
        }

		Delay(1);

		opcount = pcount;
		pcount  = PlayerCount();
	}
}

script "SamsaraTurkeyPuncher" ENTER //677
{
	delay(GetCvar("samsara_superturboturkeyfrequency"));

	if (GetCvar("samsara_superturboturkeypuncher3000") > 0)
	{
		GiveInventory("ChickenModeOn",1);
		
		switch (GetCvar("samsara_superturboturkeypuncher3000"))
		{
			case 3:
				str ChickenClass = "SuperFriendlyChicken";

				if (!random(0, 15))
				{
					ChickenClass = "AssaultFriendlyChicken";

					if (!random(0, 2)) { ChickenClass = "ExplosiveFriendlyChicken"; }
				}
				break;

			case 2:
				ChickenClass = "SuperDMChicken";

				if (!random(0, 15))
				{
					ChickenClass = "AssaultChicken";

					if (!random(0, 2)) { ChickenClass = "ExplosiveChicken"; }
				}
				break;
			
			case 1:
				ChickenClass = "SuperCoopChicken";

				if (!random(0, 15))
				{
					ChickenClass = "AssaultChicken";

					if (!random(0, 2)) { ChickenClass = "ExplosiveChicken"; }
				}
				break;
		}

		do
		{
		   delay(1);
		   int x = GetActorX(0) + random(-128.0, 128.0);
		   int y = GetActorY(0) + random(-128.0, 128.0);
		   int z = GetActorCeilingZ(0) - 38.0;
		   int angle = GetActorAngle(0) >> 8;
		}
		until (Spawn(ChickenClass, x, y, z, 0, angle));


		if (GetCvar("samsara_superturboturkeylimit") > 0)
		{
			if(CheckInventory("ChickenKillCount") >= (GetCvar("samsara_superturboturkeylimit")))
			{
				SetFont("BIGFONT");
				HudMessageBold(n:0,s:" \cjhit the kill limit!";
				HUDMSG_PLAIN, 0, CR_WHITE, 0.5, 0.2, 5.0);
				if(CheckInventory("ChickenKillCount") < (GetCvar("samsara_superturboturkeylimit")))
				{
					TakeInventory("ChickenKillCount",999); }
					Delay(35*5);
					Exit_Normal(0);
				}
		}

	}
	else { TakeInventory("ChickenModeOn",999); }
	restart;
}

/*script 678 (int respawning)
{
	int punchdrunkloop;
	//punchdrunkloop = 0;

	print(s:"678 is being called");
	if (!respawning)
	{
		if (!punchdrunkloop)
		{ delay(15);
		  print(s:"punchdrunkloop 0 is being called");
		  punchdrunkloop = 1; }
		else
		{ HandlePunchdrunk(respawning);
		print(s:"handlepunchdrunk is being called");
		HandleInstagib(respawning); }
	}
	delay(1);
	restart;
}*/

script "SamsaraSynthFire" (int startTime) //607 -- SAMSARA_SYNTHFIRE
{
    int pln = PlayerNumber();

    while (ServerEnterTimes[pln] == startTime)
    {
        SetInventory("SamsaraSynthFireReload", !isDead(0) && !CheckInventory("CompendiumOpened") && keyDown(BT_RELOAD));
        SetInventory("SamsaraSynthFireZoom", !isDead(0) && !CheckInventory("CompendiumOpened") && keyDown(BT_ZOOM));
        SetInventory("SamsaraSynthFireLeft", !isDead(0) && !CheckInventory("CompendiumOpened") && keyDown(BT_ATTACK));
        SetInventory("SamsaraSynthFireRight", !isDead(0) && !CheckInventory("CompendiumOpened") && keyDown(BT_ALTATTACK));

        if (isDead(0))
        {
            SetInventory("SamsaraSynthFireLeftPress", 0);
            SetInventory("SamsaraSynthFireRightPress", 0);
        } else {
            if (!CheckInventory("CompendiumOpened"))
            {
                if (keyPressed(BT_ATTACK)) { SetInventory("SamsaraSynthFireLeftPress", 1); }
                if (keyPressed(BT_ALTATTACK)) { SetInventory("SamsaraSynthFireRightPress", 1); }
            }
        }

        Delay(1);
    }

    SetInventory("SamsaraSynthFireReload", 0);
    SetInventory("SamsaraSynthFireZoom", 0);
    SetInventory("SamsaraSynthFireLeft", 0);
    SetInventory("SamsaraSynthFireRight", 0);
    SetInventory("SamsaraSynthFireLeftPress", 0);
    SetInventory("SamsaraSynthFireRightPress", 0);
}

script "SamsaraConfirmClass" (int which) { SetResultValue(SamsaraWepType == which); } //206 -- SAMSARA_CONFIRMCLASS

script "SamsaraWolfMove" (void) //673 -- SAMSARA_WOLFMOVE
{
	int pln = PlayerNumber();
	int realspeed = GetActorProperty(0, APROP_Speed);
	int forward, side, angle;
	int forwardx, forwardy, sidex, sidey;
	int velx, vely, velz;
	int startTime = Timer();
	int isFlying = CheckInventory("PowerFlight") || CheckInventory("SamsaraPowerFly") || CheckInventory("SamsaraPowerFlyForHexen") || (GetActorProperty(0, APROP_Gravity) == 0);

	WolfenEnterTimes[pln] = startTime;

	while (WolfenEnterTimes[pln] == startTime)
	{
		if (UnloadingNow)
		{
			if (GetActorProperty(0, APROP_Speed) == 0)
			{
				SetActorProperty(0, APROP_Speed, realspeed);
			}
			break;
		}

		if (!CheckInventory("CanWolfMovement")) { break; }

		if(CheckInventory("ShrunkPlayer"))
		{
			Delay(1);
			continue;
		}

		if (!CheckInventory("WolfenMovement"))
		{
			if (GetActorProperty(0, APROP_Speed) == 0) { SetActorProperty(0, APROP_Speed, realspeed); }

            SetInventory("WolfMoving", 0);

			Delay(1);
			continue;
		}

		if (isDead(0))
		{
			SetActorProperty(0, APROP_Speed, realspeed);
			velx = 0;
			vely = 0;
			velz = 0;
		}
		else
		{
			if (WolfenEnterTimes[pln] != startTime) { break; }
			SetActorProperty(0, APROP_Speed, 0);

			if(GetPlayerInput(-1,INPUT_FORWARDMOVE) != 0)
				forward = sign(GetPlayerInput(-1,INPUT_FORWARDMOVE));

			forward *= SPEED_FORWARD;

			if(GetPlayerInput(-1,INPUT_SIDEMOVE) != 0)
				side	= sign(GetPlayerInput(-1,INPUT_SIDEMOVE));

			if(KeyDown_Any(BT_STRAFE))
			{
				if(GetPlayerInput(-1,INPUT_YAW) != 0)
					side	= -sign(GetPlayerInput(-1,INPUT_YAW));
				}

			side	*= SPEED_SIDE;

			angle   = GetActorAngle(0);

			forwardx = cos(angle) * (forward / ((CheckInventory("IsMorphed") * 2) + 1));
			forwardy = sin(angle) * (forward / ((CheckInventory("IsMorphed") * 2) + 1));

			sidex = cos(angle-0.25) * (side / ((CheckInventory("IsMorphed") * 2) + 1));
			sidey = sin(angle-0.25) * (side / ((CheckInventory("IsMorphed") * 2) + 1));

			velx = forwardx + sidex;
			vely = forwardy + sidey;
			velz = sin(-GetActorPitch(0)) * (forward / ((CheckInventory("IsMorphed") * 2) + 1));

			forward = 0;
			side = 0;
		}

		if (keyDown(BT_CROUCH)) { velx /= 2; vely /= 2; velz /= 2; }

        SetInventory("WolfMoving", velx != 0 || vely != 0 || velz != 0);

		if ((GetActorProperty(0, APROP_WaterLevel) >= 1) || isFlying)
		{
			SetActorVelocity(0, velx, vely, velz, 0, 0);
		}
		else
		{
			if (GetCVar("samsara_cl_wolfmovebob"))
			{
				SetActorVelocity(0, velx, vely, GetActorVelZ(0), 0, 1);
			}
			else
			{
				SetActorVelocity(0, velx, vely, GetActorVelZ(0), 0, 0);
			}
		}

		Delay(1);
	}

	if (GetActorProperty(0, APROP_Speed) == 0)
	{
		SetActorProperty(0, APROP_Speed, realspeed);
	}
}

script "SamsaraEnterClient" (void) clientside //521 -- SAMSARA_ENTER_CLIENT
{
	int execInt, oExecInt, execStr;
	int class, oClass;
	int pln = PlayerNumber();
	int i, j;
	int startTime = Timer();

	// Comment out this line for zdoom
	int cpln = ConsolePlayerNumber();

	ClientEnterTimes[pln] = startTime;
	ClientTipboxes[pln] = 0;

	execInt = 0; oExecInt = 0;

	if (GetCVar("samsara_cl_exists") != samsara_cl_VERSION)
	{

		// More setting default stuff, which is what CVARINFO does.

		/*
		//ConsoleCommand(StrParam(s:"set samsara_cl_exists ", d:samsara_cl_VERSION));
		SetCVar ("samsara_cl_exists", samsara_cl_VERSION);
		//ConsoleCommand("archivecvar samsara_cl_exists");

		if (!GetCVar("samsara_cl_wolfmove"))
		{   SetCVar ("samsara_cl_wolfmove", 0);
		//ConsoleCommand("archivecvar samsara_cl_wolfmove");
		}

		if (!GetCVar("samsara_cl_smoothanims"))
		{   SetCVar ("samsara_cl_smoothanims", 1);
		//ConsoleCommand("archivecvar samsara_cl_smoothanims");
		}

		if (!GetCVar("samsara_cl_weaponhud"))
		{   SetCVar ("samsara_cl_weaponhud", 1);
		//ConsoleCommand("archivecvar samsara_cl_weaponhud");
		}

		if (!GetCVar("samsara_cl_ballgag"))
		{   SetCVar ("samsara_cl_ballgag", 0);
		//ConsoleCommand("archivecvar samsara_cl_ballgag");
		}

		if (!GetCVar("samsara_cl_moremessages"))
		{   SetCVar ("samsara_cl_moremessages", 0);
		//ConsoleCommand("archivecvar samsara_cl_moremessages");
		}

		if (!GetCVar("samsara_cl_pickupmode"))
		{   SetCVar ("samsara_cl_pickupmode", 1);
		//ConsoleCommand("archivecvar samsara_cl_pickupmode");
		}

		if (!GetCVar("samsara_cl_printpickup"))
		{   SetCVar ("samsara_cl_printpickup", 0);
		//ConsoleCommand("archivecvar samsara_cl_printpickup");
		}
		*/
	}
		/*
		if (!GetCVar("samsara_cl_bloodyhell"))
		{   SetCVar ("samsara_cl_bloodyhell", 0);
		//ConsoleCommand("archivecvar samsara_cl_bloodyhell");
		}

		if (!GetCVar("samsara_cl_bloodypersistent"))
		{   SetCVar ("samsara_cl_bloodypersistent", 0);
		//ConsoleCommand("archivecvar samsara_cl_bloodypersistent");
		}
		*/



	for (i = 0; i < RESCOUNT; i++)
	{
		ACS_NamedExecuteAlways("SamsaraResonate", 0, i, 16, 0);
	}

	DukeQuoteCooldown[pln] = 0;

	//Log(s:"Client ", n:pln+1, s:"\c- (", d:pln, s:") has spawned (startTime is ", d:startTime, s:")");

	while (ClientEnterTimes[pln] == startTime)
	{
		oClass = class;
		class  = samsaraClassNum();
		DukeQuoteCooldown[pln] = max(0, DukeQuoteCooldown[pln]-1);

		// Also this line
		if (cpln != pln) { Delay(1); continue; }

		SamsaraClientClass = class+1;

		if (oClass != class) { SamsaraItemFlash = Timer(); }

		//seems unnecessary
		for (i = 0; i < SLOTCOUNT; i++)
		{
			j = SamsaraClientWeps[i];
			SamsaraClientWeps[i] = HasClassWeapon(class, i);

			if (j != SamsaraClientWeps[i]) { SamsaraClientWepFlashes[i] = Timer(); }
		}

		if (IsServer)
		{
			array_wolfmove[pln]	 = !!GetCVar("samsara_cl_wolfmove");
			array_smoothAnim[pln]   = !!GetCVar("samsara_cl_smoothanims");
			array_ballgag[pln]	  = !!GetCVar("samsara_cl_ballgag");
			array_weaponBar[pln]	= !!GetCVar("samsara_cl_weaponhud");
			array_pickupswitch[pln] = !!GetCVar("switchonpickup");
		}
		else
		{
			oExecInt = execInt;
			execInt = SamsaraClientVars();

			/*if (execInt != oExecInt)
			{
				execStr = StrParam(s:"pukename -", s:"SamsaraPuke", s:" ", d:execInt, s:" ", d:pln);
				//ConsoleCommand(execStr);
			}*/
		}

		If(GetUserCvar(ConsolePlayerNumber(),"samsara_cl_MerryChristmasSnow") && GetCvar("samsara_MerryChristmas") && (timer() % 15) == 0)
			ACS_NamedExecuteWithResult("Samsara_XMAS_SnowCreator");

		Delay(1);
	}
	//Log(s:"Client ", n:pln+1, s:"\c- (", d:pln, s:") has left spawn (", d:startTime, s:" vs. ", d:ClientEnterTimes[pln], s:")");
}

script "SAMSARA_CLIENT_ALTERNATIVECLASS" (int set, int pln) CLIENTSIDE
{
	int cpln = ConsolePlayerNumber();
	if (cpln != pln) { terminate; }

	SamsaraAlternativeClass = set;
}

script "SAMSARA_CLIENT_CLASSLOADOUT" (int slot, int set, int pln) CLIENTSIDE
{
	int cpln = ConsolePlayerNumber();
	if (cpln != pln) { terminate; }

	SamsaraEquipmentLoadout[slot] = set;
}

script "SAMSARA_BARATUSRANGECHECK" (void)
{
	int x = GetActorX(0);	int y = GetActorY(0);	int z = GetActorZ(0);
	if(CheckInventory("HexenClassMode")==3)
	{
		if(SetActivator(0,AAPTR_PLAYER_GETTARGET))
		{
			if((ClassifyActor(0) & ACTOR_MONSTER) || (ClassifyActor(0) & ACTOR_PLAYER))
			{
				int monx = GetActorX(0);	int mony = GetActorY(0);	int monz = GetActorZ(0);
				int vectorx = monx - x;
				int vectory = mony - y;
				int vectorz = monz - z;
				int length = magnitudeThree_f(vectorx,vectory,vectorz);
				if(abs(length) < 128.0) { SetResultValue(1); terminate; } //when returning in other languages, the method would end, this is here for good measure
			}
		}
	}
	SetResultValue(0);

}

script "SamsaraDisconnect" (int player) DISCONNECT
{
    playerClasses[player] = -1;
    for (int i = 0; i < SLOTCOUNT + UNIQUECOUNT; i++) { loadoutPrevValue[player][i] = 0; }
}

script "SamsaraDisconnectClient" (int pln) disconnect clientside //522 -- SAMSARA_DISCONNECT_CLIENT
{
	// Comment out these lines for zdoom
	int cpln = ConsolePlayerNumber();
	if (cpln != pln) { terminate; }

	DisconnectClassScripts(pln);
	SamsaraAlternativeClass = 0;
    for (int i = 0; i < SLOTCOUNT + UNIQUECOUNT; i++) { SamsaraEquipmentLoadout[i] = 0; }
	SamsaraClientClass  = 0;
	SamsaraItemFlash	= Timer();
}

script "SamsaraPuke" (int values, int pln) net //226 - SAMSARA_PUKE
{
	array_wolfmove[pln]	 = values & 1;
	array_smoothAnim[pln]   = values & 2;
	array_ballgag[pln]	  = values & 4;
	array_weaponBar[pln]	= values & 8;
	array_pickupswitch[pln] = values & 16;
}

script "SamsaraDeath" DEATH //619 -- SAMSARA_DEATH
{
	int pln = PlayerNumber();
	int i;
	
	for (i = 0; i < DEATHREMOVECOUNT; i++) { TakeInventory(DeathRemove[i], 0x7FFFFFFF); }

	switch (PlayerClass(pln))
	{
	case CLASS_DOOM:
		int deadtimer = 0;

		while (isDead(0))
		{
			if (CheckInventory("DoomClassMode") == 1) // Doom 64
			{
				if (deadtimer >= 1050)
				{
					ACS_NamedExecuteWithResult("SamsaraDoom64DeathMessage", Random(1, 12));
					deadtimer = 0;
				}

				deadtimer++;
			} else { // Original/Stronghold
				if (deadtimer > 0) { deadtimer = 0; }
			}

			Delay(1);
		}
		break;

	case CLASS_DUKE:
		Delay(20);

		if (isDead(0))
		{
			SetHudSize(400, 300, 0);

			if (IsSinglePlayer() && !GetCVar("sv_singleplayerrespawn")) { HudMessage(l:"DUKEDEADMESSAGERESTART"; HUDMSG_PLAIN, 1024, CR_LIGHTBLUE, 200.4, 9.1, 1.067); }
			else { HudMessage(l:"DUKEDEADMESSAGERESPAWN"; HUDMSG_PLAIN, 1024, CR_LIGHTBLUE, 200.4, 9.1, 1.067); }

			Delay(15);

			GiveInventory("DukeDeathTaunt", 1);
		}

		while (isDead(0))
		{
			SetHudSize(400, 300, 0);

			if (IsSinglePlayer() && !GetCVar("sv_singleplayerrespawn")) { HudMessage(l:"DUKEDEADMESSAGERESTART"; HUDMSG_PLAIN, 1024, CR_LIGHTBLUE, 200.4, 9.1, 1873); }
			else { HudMessage(l:"DUKEDEADMESSAGERESPAWN"; HUDMSG_PLAIN, 1024, CR_LIGHTBLUE, 200.4, 9.1, 1873); }

			Delay(1);
		}
		break;

	case CLASS_BLAKE:
		SetInventory("SamsaraBStoneAutoChargePistolCooldown", 0);
		break;

	case CLASS_CALEB:
		SetInventory("CalebLighterReadyDummy", 0);
		SetInventory("SawedOffCheck", 0);
		SetInventory("TommyCounter", 0);
		SetInventory("ThrowPower", 0);
		SetInventory("ThrowPowerBig", 0);
		SetInventory("TNT2", 0);
		SetInventory("SprayCan2", 0);
		SetInventory("RemoveVodoo", 0);
		SetInventory("CalebUsingTNT", 0);
		SetInventory("UsingPitchFork", 0);
		break;

	case CLASS_HALFLIFE:
		SetInventory("SamsaraHalfLifeSAWReloadCooldown", 0);
		SetInventory("SamsaraHalfLifeSniperReloadCooldown", 0);
		break;

	case CLASS_RR:
		Delay(20);

		if (isDead(0))
		{
			SetHudSize(400, 300, 0);

			HudMessage(l:"LEONARDDEADMESSAGE"; HUDMSG_PLAIN, 1024, CR_WHITE, 200.4, 9.1, 1.067);

			Delay(15);

			GiveInventory("LeonardDeathTaunt", 1);
		}

		while (isDead(0))
		{
			SetHudSize(400, 300, 0);

			HudMessage(l:"LEONARDDEADMESSAGE"; HUDMSG_PLAIN, 1024, CR_WHITE, 200.4, 9.1, 1873);

			Delay(1);
		}
		break;

	case CLASS_UNREAL:
		SetInventory("SamsaraUnrealCARifleSecondaryCooldown", 0);
		break;

	case CLASS_RTCW:
		if (IsSinglePlayer() && !GetCVar("sv_singleplayerrespawn"))
		{
			LocalAmbientSound("RTCW/GameOver", 127);
			SetHudSize(640, 480, 0);
			HudMessage(l:"RTCW_GAMEOVER"; HUDMSG_FADEOUT, 578, CR_WHITE, 320.0, 360.0, 3.0, 0.2);

			while (isDead(0))
			{
				LocalSetMusic(""); // don't let any music changes occur while dead

				Delay(1);
			}

			// OK, so you don't die.
			LocalSetMusic("*");
		}
		break;
	}
}

script "SamsaraDoom64DeathMessage" (int randmsg) CLIENTSIDE
{
	int pln = PlayerNumber(); // ensure only the activator gets the messages
	int cpln = ConsolePlayerNumber();

	str deathmsg = StrParam(s:"DOOM64MOCKPLAYER", d:randmsg);

	if (pln == cpln) { Log(l:deathmsg); }
}

script "HandleInstagibWeapons" (void)
{
	int classnum = samsaraClassNum();

	if (CheckInventory("SWClass"))
	{
		TakeInventory("SWKatana",1);
	}

	switch(GetCvar("samsara_slotmode"))
	{
		case 0:
			// Special cases where the class doesn't have a fist.
			if (CheckInventory("BlakeClass") ||
				CheckInventory("C7Class") ||
				CheckInventory("RMRClass") ||
				CheckInventory("DescentClass")) {
				GiveInventory(ClassWeapons[classnum][2][0],1);
			}
			else {
				GiveInventory(ClassWeapons[classnum][0][0],1);

				if (CheckInventory("SWClass"))
				{
					GiveInventory("SWKatana",1);
				}
			}
			break;
		case 1:
			GiveInventory(ClassWeapons[classnum][2][0],1);
			break;
		case 2:
			// Special cases where the class has either an upgrade for another weapon
			// or otherwise can't equip their Slot I. The first case involves non-Totenkopf
			// Blazkowicz getting a knife for the upgrade and the rest will get their pistols.
			if ((CheckInventory("WolfenClass") && (CheckInventory("WolfenClassMode")) <= 1)) {
				GiveInventory(ClassWeapons[classnum][0][0],1);
			}
			else if (CheckInventory("WitchavenClass"))
			{
				GiveInventory(ClassWeapons[classnum][0][0],1);
			}
			else if (CheckInventory("HexenClass") ||
				CheckInventory("BlakeClass") ||
				CheckInventory("StrifeClass") ||
				CheckInventory("DisruptorClass") ||
				CheckInventory("POGreedClass")) {
				GiveInventory(ClassWeapons[classnum][2][0],1);
			}
			GiveInventory("SamsaraSlotOnePickup",1);
			break;
		case 3:
			GiveInventory("SamsaraSlotTwoPickup",1);
			break;
		case 4:
			GiveInventory("SamsaraSlotThreePickup",1);
			break;
		case 5:
			GiveInventory("SamsaraSlotFourPickup",1);
			break;
		case 6:
			GiveInventory("SamsaraSlotFourSkulltagPickup",1);
			break;
		case 7:
			GiveInventory("SamsaraSlotFivePickup",1);
			break;
		case 8:
			GiveInventory("SamsaraSlotFiveSkulltagPickup",1);
			break;
		case 9:
			GiveInventory("SamsaraSlotSixPickup",1);
			break;
		case 10:
			GiveInventory("SamsaraSlotSixSkulltagPickup",1);
			break;
		case 11:
			if (CheckInventory("PainkillerClass"))
			{
				GiveInventory("SamsaraSlotFourPickup",1);
			}
				GiveInventory("SamsaraSlotSevenPickup",1);
			break;
		case 12:
			if (CheckInventory("PainkillerClass"))
			{
				GiveInventory("SamsaraSlotFourPickup",1);
			}
				GiveInventory("SamsaraSlotSevenSkulltagPickup",1);
			break;
		case 13:
			// Special cases involving the Uniques are a bit more involved, but
			// ultimatly managable. Basically, if it's an upgrade to an existing
			// weapon or an inventory item, just give them the Slot IV.
			if (CheckInventory("DoomguyClass") && (CheckInventory("DoomClassMode")) <= 1) {
				GiveInventory(ClassWeapons[classnum][0][0],1);
			}
			else if (CheckInventory("CMClass")) {
				GiveInventory(ClassWeapons[classnum][0][0],1);
			}
			else if (CheckInventory("ChexClass") ||
				(CheckInventory("WolfenClass") && (CheckInventory("WolfenClassMode")) <= 1) ||
				CheckInventory("HexenClass") ||
				CheckInventory("DukeClass") ||
				CheckInventory("BlakeClass") ||
				CheckInventory("StrifeClass") ||
				CheckInventory("EradClass") ||
				CheckInventory("C7Class") ||
				CheckInventory("RMRClass") ||
				CheckInventory("SWClass") ||
				CheckInventory("KatarnClass") ||
				CheckInventory("POGreedClass") ||
				CheckInventory("WitchavenClass") ||
				CheckInventory("DisruptorClass") ||
				CheckInventory("Hexen2Class") ||
				CheckInventory("CatacombClass") ||
				CheckInventory("PainkillerClass")) {
				GiveInventory("SamsaraSlotFourPickup",1);
			}
			GiveInventory("SamsaraUniquePickup1",1);
			break;
		case 14:
			// Special cases involving the Unique 2.
			if (CheckInventory("DoomguyClass") && (CheckInventory("DoomClassMode")) <= 1) {
				GiveInventory(ClassWeapons[classnum][0][0],1);
			}
			else if (CheckInventory("CMClass")) {
				GiveInventory(ClassWeapons[classnum][0][0],1);
			}
			else if (CheckInventory("CorvusClass") ||
				(CheckInventory("WolfenClass") && (CheckInventory("WolfenClassMode")) <= 1) ||
				CheckInventory("HexenClass") ||
				CheckInventory("DukeClass") ||
				CheckInventory("BlakeClass") ||
				CheckInventory("CalebClass") ||
				CheckInventory("StrifeClass") ||
				CheckInventory("EradClass") ||
				CheckInventory("C7Class") ||
				CheckInventory("RMRClass") ||
				CheckInventory("KatarnClass") ||
				CheckInventory("POGreedClass") ||
				CheckInventory("WitchavenClass") ||
				CheckInventory("DisruptorClass") ||
				CheckInventory("Hexen2Class") ||
				CheckInventory("CatacombClass") ||
				CheckInventory("PainkillerClass")) {
				GiveInventory("SamsaraSlotFourPickup",1);
			}
			else if (CheckInventory("SWClass")) {
				GiveInventory("SamsaraSlotFivePickup",1);
			}
			GiveInventory("SamsaraUniquePickup2",1);
			break;
		case 15:
			// Special cases involving the Unique 3.
			if (CheckInventory("DoomguyClass") && (CheckInventory("DoomClassMode")) <= 1) {
				GiveInventory(ClassWeapons[classnum][0][0],1);
			}
			else if (CheckInventory("DoomguyClass") && (CheckInventory("DoomClassMode")) == 2) {
				GiveInventory("SamsaraSlotFourPickup",1);
			}
			else if (CheckInventory("CMClass")) {
				GiveInventory(ClassWeapons[classnum][0][0],1);
			}
			else if (CheckInventory("CorvusClass") ||
				(CheckInventory("WolfenClass") && (CheckInventory("WolfenClassMode")) <= 1) ||
				CheckInventory("HexenClass") ||
				CheckInventory("BlakeClass") ||
				CheckInventory("StrifeClass") ||
				CheckInventory("EradClass") ||
				CheckInventory("C7Class") ||
				CheckInventory("RMRClass") ||
				CheckInventory("SWClass") ||
				CheckInventory("KatarnClass") ||
				CheckInventory("POGreedClass") ||
				CheckInventory("WitchavenClass") ||
				CheckInventory("DisruptorClass") ||
				CheckInventory("Hexen2Class") ||
				CheckInventory("CatacombClass") ||
				CheckInventory("PainkillerClass")) {
				GiveInventory("SamsaraSlotFourPickup",1);
			}
			else if ((CheckInventory("WolfenClass") && (CheckInventory("WolfenClassMode")) == 2)) {
				GiveInventory("SamsaraSlotTwoPickup",1);
			}
			else if (CheckInventory("DescentClass")) {
				GiveInventory(ClassWeapons[classnum][2][0],1);
			}
			GiveInventory("SamsaraUniquePickup3",1);
			break;
	}

	if(GetCvar("samsara_instagibspread") >= 1) {
		GiveInventory("SpreadRune",1);
	}

	// I'm so sorry for the else if statements, but the instagib code in Zandronum
	// and the different loadouts for each class and altclass required this ugly-looking function
}

script "SamsaraUnloading" UNLOADING //203
{
	int i;
	UnloadingNow = 1;
	//Use these to unfreeze players. Since it's unloading, it shouldn't hurt anything...
	SetPlayerProperty(1,0,PROP_TOTALLYFROZEN);
	SetPlayerProperty(1,0,PROP_FROZEN);

	for (i = 0; i < UNLOADCOUNT; i++) { TakeInventory(UnloadRemove[i], 0x7FFFFFFF); }
}

script "SamsaraPlayerOxygenFakeInvulnCheck" ENTER
{
    while (true)
    {
        int aircapacity = 35 * 20; // usually the maximum

        if (CheckInventory("PowerFakeInvulnerable") || CheckInventory("PowerFakeInvulnerableCleric") || CheckInventory("PowerFakeInvulnerableMage") ||
            CheckInventory("PowerFakeInvulnerableFighter") || CheckInventory("QuakePentagram") || CheckInventory("GodProtection") ||
            CheckInventory("DogProtection") || CheckInventory("PowerCatacomb_Invulnerability") || CheckInventory("Painkiller_IronWill_Protection") ||
            CheckInventory("PainkillerDemonMorphInvulnerability"))
        { SetAirSupply(PlayerNumber(), aircapacity); }

        Delay(1);
    }
}
