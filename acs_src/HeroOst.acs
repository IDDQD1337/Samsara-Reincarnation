//======================================================================================================================
//													Compile this
//======================================================================================================================

#library "HeroOST"
#include "zcommon.acs"
#include "commonFuncs.acs"

#define musicCount 38

int musicActivated[musicCount] = {-1};
str musicSettings[musiccount] =
{
    "samsara_cl_heromusic_doom",
    "samsara_cl_heromusic_chex",
    "samsara_cl_heromusic_heretic",
    "samsara_cl_heromusic_wolf3d",
    "samsara_cl_heromusic_hexen1",
    "samsara_cl_heromusic_duke3d",
    "samsara_cl_heromusic_marathon",
    "samsara_cl_heromusic_quake1",
    "samsara_cl_heromusic_rott",
    "samsara_cl_heromusic_bstone",
    "samsara_cl_heromusic_blood",
    "samsara_cl_heromusic_strife",
    "samsara_cl_heromusic_erad",
    "samsara_cl_heromusic_c7",
    "samsara_cl_heromusic_rmr",
    "samsara_cl_heromusic_darkf",
    "samsara_cl_heromusic_ipog",
    "samsara_cl_heromusic_disrup",
    "samsara_cl_heromusic_witch",
    "samsara_cl_heromusic_halflife",
    "samsara_cl_heromusic_sw",
    "samsara_cl_heromusic_cm",
    "samsara_cl_heromusic_ps",
    "samsara_cl_heromusic_rr",
    "samsara_cl_heromusic_quake2",
    "samsara_cl_heromusic_hexen2",
    "samsara_cl_heromusic_goldeneye",
    "samsara_cl_heromusic_catacomb",
    "samsara_cl_heromusic_painkiller",
    "samsara_cl_heromusic_unreal",
    "samsara_cl_heromusic_rtcw",
    "samsara_cl_heromusic_quake3",
    "samsara_cl_heromusic_descent",
    "samsara_cl_heromusic_deusex",
	"samsara_cl_heromusic_doom64",
	"samsara_cl_heromusic_totenkopf",
	"samsara_cl_heromusic_dukelab",
	"samsara_cl_heromusic_hlop",
};

#DEFINE CLASSCOUNT 34
#DEFINE MAXTYPES 5
#DEFINE MAXALTS 5

int maxGameTracks[CLASSCOUNT][MAXALTS][MAXTYPES] = 
{ 
	{ {52}, {23} },
	{ {15} },
	{ {19} },
	{ {29}, {15} },
	{ {32} },
	{ {40}, {6} },
	{ {16} },
	{ {9} },
	{ {21} },
	{ {15} },
	{ {12, 8} },
	{ {19} },
	{ {2} },
	{ {31} },
	{ {12} },
	{ {20} },
	{ {33} },
	{ {37} },
	{ {17} },
	{ {3, 4, 8, 4, 3}, {2, 3, 6, 5, 3} },
	{ {9} },
	{ {27} },
	{ {10} },
	{ {16} },
	{ {20} },
	{ {26, 26} },
	{ {26} },
	{ {1} },
	{ {27, 27, 27} },
	{ {77} },
	{ {16} },
	{ {29} },
	{ {26, 21} },
	{ {21, 21, 21} },
};

str gameMusicTypes[CLASSCOUNT][MAXALTS][MAXTYPES] = 
{
	{ {"DOOMTR"}, {"D64TRK"} },
	{ {"CHEXTR"} },
	{ {"HERETR"} },
	{ {"WOLF3D"}, {"TKTRAK"} },
	{ {"HEXENT"} },
	{ {"DUKE3D"}, {"DUKLAB"} },
	{ {"MARATR"} },
	{ {"QKTRAK"} },
	{ {"ROTTTR"} },
	{ {"BSTRAK"} },
	{ {"BLDMID", "BLOODT"} },
	{ {"STRIFT"} },
	{ {"ERDTRK"} },
	{ {"C7TRAK"} },
	{ {"RMRTRK"} },
	{ {"DFTRAK"} },
	{ {"POTRAK"} },
	{ {"DISRTR"} },
	{ {"WITRAK"} },
	{ {"HLBTRK", "HLKTRK", "HLRTRK", "HLSTRK", "HLWTRK" }, {"OPBTRK", "OPKTRK", "OPRTRK", "OPSTRK", "OPWTRK" } },
	{ {"SWTRAK"} },
	{ {"CMTRAK"} },
	{ {"EXHUTR"} },
	{ {"RRTRAK"} },
	{ {"Q2TRAK"} },
	{ {"HX2MID", "H2TRAK"} },
	{ {"BONDTR"} },
	{ {"C3DTRACK"} },
	{ {"PKAMB1", "PKAMB2", "PKFIT1"} },
	{ {"UNRTRK"} },
	{ {"RTCWTR"} },
	{ {"Q3TRAK"} },
	{ {"DSTRAK", "DSCDTR"} },
	{ {"DXAMB1", "DXAMB2", "DXFIT"} },
};

str ChristmasMusic[16] = {"CHRIST01","CHRIST02","CHRIST03","CHRIST04","CHRIST05",
"CHRIST06","CHRIST07","CHRIST08","CHRIST09","CHRIST10","CHRIST11","CHRIST12",
"CHRIST13","CHRIST14","CHRIST15","CHRIST16"};

/*str gameClassesSTR[34] = {
	"DoomguyClass", "ChexClass", "CorvusClass", "WolfenClass", "HexenClass", "DukeClass", "MarathonClass", "QuakeClass", "RottClass", "BlakeClass",
	"CalebClass", "StrifeClass", "EradClass", "C7Class", "RMRClass", "KatarnClass", "POGreedClass", "DisruptorClass", "WitchavenClass", 
	"HalfLifeClass", "SWClass", "CMClass", "JonClass", "RRClass", "BittermanClass", "Hexen2Class", "BondClass", "CatacombClass", "PainkillerClass", 
	"UnrealClass", "RTCWClass", "Q3Class", "DescentClass", "DeusExClass"
};*/

script "SamsaraOST_Enter" ENTER
{
    if (GameType() == GAME_TITLE_MAP) { terminate; }

    int i;
    int choices;

    int pln = PlayerNumber();
    int altskin, settrack, lastmode, lastgame, lastblud, lasthex, lastdescent;
    int herosoundtrack = GetUserCVar(pln, "samsara_cl_heromusic");
    int gameoverride;
    int bloodcd  = GetUserCVar(pln, "samsara_cl_bloodcd");
    int hexen2cd = GetUserCVar(pln, "samsara_cl_hex2cd");
    int descentcd  = GetUserCVar(pln, "samsara_cl_descentcd");
    int musictid = UniqueTID();

    if (herosoundtrack > 3) { herosoundtrack = 3; }
    else if (herosoundtrack < 0) { herosoundtrack = 0; }

    // precautionary
    if (bloodcd > 1) { bloodcd = 1; }
    else if (bloodcd < 0) { bloodcd = 0; }

    if (hexen2cd > 1) { hexen2cd = 1; }
    else if (hexen2cd < 0) { hexen2cd = 0; }

    if (descentcd > 1) { descentcd = 1; }
    else if (descentcd < 0) { descentcd = 0; }

    if (herosoundtrack > 0 && (!GetUserCVar(pln, "samsara_cl_xmasmusic") || !GetCVar("samsara_merrychristmas")))
    {
        if (herosoundtrack != lastmode || CheckInventory("SamsaraModeCounter") != altskin || descentcd != lastdescent || bloodcd != lastblud || hexen2cd != lasthex || GetLevelInfo(LEVELINFO_LEVELNUM) != CheckInventory("HeroSoundTrackLevel") || CheckInventory("SamsaraHeroMusicSelectingNextTrack"))
        {
            LocalSetMusic("");

            choices = -1;
            gameoverride = 0; // default to doom when there are no other fallbacks in use

            if (herosoundtrack == 2)
            {
                for (i = 0; i < musicCount; i++)
                {
                    if (GetUserCVar(pln, musicSettings[i]))
                    {
                        choices++;
                        musicActivated[choices] = i;
                    }
                }

                if (choices > -1) { gameoverride = musicActivated[Random(0, choices)]; }
            }

            if (herosoundtrack == 1 || (herosoundtrack == 2 && choices == -1))
            {
                if (GetCVar("samsara_moddedgame")) { gameoverride = 0; }
                else { gameoverride = PlayerClass(pln); }
            }

            SetInventory("SamsaraHeroMusicGame", gameoverride + 1);

            int switchType = 0;
            int switchClass = 0;
            StopSound(musictid, CHAN_BODY);
            Thing_Remove(musictid);

            if (herosoundtrack == 3)
            {
                settrack = Random(0, 30);

                if (settrack <= 9) { LocalSetMusic(StrParam(s:"a000000", d:settrack)); }
                else { LocalSetMusic(StrParam(s:"a00000", d:settrack)); }
            } else {
                switch (gameoverride)
                {
                  default:
                    settrack = Random(1, maxGameTracks[gameoverride][0][0]);

                    LocalSetMusic(StrParam(s:gameMusicTypes[gameoverride][0][0], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

                  case 0:
                  case 34:
                    switchClass = GetUserCVar(pln, "samsara_cl_doommode") == 1 || gameoverride == 34;
                    settrack = Random(1, maxGameTracks[0][switchClass][0]);

                    LocalSetMusic(StrParam(s:gameMusicTypes[0][switchClass][0], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

                  case 3:
                  case 35:
                    switchClass = GetUserCVar(pln, "samsara_cl_wolfmode") == 2 || gameoverride == 35;
                    settrack = Random(1, maxGameTracks[3][switchClass][0]);

                    LocalSetMusic(StrParam(s:gameMusicTypes[3][switchClass][0], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

                  case 5:
                  case 36:
                    switchClass = GetUserCVar(pln, "samsara_cl_dukemode") == 1 || gameoverride == 36;
                    settrack = Random(1, maxGameTracks[5][switchClass][0]);

                    LocalSetMusic(StrParam(s:gameMusicTypes[5][switchClass][0], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

                  case 10:
                    switchType = GetUserCVar(pln, "samsara_cl_bloodcd");
                    settrack = Random(1, maxGameTracks[10][0][switchType]);

                    LocalSetMusic(StrParam(s:gameMusicTypes[10][0][switchType], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

                  case 19:
                  case 37:
                    SpawnForced("HLMusicToken",GetActorX(0),GetActorY(0),GetActorZ(0),musictid);
                    if (!CheckInventory("SamsaraHeroMusicHalfLifeActive")) { ACS_NamedExecuteWithResult("SamsaraOST_HalfLifeScriptedMusicLoop",musictid); }
                    break;

                  case 25:
                    switchType = GetUserCVar(pln, "samsara_cl_hex2cd");
                    settrack = Random(1, maxGameTracks[25][0][switchType]);

                    LocalSetMusic(StrParam(s:gameMusicTypes[25][0][switchType], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

                  case 26:
                    settrack = Random(1, maxGameTracks[26][0][0]);
                    SetInventory("BondMusicToken", settrack + 1);

                    LocalSetMusic(StrParam(s:gameMusicTypes[26][0][0], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

                  case 27:
                    LocalSetMusic("C3DTRACK");
                    break;

                  case 28:
                    if (!CheckInventory("SamsaraHeroMusicPainkillerActive")) { ACS_NamedExecuteWithResult("SamsaraOST_PainkillerScriptedMusic"); }
                    break;

                  case 32:
                    switchType = GetUserCVar(pln, "samsara_cl_descentcd");
                    settrack = Random(1, maxGameTracks[32][0][switchType]);

                    LocalSetMusic(StrParam(s:gameMusicTypes[32][0][switchType], s:settrack < 10 ? "0" : "", d:settrack));
                    break;

                  case 33:
                    if (!CheckInventory("SamsaraHeroMusicDeusExActive")) { ACS_NamedExecuteWithResult("SamsaraOST_DeusExScriptedMusic"); }
                    break;
                }
            }

            SetInventory("HeroSoundTrack", herosoundtrack);
            SetInventory("HeroSoundTrackXmas", 0);
            SetInventory("HeroSoundTrackLevel", GetLevelInfo(LEVELINFO_LEVELNUM));

            SetInventory("SamsaraHeroMusicSelectingNextTrack", 0);
        }
    } else if (GetUserCVar(pln, "samsara_cl_xmasmusic") && GetCVar("samsara_merrychristmas") && herosoundtrack > 0) {
        if (!CheckInventory("HeroSoundTrackXmas") || GetLevelInfo(LEVELINFO_LEVELNUM) != CheckInventory("HeroSoundTrackLevel") || CheckInventory("SamsaraHeroMusicSelectingNextTrack"))
        {
            LocalSetMusic("");

            settrack = Random(0, 15);

            LocalSetMusic(ChristmasMusic[settrack]);

            SetInventory("HeroSoundTrack", 0);
            SetInventory("HeroSoundTrackXmas", 1);
            SetInventory("HeroSoundTrackLevel", GetLevelInfo(LEVELINFO_LEVELNUM));
            SetInventory("SamsaraHeroMusicGame", 0);

            SetInventory("SamsaraHeroMusicSelectingNextTrack", 0);
        }
    } else {
        if (CheckInventory("HeroSoundTrack") || CheckInventory("HeroSoundTrackXmas"))
        {
            LocalSetMusic("");

            LocalSetMusic("*");

            SetInventory("HeroSoundTrack", 0);
            SetInventory("HeroSoundTrackXmas", 0);
            SetInventory("HeroSoundTrackLevel", 0);
            SetInventory("SamsaraHeroMusicGame", 0);

            SetInventory("SamsaraHeroMusicSelectingNextTrack", 0);
        }
    }

    altskin = CheckInventory("SamsaraModeCounter");
    lastmode = GetUserCVar(pln,"samsara_cl_heromusic");
    lastblud = GetUserCVar(pln,"samsara_cl_bloodcd");
    lasthex = GetUserCVar(pln,"samsara_cl_hex2cd");
    lastdescent = GetUserCVar(pln,"samsara_cl_descentcd");

    if (lastmode > 3) { lastmode = 3; }
    else if (lastmode < 0) { lastmode = 0; }

    // precautionary
    if (lastblud > 1) { lastblud = 1; }
    else if (lastblud < 0) { lastblud = 0; }

    if (lasthex > 1) { lasthex = 1; }
    else if (lasthex < 0) { lasthex = 0; }

    if (lastdescent > 1) { lastdescent = 1; }
    else if (lastdescent < 0) { lastdescent = 0; }

    Delay(1);
    restart;
}

script "SamsaraOST_HalfLifeScriptedMusicLoop" (int musictid)
{
    int settrack;
    int delaytimer = 0;
	int mySetting = GetUserCVAR(PlayerNumber(),"samsara_cl_heromusic");
    SetInventory("SamsaraHeroMusicHalfLifeActive", 1);

    while (GetUserCVAR(PlayerNumber(),"samsara_cl_heromusic") == mySetting)
    {
		if(CheckInventory("SamsaraHeroMusicGame") != 20 && CheckInventory("SamsaraHeroMusicGame") != 38)
			break;
		
        if (CheckInventory("HalfLifeMusicPlayingToken"))
        {
			TakeInventory("HLMusicKey",1);
			TakeInventory("HLMusicWeapon",1);
			TakeInventory("HLMusicBoss",1);
            if (delaytimer >= 4200)
            {
                StopSound(musictid,CHAN_BODY);
                SetInventory("HalfLifeMusicPlayingToken", 0);
                delaytimer = 0;
            }
            else { delaytimer++; }
        }

        if (!CheckInventory("HalfLifeMusicPlayingToken"))
        {
			delaytimer = 0;
            if (Timer() == 0)
            {
                ACS_NamedExecuteWithResult("SamsaraOST_HalfLifeScriptedMusic", musictid, 3, PlayerNumber());
                SetInventory("HalfLifeMusicPlayingToken", 1);
            } 
			else if(CheckInventory("HLMusicBoss"))
			{
				ACS_NamedExecuteWithResult("SamsaraOST_HalfLifeScriptedMusic", musictid, 5, PlayerNumber());
				TakeInventory("HLMusicBoss",1);
                SetInventory("HalfLifeMusicPlayingToken", 1);
			}
			else if(CheckInventory("HLMusicWeapon"))
			{
				ACS_NamedExecuteWithResult("SamsaraOST_HalfLifeScriptedMusic", musictid, 1, PlayerNumber());
				TakeInventory("HLMusicWeapon",1);
                SetInventory("HalfLifeMusicPlayingToken", 1);
			}
			else if(CheckInventory("HLMusicKey"))
			{
				ACS_NamedExecuteWithResult("SamsaraOST_HalfLifeScriptedMusic", musictid, 2, PlayerNumber());
				TakeInventory("HLMusicKey",1);
                SetInventory("HalfLifeMusicPlayingToken", 1);
			}
			else 
			{
                settrack = Random(0, 2048);

                if (settrack == 0)
                {
                    ACS_NamedExecuteWithResult("SamsaraOST_HalfLifeScriptedMusic", musictid, 4, PlayerNumber()); 
                    SetInventory("HalfLifeMusicPlayingToken", 1);
                }
            }
        }

        Delay(1);
    }
	
	TakeInventory("HLMusicBoss",1);
	TakeInventory("HLMusicWeapon",1);
	TakeInventory("HLMusicKey",1);
	StopSound(musictid,CHAN_BODY);
	SetInventory("HalfLifeMusicPlayingToken", 0);
    SetInventory("SamsaraHeroMusicHalfLifeActive", 0);
}

Script "SamsaraOST_HalfLifeScriptedMusic" (int musictid, int cause, int pln) clientside
{
	if(pln != ConsolePlayerNumber()) terminate;
	int settrack;
    int halflifeopposingforce = CheckInventory("SamsaraHeroMusicGame") == 38 ? 1 : GetUserCvar(pln,"samsara_cl_shephardmode") && GetUserCVAR(pln,"samsara_cl_heromusic") == 1;

	switch(cause)
	{
		case 1:
			SetTrack = Random(1, maxGameTracks[19][halflifeopposingforce][1]);
			PlaySound(musictid, strparam(s:gameMusicTypes[19][halflifeopposingforce][1],s:SetTrack < 10 ? "0" : "",d:SetTrack), CHAN_BODY|CHAN_NOPAUSE, 1.0, false, ATTN_NONE);
			break;
		case 2:
			SetTrack = Random(1, maxGameTracks[19][halflifeopposingforce][4]);
			PlaySound(musictid, strparam(s:gameMusicTypes[19][halflifeopposingforce][4],s:SetTrack < 10 ? "0" : "",d:SetTrack), CHAN_BODY|CHAN_NOPAUSE, 1.0, false, ATTN_NONE);
			break;
		case 3:
			SetTrack = Random(1, maxGameTracks[19][halflifeopposingforce][3]);
			PlaySound(musictid, strparam(s:gameMusicTypes[19][halflifeopposingforce][3],s:SetTrack < 10 ? "0" : "",d:SetTrack), CHAN_BODY|CHAN_NOPAUSE, 1.0, false, ATTN_NONE);
			break;
		case 4:	
			SetTrack = Random(1, maxGameTracks[19][halflifeopposingforce][2]);
			PlaySound(musictid, strparam(s:gameMusicTypes[19][halflifeopposingforce][2],s:SetTrack < 10 ? "0" : "",d:SetTrack), CHAN_BODY|CHAN_NOPAUSE, 1.0, false, ATTN_NONE);
			break;
		case 5:	
			SetTrack = Random(1, maxGameTracks[19][halflifeopposingforce][0]);
			PlaySound(musictid, strparam(s:gameMusicTypes[19][halflifeopposingforce][0],s:SetTrack < 10 ? "0" : "",d:SetTrack), CHAN_BODY|CHAN_NOPAUSE, 1.0, false, ATTN_NONE);
			break;
	}
}

Script "SamsaraOST_PainkillerScriptedMusic" (void)
{
	int musicvolume = 1.0;
	int themeseed = random(1,maxGameTracks[28][0][0]);
	int songseed = 1;
	int targetmusicvolume = musicvolume;
	int swapped, swaptofight, swaptoambient;
	int laststate = 0;
	int trigger = 1;
	int gameoverride = CheckInventory("SamsaraHeroMusicGame") - 1;
	
	switch(themeseed)
	{
		case 2: case 3: case 4: case 5: case 10: case 11: case 12: case 13: case 17: case 18: case 20: case 22: songseed = random(1,2); break;
	}

    SetInventory("SamsaraHeroMusicPainkillerActive", 1);

	while(CheckInventory("SamsaraHeroMusicPainkillerActive"))
	{
        if (GetCVar("snd_musicvolume") <= 0 || (CheckInventory("BondClass") && isDead(0)) || (CheckInventory("RTCWClass") && isDead(0) && isSinglePlayer()))
        {
            Delay(1);
            continue;
        }

        gameoverride = CheckInventory("SamsaraHeroMusicGame") - 1;

        if (gameoverride != 28) { break; }

        if (CheckInventory("SamsaraHeroMusicSelectingNextTrack"))
        {
            LocalSetMusic("");

	        themeseed = random(1,maxGameTracks[28][0][0]);
	        switch(themeseed)
			{
				case 2: case 3: case 4: case 5: case 10: case 11: case 12: case 13: case 17: case 18: case 20: case 22: songseed = random(1,2); break;
			}
        }

		int newtid = UniqueTid();
		SpawnSpotFacingForced("Painkiller_MusicDecider",0,newtid);
		SetPointerExt(AAPTR_TRACER,0,newtid);
		Thing_ChangeTid(newtid,0);

		if(GetCvar("samsara_zscriptready") == 2)
		{
			SetMusicVolume(musicvolume);
			if(CheckInventory("Painkiller_CombatMusic") || swaptofight == 1)
			{
				if(CheckInventory("Painkiller_CombatMusic") != swapped || swaptofight == 1)
				{
					swaptofight = 1;
					//PrintBold(s:"Combat ",f:musicvolume);
					if(laststate == 0)
					{
						trigger = 0;
						musicvolume -= 0.01;
					}
					if(musicvolume < 0.0 || trigger == 1)
					{
						trigger = 1;
						if(musicvolume < targetmusicvolume)
							musicvolume += 0.01;
						else
						{
							musicvolume = targetmusicvolume;
							swaptofight = 0;
							swaptoambient = 0;
							swapped = 1;
						}
							
						if(laststate == 0)
						{
							switch(themeseed)
							{
								default:
									LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:themeseed < 10 ? "0" : "",d:themeseed),0);
									break;
								case 12:
									LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:"0",d:1),0);
									break;
								case 13:
									LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:"0",d:6),0);
									break;
								case 17:
									LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:"0",d:5),0);
									break;
								
							}
						}
						laststate = 1;
					}
				}
				else
				{
					SetMusicVolume(targetmusicvolume);
					switch(themeseed)
					{
						default:
							LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:themeseed < 10 ? "0" : "",d:themeseed),0);
							break;
						case 12:
							LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:"0",d:1),0);
							break;
						case 13:
							LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:"0",d:6),0);
							break;
						case 17:
							LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:"0",d:5),0);
							break;
						
					}
				}
			}
			else if(CheckInventory("Painkiller_CombatMusic") == 0 || swaptoambient == 1)
			{
				if(CheckInventory("Painkiller_CombatMusic") != swapped || swaptoambient == 1)
				{
					swaptoambient = 1;
					//PrintBold(s:"Ambient ",f:musicvolume);
					if(laststate == 1)
					{
						trigger = 0;
						musicvolume -= 0.01;
					}
					if(musicvolume < 0.0 || trigger == 1)
					{
						trigger = 1;
						if(musicvolume < targetmusicvolume)
							musicvolume += 0.01;
						else
						{
							musicvolume = targetmusicvolume;
							swaptofight = 0;
							swaptoambient = 0;
							swapped = 0;
						}
							
						if(laststate == 1)
							LocalSetMusic(strparam(s:gameMusicTypes[28][0][songseed-1],s:themeseed < 10 ? "0" : "",d:themeseed),0);
						laststate = 0;
					}
				}
				else
				{
					SetMusicVolume(targetmusicvolume);
					LocalSetMusic(strparam(s:gameMusicTypes[28][0][songseed-1],s:themeseed < 10 ? "0" : "",d:themeseed),0);
				}
			}
		}
		else
		{
			if(!CheckWeapon("Painkiller_DemonMorph") && !CheckInventory("Painkiller_GoldActive"))
			{
				if(CheckInventory("Painkiller_CombatMusic"))
				{
					TakeInventory("Painkiller_AmbientMusic",65536);
					GiveInventory("Painkiller_CombatMusic",1);
					switch(themeseed)
					{
						default:
							LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:themeseed < 10 ? "0" : "",d:themeseed),0);
							break;
						case 12:
							LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:"0",d:1),0);
							break;
						case 13:
							LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:"0",d:6),0);
							break;
						case 17:
							LocalSetMusic(strparam(s:gameMusicTypes[28][0][2],s:"0",d:5),0);
							break;
						
					}
				}
				else if(!CheckInventory("Painkiller_AmbientMusic"))
				{
					GiveInventory("Painkiller_AmbientMusic",1);
					LocalSetMusic(strparam(s:gameMusicTypes[28][0][songseed-1],s:themeseed < 10 ? "0" : "",d:themeseed),0);
				}
			}
		}
		
		Delay(1);
	}
    SetInventory("SamsaraHeroMusicPainkillerActive", 0);
	TakeInventory("Painkiller_CombatMusic",1);
	TakeInventory("Painkiller_AmbientMusic",1);
}

Script "SamsaraOST_DeusExScriptedMusic" (void)
{
	int musicvolume = 1.0;
	int themeseed = random(1,maxGameTracks[33][0][0]);
	int songseed = 1;
	int targetmusicvolume = musicvolume;
	int swapped, swaptofight, swaptoambient;
	int laststate = 0;
	int trigger = 1;
	int gameoverride = CheckInventory("SamsaraHeroMusicGame") - 1;

    SetInventory("SamsaraHeroMusicDeusExActive", 1);
	
	if(themeseed == 14) songseed = random(1,2);
	while (CheckInventory("SamsaraHeroMusicDeusExActive"))
	{
        if (GetCVar("snd_musicvolume") <= 0 || (CheckInventory("BondClass") && isDead(0)) || (CheckInventory("RTCWClass") && isDead(0) && isSinglePlayer()))
        {
            Delay(1);
            continue;
        }
		
        gameoverride = CheckInventory("SamsaraHeroMusicGame") - 1;

        if (gameoverride != 33) { break; }

        if (CheckInventory("SamsaraHeroMusicSelectingNextTrack"))
        {
            LocalSetMusic("");

	        themeseed = random(1,maxGameTracks[33][0][0]);
			if(themeseed == 14) songseed = random(1,2);
        }

		int newtid = UniqueTid();
		SpawnSpotFacingForced("DeusEx_MusicDecider",0,newtid);
		SetPointerExt(AAPTR_TRACER,0,newtid);
		Thing_ChangeTid(newtid,0);

		if(GetCvar("samsara_zscriptready") == 2)
		{
			SetMusicVolume(musicvolume);
			if(CheckInventory("DeusEx_CombatMusic") || swaptofight == 1)
			{
				if(CheckInventory("DeusEx_CombatMusic") != swapped || swaptofight == 1)
				{
					swaptofight = 1;
					//PrintBold(s:"Combat ",f:musicvolume);
					if(laststate == 0)
					{
						trigger = 0;
						musicvolume -= 0.01;
					}
					if(musicvolume < 0.0 || trigger == 1)
					{
						trigger = 1;
						if(musicvolume < targetmusicvolume)
							musicvolume += 0.01;
						else
						{
							musicvolume = targetmusicvolume;
							swaptofight = 0;
							swaptoambient = 0;
							swapped = 1;
						}
							
						if(laststate == 0)
							LocalSetMusic(strparam(s:gameMusicTypes[33][0][2],s:themeseed < 10 ? "0" : "",d:themeseed),0);
						laststate = 1;
					}
				}
				else
				{
					SetMusicVolume(targetmusicvolume);
					LocalSetMusic(strparam(s:gameMusicTypes[33][0][2],s:themeseed < 10 ? "0" : "",d:themeseed),0);
				}
			}
			else if(CheckInventory("DeusEx_CombatMusic") == 0 || swaptoambient == 1)
			{
				if(CheckInventory("DeusEx_CombatMusic") != swapped || swaptoambient == 1)
				{
					swaptoambient = 1;
					//PrintBold(s:"Ambient ",f:musicvolume);
					if(laststate == 1)
					{
						trigger = 0;
						musicvolume -= 0.01;
					}
					if(musicvolume < 0.0 || trigger == 1)
					{
						trigger = 1;
						if(musicvolume < targetmusicvolume)
							musicvolume += 0.01;
						else
						{
							musicvolume = targetmusicvolume;
							swaptofight = 0;
							swaptoambient = 0;
							swapped = 0;
						}
							
						if(laststate == 1)
							LocalSetMusic(strparam(s:gameMusicTypes[33][0][songseed-1],s:themeseed < 10 ? "0" : "",d:themeseed),0);
						laststate = 0;
					}
				}
				else
				{
					SetMusicVolume(targetmusicvolume);
					LocalSetMusic(strparam(s:gameMusicTypes[33][0][songseed-1],s:themeseed < 10 ? "0" : "",d:themeseed),0);
				}
			}
		}
		else
		{
			if(!CheckWeapon("Painkiller_DemonMorph") && !CheckInventory("Painkiller_GoldActive"))
			{
				if(CheckInventory("DeusEx_CombatMusic"))
					LocalSetMusic(strparam(s:gameMusicTypes[33][0][2],s:themeseed < 10 ? "0" : "",d:themeseed),0);
				else
					LocalSetMusic(strparam(s:gameMusicTypes[33][0][songseed-1],s:themeseed < 10 ? "0" : "",d:themeseed),0);
			}
		}
		
		Delay(1);
	}
    SetInventory("SamsaraHeroMusicDeusExActive", 0);
    SetInventory("DeusEx_CombatMusic", 0);
}

script "SamsaraOST_NextSong" (void) NET
{
    int pln = PlayerNumber();

    if (PlayerIsSpectator(pln) > 0)
    {
        ACS_NamedExecuteWithResult("SamsaraOST_NextSong_Message", 0);
        terminate;
    } else if (GetUserCVar(pln, "samsara_cl_heromusic") <= 0) {
        ACS_NamedExecuteWithResult("SamsaraOST_NextSong_Message", 1);
        terminate;
    }

    SetInventory("SamsaraHeroMusicSelectingNextTrack", 1);
}

script "SamsaraOST_NextSong_Message" (int message) CLIENTSIDE
{
    int pln = PlayerNumber(); // ensure only the activator gets the messages
    int cpln = ConsolePlayerNumber();

    if (pln == cpln)
    {
        switch (message)
        {
            case 0:
                Log(s:"This cannot be used while spectating.");
                break;

            default:
                Log(s:"This can only be used with Hero Music enabled.");
                break;
        }
    }
}
