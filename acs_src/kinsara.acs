//======================================================================================================================
//													Compile this
//======================================================================================================================

#library "kinsara"
#include "zcommon.acs"
#include "commonFuncs.acs"

// A handy method of detecting what Source Port you're using and using appropriate
// scripts for it. Thanks to TheZombieKiller!

script "IsThisZandro" OPEN
{
	if (isZDoom())
	{
        //Log(s:"Zandronum check unsuccessful, assuming ZDoom.");
        SetCVar("samsara_runninginzandro",0);
        SetCVar("samsara_runninginzdoom",1);
    } else {
        //Log(s:"Zandronum check successful.");
        SetCVar("samsara_runninginzandro",1);
        SetCVar("samsara_runninginzdoom",0);
    }
}

Script "CanUZScript" OPEN
{
	if(SpawnForced("SamsaraCanUZScript",0,0,0,0,0))
	{
		if(StrICmp(strparam(l:"RNDMNU_POLY"),"Poly Renderer (experimental)") != 0)
		{
			SetCVAR("samsara_zscriptready",2); // Modern GZDoom (4.6+)
		}
		else
		{
			SetCVAR("samsara_zscriptready",1); // LZDoom
		}
	}
	else
	{
		SetCVAR("samsara_zscriptready",0); // Zandronum
	}
}

Script "ReMixerLoaded" OPEN
{
	if(SpawnForced("SamsaraMixerLoadedToken",0,0,0,0,0))
		SetCVAR("samsara_mixerloaded",1);
	else
		SetCVAR("samsara_mixerloaded",0);
}

// If running in ZDoom, mirror Zandro options to the ZDoom cvars so I don't have
// to define them twice in the menu.
script "ZDoomOptionMirror" ENTER
{
	If (GetCVar("samsara_runninginzdoom") == 1)
	{
		SetCVar("samsara_zd_expparticles",GetCVar("samsara_cl_expparticles"));
		SetCVar("samsara_zd_pickupmode",GetCVar("samsara_cl_pickupmode"));
		SetCVar("samsara_zd_noadditivepickups",GetCVar("samsara_cl_noadditivepickups"));
		SetCVar("samsara_zd_bloodyhell",GetCVar("samsara_cl_bloodyhell"));
		SetCVar("samsara_zd_bloodypersistent",GetCVar("samsara_cl_bloodypersistent"));
		delay(1);
		restart;
	}
}

// Fancy per-class secret notifications
script "SecretNotifier" ENTER
{
    int stotal;
    int sfound;
    int sfound2;

    stotal = GetLevelInfo(LEVELINFO_TOTAL_SECRETS); // Dunno if secret number can increase, though.
    sfound2 = sfound;
    sfound = GetLevelInfo(LEVELINFO_FOUND_SECRETS);

    bool showmsgs = true;

    if (isZDoom() && !GetCVar("cl_showsecretmessage") && !GetCVar("samsara_cl_showsecretmessage")) { showmsgs = false; }

    // Found a secret.
    if (sfound > sfound2)
    {
        if (showmsgs) { ACS_NamedExecuteWithResult("SecretNotifierDisplay", sfound, stotal); }

        if (CheckInventory("WolfenClass"))
        {
            if (CheckInventory("WolfenClassMode") == 2) { GiveInventory("TotenkopfSecretCounter", 1); } // Castle Totenkopf SDL
        } else if (CheckInventory("DukeClass")) {
            if (showmsgs) { ACS_NamedExecuteWithResult("SecretNotifierDukeTaunt"); } // don't let the delay get in the way of this script
        } else if (CheckInventory("CalebClass")) {
            if (!CheckInventory("CalebBallgag") && !CheckInventory("CalebTauntCooldown") && showmsgs)
            {
                LocalAmbientSound("Blood/Secret", 127);
                GiveInventory("CalebTauntCooldown", 5);
                ACS_NamedExecuteAlways("CalebTauntCooldown", 0);
            }
        } else if (CheckInventory("EradClass")) {
            if (!CheckInventory("EleenaBallgag") && !CheckInventory("EleenaTauntCooldown") && showmsgs)
            {
                LocalAmbientSound("Eleena/Secret", 127);
                GiveInventory("EleenaTauntCooldown", 5);
                ACS_NamedExecuteAlways("EleenaTauntCooldown", 0);
            }
        } else if (CheckInventory("SWClass")) {
            if (!CheckInventory("LoWangBallgag") && !CheckInventory("LoWangTauntCooldown") && showmsgs)
            {
                LocalAmbientSound("SW/Secret", 127);
                GiveInventory("LoWangTauntCooldown", 5);
                ACS_NamedExecuteAlways("LoWangTauntCooldown", 0);
            }
        } else if (CheckInventory("RRClass")) {
            if (!CheckInventory("LeonardBallgag") && !CheckInventory("LeonardTauntCooldown") && showmsgs)
            {
                LocalAmbientSound("RR/Secret", 127);
                GiveInventory("LeonardTauntCooldown", 5);
                ACS_NamedExecuteAlways("LeonardTauntCooldown", 0);
            }
        }
    }

    Delay(1);
    restart;
}

script "SecretNotifierDukeTaunt" (void)
{
    Delay(10);

    if (!CheckInventory("DukeBallgag") && !CheckInventory("DukeTauntCooldown"))
    {
        if (CheckInventory("DukeLegacyVoices")) { LocalAmbientSound("duke/old_secret", 127); }
        else { LocalAmbientSound("duke/secret", 127); }

        GiveInventory("DukeTauntCooldown", 5);
        ACS_NamedExecuteAlways("DukeTauntCooldown", 0);
    }
}

script "SecretNotifierDisplay" (int sfound, int stotal) CLIENTSIDE
{
	int pln = PlayerNumber(); // ensure only the activator gets the messages
	int cpln = ConsolePlayerNumber();

    if (pln != cpln) { terminate; }

    if (CheckInventory("DoomguyClass"))
    {
        if (CheckInventory("DoomClassMode") == 1) // Doom 64
        {
            AmbientSound("doom64guy/secret", 127);
            Log(l:"SECRETFOUND_DOOM64");
        } else { // Original/Stronghold
            AmbientSound("secretfound/doom", 127);
            Log(l:"SECRETFOUND_DOOM");
        }
    } else if (CheckInventory("ChexClass")) {
        AmbientSound("secretfound/chex", 127);
        Log(l:"SECRETFOUND_CHEX");
    } else if (CheckInventory("CorvusClass")) {
        AmbientSound("secretfound/heretic", 127);
        Log(l:"SECRETFOUND_RAVEN");
    } else if (CheckInventory("WolfenClass")) {
        if (CheckInventory("WolfenClassMode") == 2) // Castle Totenkopf SDL
        {
            AmbientSound("Totenkopf/Bonus", 127);
            Log(l:"SECRETFOUND_TOTENKOPF");
        } else { // Original/Lost Missions
            if (sfound >= stotal) { AmbientSound("secretfound/wolf2", 127); }
            else { AmbientSound("secretfound/wolf1", 127); }
            Log(l:"SECRETFOUND_WOLF");
        }
    } else if (CheckInventory("HexenClass")) {
        if (sfound >= stotal)
        {
            AmbientSound("secretfound/PuzzleSuccess", 127);
            Print(s:"\cjYou have completed the puzzle of the secrets in ", n:PRINTNAME_LEVELNAME, s:".");
        } else {
            AmbientSound("secretfound/SwitchOtherLevel", 127);
            Print(s:"\cjYou have found ", i:sfound, s:" of the ", i:stotal, s:" secrets in ", n:PRINTNAME_LEVELNAME, s:".");
        }
    } else if (CheckInventory("DukeClass")) {
        AmbientSound("secretfound/duke", 127);
        SetHudSize(400, 300, 0);
        HudMessage(l:"SECRETFOUND_DUKE"; HUDMSG_PLAIN, 1, CR_LIGHTBLUE, 200.4, 9.1, 2.0);
    } else if (CheckInventory("MarathonClass")) {
        AmbientSound("secretfound/marathon", 127);
        Log(l:"SECRETFOUND_MARATHON");
    } else if (CheckInventory("QuakeClass")) {
        AmbientSound("secretfound/quake", 127);
        Print(l:"SECRETFOUND_QUAKE");
    } else if (CheckInventory("RottClass")) {
        AmbientSound("Freely/Secret", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("BlakeClass")) {
        AmbientSound("Blake/Secret", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("CalebClass")) {
        AmbientSound("Caleb/Secret", 127);
        Print(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("StrifeClass")) {
        AmbientSound("Strife/Secret", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("EradClass")) {
        AmbientSound("Eradicator/Secret", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("C7Class")) {
        AmbientSound("C7/Secret", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("RMRClass")) {
        AmbientSound("RMR/Secret", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("KatarnClass")) {
        AmbientSound("Kyle/Secret", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("POGreedClass")) { // placeholder
        AmbientSound("secretfound/default", 127);
        Print(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("DisruptorClass")) {
        AmbientSound("Disruptor/Secret", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("WitchavenClass")) {
        AmbientSound("Grondoval/Secret", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("HalfLifeClass")) { // placeholder
        AmbientSound("secretfound/default", 127);
        Print(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("SWClass")) {
        AmbientSound("LoWang/Secret", 127);
        Print(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("CMClass")) {
        AmbientSound("CYBERM_SECRET1", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("JonClass")) {
        AmbientSound("Jon/KTaunt5", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("RRClass")) {
        AmbientSound("Leonard/Secret", 127);
        Print(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("BittermanClass")) {
        AmbientSound("Q2Misc/Secret", 127);
        Print(l:"SECRETFOUND_QUAKE2");
    } else if (CheckInventory("Hexen2Class")) {
        AmbientSound("Hexen2/Secret", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("BondClass")) { // placeholder
        AmbientSound("secretfound/default", 127);
        Print(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("CatacombClass")) {
        AmbientSound("Catacomb/Secret", 127);
        Log(l:"SECRETFOUND_WOLF");
    } else if (CheckInventory("PainkillerClass")) {
        AmbientSound("Painkiller/Sekret", 127);
        Log(l:"SECRETFOUND_WOLF");
    } else if (CheckInventory("UnrealClass")) {
        AmbientSound("secretfound/unreal", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("RTCWClass")) {
        AmbientSound("RTCW/Secret", 127);
        SetHudSize(640, 480, 0);
        HudMessage(l:"SECRETFOUND_RTCW"; HUDMSG_FADEOUT, 578, CR_WHITE, 320.0, 360.0, 3.0, 0.2);
    } else if (CheckInventory("Q3Class")) { // placeholder
        AmbientSound("secretfound/default", 127);
        Print(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("DescentClass")) { // placeholder
        AmbientSound("secretfound/default", 127);
        Print(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("DeusExClass")) { // placeholder
        AmbientSound("secretfound/default", 127);
        Print(l:"SECRETFOUND_DEFAULT");
    } else {
        AmbientSound("secretfound/default", 127);
        Print(l:"SECRETFOUND_DEFAULT");
    }
}

// Pistol Start Stuff!

str pistolwit[36] =
{
	"PISTOLSTART_WIT1",
	"PISTOLSTART_WIT2",
	"PISTOLSTART_WIT3",
	"PISTOLSTART_WIT4",
	"PISTOLSTART_WIT5",
	"PISTOLSTART_WIT6",
	"PISTOLSTART_WIT7",
	"PISTOLSTART_WIT8",
	"PISTOLSTART_WIT9",
	"PISTOLSTART_WIT10",
	"PISTOLSTART_WIT11",
	"PISTOLSTART_WIT12",
	"PISTOLSTART_WIT13",
	"PISTOLSTART_WIT14",
	"PISTOLSTART_WIT15",
	"PISTOLSTART_WIT16",
	"PISTOLSTART_WIT17",
	"PISTOLSTART_WIT18",
	"PISTOLSTART_WIT19",
	"PISTOLSTART_WIT20",
	"PISTOLSTART_WIT21",
	"PISTOLSTART_WIT22",
	"PISTOLSTART_WIT23",
	"PISTOLSTART_WIT24",
	"PISTOLSTART_WIT25",
	"PISTOLSTART_WIT26",
	"PISTOLSTART_WIT27",
	"PISTOLSTART_WIT28",
	"PISTOLSTART_WIT29",
	"PISTOLSTART_WIT30",
	"PISTOLSTART_WIT31",
	"PISTOLSTART_WIT32",
	"PISTOLSTART_WIT33",
	"PISTOLSTART_WIT34",
	"PISTOLSTART_WIT35",
	"PISTOLSTART_WIT36"
};

script "PistolStart" ENTER
{
	if(GetCvar("samsara_pistolstart") == 1 && (GameType () != GAME_TITLE_MAP))
	{
		// We can't do pistol starts in Hexen or Strife
		if(GetCvar("samsara_currentgame") == 8 || GetCvar("samsara_currentgame") == 16)
		{
			terminate;
		}

		if (GetCVar("samsara_moddedgame")) { terminate; }

		GiveInventory("PistolStartEnabled", 1);

		// Demoness requires special treatment for starting with the correct amount of health.
		int pln = PlayerNumber();
		switch(PlayerClass(pln))
		{
			case 25:
				SetActorProperty (0, APROP_Health, 70);
				SetActorProperty (0, APROP_SpawnHealth, 70);
				break;

			default:
				SetActorProperty (0, APROP_Health, 100);
				SetActorProperty (0, APROP_SpawnHealth, 100);
				break;
		}
		
		TakeInventory("GotWeapon0", 999);
		TakeInventory("GotWeapon2", 999);
		TakeInventory("GotWeapon3", 999);
		TakeInventory("GotWeapon4", 999);
		TakeInventory("GotWeapon5", 999);
		TakeInventory("GotWeapon6", 999);
		TakeInventory("GotWeapon7", 999);
		ACS_NamedExecuteWithResult("Samsara_ResetInventory",0,0,0,0);
		if (!(CheckInventory("QuakeClass") || CheckInventory("PainkillerClass")))
		{
			GiveInventory("Clip", 50);
		}
		
		LocalAmbientSound("misc/pistolstart", 127);
		Log(l:"PISTOLSTART_HEADER", s:" ", l:pistolwit[random(0,35)]);
	}
}

// Instead of doing multiple scripts for item messages, we'll
// do all of them in just this one
script "SamsaraPickupMessages" (int item, int subitem, int message) CLIENTSIDE
{
    int pln = PlayerNumber(); // ensure only the activator gets the messages
    int cpln = ConsolePlayerNumber();

    if (pln != cpln) { terminate; }

    str msgcolor = "\cl";
    str itemtemp = "Placeholder";

    switch (item)
    {
      // Health
      case 0:
        switch (subitem)
        {
          // Health Bonus (x1)
          case 0:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_HEALPACK0"; break;
            }
            break;

          // Maximum Health Bonus (x1)
          case 1:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_MAXHEALPACK0"; break;
            }
            break;

          // Health Bonus (x4)
          case 2:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_HEALPACK_HERETIC"; break;
            }
            break;

          // Stimpack
          case 3:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_HEALPACK1"; break;
              case 1: itemtemp = "SAMSARA_HEALPACK1_STRIFE"; break;
            }
            break;

          // Strife Med Patch
          case 4:
            switch (message)
            {
              case 0: itemtemp = "TXT_MEDPATCH"; break;
            }
            break;

          // Medikit
          case 5:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_HEALPACK2"; break;
              case 1: itemtemp = "SAMSARA_HEALPACK2_RAVEN"; break;
              case 2: itemtemp = "SAMSARA_HEALPACK2_STRIFE"; break;
              case 3: itemtemp = "SAMSARA_HEALPACK2_IPOG"; break;
              case 4: itemtemp = "SAMSARA_HEALPACK2_WITCHAVEN"; break;
              case 5: itemtemp = "SAMSARA_HEALPACK2_CYBERMAGE"; break;
              case 6: itemtemp = "SAMSARA_HEALPACK2_REDNECK"; break;
              case 7: itemtemp = "SAMSARA_HEALPACK2_REDNECKINVENTORY_1"; break;
              case 8: itemtemp = "SAMSARA_HEALPACK2_REDNECKINVENTORY_2"; break;
              case 9: itemtemp = "SAMSARA_HEALPACK2_HEXEN2_1"; break;
              case 10: itemtemp = "SAMSARA_HEALPACK2_HEXEN2_2"; break;
              case 11: itemtemp = "SAMSARA_HEALPACK2_CATACOMB"; break;
            }
            break;

          // Strife Medical Kit
          case 6:
            switch (message)
            {
              case 0: itemtemp = "TXT_MEDICALKIT"; break;
            }
            break;

          // Soulsphere
          case 7:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_HEALPACK3"; break;
              case 1: itemtemp = "SAMSARA_HEALPACK3_RAVEN"; break;
              case 2: itemtemp = "SAMSARA_HEALPACK3_DUKE"; break;
              case 3: itemtemp = "SAMSARA_HEALPACK3_DUKELAB"; break;
              case 4: itemtemp = "SAMSARA_HEALPACK3_STRIFE"; break;
              case 5: itemtemp = "SAMSARA_HEALPACK3_RMR"; break;
              case 6: itemtemp = "SAMSARA_HEALPACK3_DISRUPTOR"; break;
              case 7: itemtemp = "SAMSARA_HEALPACK3_SHADOWWARRIOR"; break;
              case 8: itemtemp = "SAMSARA_HEALPACK3_REDNECK"; break;
              case 9: itemtemp = "SAMSARA_HEALPACK3_REDNECKINVENTORY"; break;
              case 10: itemtemp = "SAMSARA_HEALPACK3_HEXEN2_1"; break;
              case 11: itemtemp = "SAMSARA_HEALPACK3_HEXEN2_2"; break;
              case 12: itemtemp = "SAMSARA_HEALPACK3_CATACOMB"; break;
              case 13: itemtemp = "SAMSARA_HEALPACK3_QUAKE3"; break;
            }
            break;

          // Strife Surgery Kit
          case 8:
            switch (message)
            {
              case 0: itemtemp = "TXT_SURGERYKIT"; break;
            }
            break;

          // Megasphere
          case 9:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_MEGAPACK"; break;
              case 1: itemtemp = "SAMSARA_MEGAPACK_CORVUS"; break;
              case 2: itemtemp = "SAMSARA_MEGAPACK_MARATHON"; break;
              case 3: itemtemp = "SAMSARA_MEGAPACK_ERADICATOR"; break;
            }
            break;

          // Wolfenstein Blood
          case 10:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_WOLFENDRINK"; break;
            }
            break;

          // Wolfenstein Chicken Leg
          case 11:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_WOLFENCHICKEN"; break;
            }
            break;
        }
        break;

      // Armor
      case 1:
        switch (subitem)
        {
          // Armor Scrap (x1)
          case 0:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_ARMORSCRAP"; break;
              case 1: itemtemp = "SAMSARA_ARMORSCRAP3"; break;
            }
            break;

          // Maximum Armor Scrap (x1)
          case 1:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_MAXARMORSCRAP"; break;
              case 1: itemtemp = "SAMSARA_MAXARMORSCRAP3"; break;
            }
            break;

          // Armor Scrap (x5)
          case 2:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_ARMORSCRAP_HERETIC"; break;
              case 1: itemtemp = "SAMSARA_ARMORSCRAP3_HERETIC"; break;
            }
            break;

          // Hexen Light Armor
          case 3:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_ARMORHEXEN"; break;
              case 1: itemtemp = "SAMSARA_ARMORHEXEN3"; break;
            }
            break;

          // Hexen Heavy Armor
          case 4:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_POWERUP_ARMOR"; break;
              case 1: itemtemp = "SAMSARA_POWERUP_ARMOR3"; break;
            }
            break;

          // Green Armor
          case 5:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_ARMOR0_1"; break;
              case 1: itemtemp = "SAMSARA_ARMOR12_1"; break;
              case 2: itemtemp = "SAMSARA_ARMOR3_1"; break;
            }
            break;

          // Strife Leather Armor
          case 6:
            switch (message)
            {
              case 0: itemtemp = "TXT_LEATHERARMOR"; break;
            }
            break;

          // Yellow Armor
          case 7:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_ARMOR0_2"; break;
              case 1: itemtemp = "SAMSARA_ARMOR12_2"; break;
              case 2: itemtemp = "SAMSARA_ARMOR3_2"; break;
            }
            break;

          // Blue Armor
          case 8:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_ARMOR0_3"; break;
              case 1: itemtemp = "SAMSARA_ARMOR12_3"; break;
              case 2: itemtemp = "SAMSARA_ARMOR3_3"; break;
            }
            break;

          // Strife Metal Armor
          case 9:
            switch (message)
            {
              case 0: itemtemp = "TXT_METALARMOR"; break;
            }
            break;

          // Red Armor
          case 10:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_ARMOR0_4"; break;
              case 1: itemtemp = "SAMSARA_ARMOR12_4"; break;
              case 2: itemtemp = "SAMSARA_ARMOR3_4"; break;
            }
            break;

          // Silver Armor
          case 11:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_ARMOR0_5"; break;
              case 1: itemtemp = "SAMSARA_ARMOR12_5"; break;
              case 2: itemtemp = "SAMSARA_ARMOR3_5"; break;
            }
            break;
        }
        break;

      // Powerups
      case 2:
        switch (subitem)
        {
          // Partial Invisibility
          case 0:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_POWERUP_INVIS"; break;
              case 1: itemtemp = "SAMSARA_POWERUP_INVIS_RAVEN"; break;
              case 2: itemtemp = "SAMSARA_POWERUP_INVIS_DUKE"; break;
              case 3: itemtemp = "SAMSARA_POWERUP_INVIS_QUAKE"; break;
              case 4: itemtemp = "SAMSARA_POWERUP_INVIS_STRIFE"; break;
              case 5: itemtemp = "SAMSARA_POWERUP_INVIS_WITCHAVEN"; break;
              case 6: itemtemp = "SAMSARA_POWERUP_INVIS_EXHUMED"; break;
              case 7: itemtemp = "SAMSARA_POWERUP_INVIS_QUAKE2_1"; break;
              case 8: itemtemp = "SAMSARA_POWERUP_INVIS_QUAKE2_2"; break;
              case 9: itemtemp = "SAMSARA_POWERUP_INVIS_HEXEN2_1"; break;
              case 10: itemtemp = "SAMSARA_POWERUP_INVIS_HEXEN2_2"; break;
              case 11: itemtemp = "SAMSARA_POWERUP_INVIS_QUAKE3"; break;
            }
            break;

          // Strife Shadow Armor
          case 1:
            switch (message)
            {
              case 0: itemtemp = "TXT_SHADOWARMOR"; break;
            }
            break;

          // Invulnerability
          case 2:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_POWERUP_INVULN"; break;
              case 1: itemtemp = "SAMSARA_POWERUP_INVULN_CORVUS"; break;
              case 2: itemtemp = "SAMSARA_POWERUP_INVULN_HEXEN"; break;
              case 3: itemtemp = "SAMSARA_POWERUP_INVULN_QUAKE"; break;
              case 4: itemtemp = "SAMSARA_POWERUP_INVULN_ROTT_1"; break;
              case 5: itemtemp = "SAMSARA_POWERUP_INVULN_ROTT_2"; break;
              case 6: itemtemp = "SAMSARA_POWERUP_INVULN_IPOG"; break;
              case 7: itemtemp = "SAMSARA_POWERUP_INVULN_EXHUMED"; break;
              case 8: itemtemp = "SAMSARA_POWERUP_INVULN_QUAKE2"; break;
              case 9: itemtemp = "SAMSARA_POWERUP_INVULN_HEXEN2_1"; break;
              case 10: itemtemp = "SAMSARA_POWERUP_INVULN_HEXEN2_2"; break;
              case 11: itemtemp = "SAMSARA_POWERUP_INVULN_CATACOMB"; break;
            }
            break;

          // Environmental Protection
          case 3:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_POWERUP_RADSUIT"; break;
              case 1: itemtemp = "SAMSARA_POWERUP_RADSUIT_ROTT"; break;
              case 2: itemtemp = "SAMSARA_POWERUP_RADSUIT_STRIFE"; break;
              case 3: itemtemp = "SAMSARA_POWERUP_RADSUIT_QUAKE2"; break;
              case 4: itemtemp = "SAMSARA_POWERUP_RADSUIT_QUAKE3"; break;
            }
            break;

          // Strife Environmental Suit
          case 4:
            switch (message)
            {
              case 0: itemtemp = "TXT_ENVSUIT"; break;
            }
            break;

          // Light Amplification
          case 5:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_POWERUP_INFRARED"; break;
              case 1: itemtemp = "SAMSARA_POWERUP_INFRARED_RAVEN"; break;
              case 2: itemtemp = "SAMSARA_POWERUP_INFRARED_DUKE"; break;
              case 3: itemtemp = "SAMSARA_POWERUP_INFRARED_ROTT"; break;
              case 4: itemtemp = "SAMSARA_POWERUP_INFRARED_BLOOD"; break;
              case 5: itemtemp = "SAMSARA_POWERUP_INFRARED_EXHUMED"; break;
              case 6: itemtemp = "SAMSARA_POWERUP_INFRARED_HEXEN2_1"; break;
              case 7: itemtemp = "SAMSARA_POWERUP_INFRARED_HEXEN2_2"; break;
            }
            break;

          // Area Map
          case 6:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_POWERUP_MAP"; break;
            }
            break;

          // Strife Map
          case 7:
            switch (message)
            {
              case 0: itemtemp = "TXT_STRIFEMAP"; break;
            }
            break;

          // Strife Scanner
          case 8:
            switch (message)
            {
              case 0: itemtemp = "TXT_SCANNER"; break;
            }
            break;

          // Full Invisibility
          case 9:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_SKULLTAG_INVIS"; break;
              case 1: itemtemp = "SAMSARA_SKULLTAG_INVIS_CORVUS"; break;
            }
            break;

          // Time Freeze
          case 10:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_SKULLTAG_TIME"; break;
              case 1: itemtemp = "SAMSARA_SKULLTAG_TIME_CORVUS"; break;
            }
            break;

          // Speed Booster
          case 11:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_SKULLTAG_TURBO"; break;
              case 1: itemtemp = "SAMSARA_SKULLTAG_TURBO_QUAKE3"; break;
            }
            break;

          // Defense Booster
          case 12:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_SKULLTAG_GUARD"; break;
              case 1: itemtemp = "SAMSARA_SKULLTAG_GUARD_CORVUS"; break;
            }
            break;

          // Damage Booster
          case 13:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_SKULLTAG_DOOM"; break;
              case 1: itemtemp = "SAMSARA_SKULLTAG_DOOM_CORVUS"; break;
              case 2: itemtemp = "SAMSARA_SKULLTAG_DOOM_QUAKE3"; break;
            }
            break;

          // Flight
          case 14:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_POWERUP_FLIGHT"; break;
              case 1: itemtemp = "SAMSARA_POWERUP_FLIGHT_RAVEN"; break;
            }
            break;

          // Teleportation
          case 15:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_POWERUP_TELEPORTSELF"; break;
              case 1: itemtemp = "SAMSARA_POWERUP_TELEPORTSELF_RAVEN"; break;
            }
            break;

          // Strength
          case 16:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_POWERUP_STRENGTH"; break;
              case 1: itemtemp = "SAMSARA_POWERUP_STRENGTH_RAVEN"; break;
            }
            break;

          // Team Power
          case 17:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_POWERUP_TEAM"; break;
            }
            break;

          // Quarter Damage
          case 18:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_POWERUP_QUARTERDMG"; break;
            }
            break;

          // Haste
          case 19:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_POWERUP_SPEED"; break;
              case 1: itemtemp = "SAMSARA_POWERUP_SPEED_RAVEN"; break;
            }
            break;

          // Banishment
          case 20:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_POWERUP_TELEPORTOTHER"; break;
              case 1: itemtemp = "SAMSARA_POWERUP_TELEPORTOTHER_RAVEN"; break;
            }
            break;

          // Crystallized Chaos Portal
          case 21:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_BEACON_HEXEN"; break;
            }
            break;

          // Teleporter Beacon
          case 22:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_BEACON_STRIFE"; break;
            }
            break;
        }
        break;

      // Ammo
      case 3:
        switch (subitem)
        {
          // Small Ammo 1
          case 0:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_CLIP_1"; break;
              case 1: itemtemp = "SAMSARA_CLIPDROP_DOOM"; break;
              case 2: itemtemp = "SAMSARA_CLIPDROP_HERETIC_1"; break;
              case 3: itemtemp = "SAMSARA_CLIPDROP_HERETIC_2"; break;
              case 4: itemtemp = "SAMSARA_CLIPDROP_STRIFE"; break;
            }
            break;

          // Medium Ammo 1
          case 1:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_CLIP_2"; break;
            }
            break;

          // Large Ammo 1
          case 2:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_CLIP_3"; break;
            }
            break;

          // Small Ammo 2
          case 3:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_SHELL_1"; break;
              case 1: itemtemp = "SAMSARA_SHELLDROP_HERETIC_1"; break;
              case 2: itemtemp = "SAMSARA_SHELLDROP_HERETIC_2"; break;
            }
            break;

          // Medium Ammo 2
          case 4:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_SHELL_2"; break;
            }
            break;

          // Large Ammo 2
          case 5:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_SHELL_3"; break;
            }
            break;

          // Small Ammo 3
          case 6:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_ROCKET_1"; break;
              case 1: itemtemp = "SAMSARA_ROCKETDROP_HERETIC_1"; break;
              case 2: itemtemp = "SAMSARA_ROCKETDROP_HERETIC_2"; break;
            }
            break;

          // Medium Ammo 3
          case 7:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_ROCKET_2"; break;
            }
            break;

          // Large Ammo 3
          case 8:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_ROCKET_3"; break;
            }
            break;

          // Small Ammo 4
          case 9:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_CELL_1"; break;
              case 1: itemtemp = "SAMSARA_CELLDROP_HERETIC"; break;
              case 2: itemtemp = "SAMSARA_CELLDROP_STRIFE"; break;
            }
            break;

          // Medium Ammo 4
          case 10:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_CELL_2"; break;
            }
            break;

          // Large Ammo 4
          case 11:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_CELL_3"; break;
            }
            break;

          // Ammo Expansion Pack
          case 12:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_BACKPACK"; break;
              case 1: itemtemp = "SAMSARA_BACKPACK_HEXEN"; break;
              case 2: itemtemp = "SAMSARA_BACKPACK_HEXEN2_1"; break;
              case 3: itemtemp = "SAMSARA_BACKPACK_HEXEN2_2"; break;
              case 4: itemtemp = "SAMSARA_BACKPACK_QUAKE3"; break;
            }
            break;

          // Ammo 1/2
          case 13:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_CLIPSHELL_HEXEN"; break;
            }
            break;

          // Ammo 3/4
          case 14:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_ROCKETCELL_HEXEN"; break;
            }
            break;

          // All Ammo
          case 15:
            switch (message)
            {
              case 0: itemtemp = "SAMSARA_ALLAMMO_HEXEN"; break;
              case 1: itemtemp = "SAMSARA_ALLAMMO_STRIFE_1"; break;
              case 2: itemtemp = "SAMSARA_ALLAMMO_STRIFE_2"; break;
            }
            break;
        }
        break;

      // Other
      case 4:
        switch (subitem)
        {
          // Sigil
          case 0:
            switch (message)
            {
              case 0: itemtemp = "TXT_SIGIL"; break;
            }
            break;
        }
        break;

      // Mixer health pickups
      case 5:
        switch (subitem)
        {
          // Blood Life Essence
          case 0:
            switch (message)
            {
              case 0: itemtemp = "REMIXER_HEALTH_BLOOD"; break;
            }
            break;

          // PowerSlave/Exhumed Soul Health
          case 1:
            switch (message)
            {
              case 0: itemtemp = "REMIXER_HEALTH_EXHUMED"; break;
            }
            break;
        }
        break;

      // Mixer armor pickups
      case 6:
        switch (subitem)
        {
          // Duke Used Armor
          case 0:
            switch (message)
            {
              case 0: itemtemp = "REMIXER_ARMOR_DUKE"; break;
            }
            break;

          // Witchaven Adamantine Ring
          case 1:
            switch (message)
            {
              case 0: itemtemp = "REMIXER_ARMOR_WITCHAVEN"; break;
            }
            break;
        }
        break;

      // Mixer ammo pickups
      case 7:
        switch (subitem)
        {
          // Small Ammo 1
          case 0:
            switch (message)
            {
              case 0: itemtemp = "REMIXER_CLIP_TOTENKOPF"; break;
              case 1: itemtemp = "REMIXER_CLIP_EXHUMED"; break;
              case 2: itemtemp = "REMIXER_CLIP_REDNECK_1"; break;
              case 3: itemtemp = "REMIXER_CLIP_GOLDENEYE_1"; break;
              case 4: itemtemp = "REMIXER_CLIP_GOLDENEYE_2"; break;
              case 5: itemtemp = "REMIXER_CLIP_GOLDENEYE_3"; break;
              case 6: itemtemp = "REMIXER_CLIP_GOLDENEYE_4"; break;
              case 7: itemtemp = "REMIXER_CLIP_GOLDENEYE_10"; break;
              case 8: itemtemp = "REMIXER_CLIP_GOLDENEYE_11"; break;
              case 9: itemtemp = "REMIXER_CLIP_GOLDENEYE_12"; break;
            }
            break;

          // Large Ammo 1
          case 1:
            switch (message)
            {
              case 0: itemtemp = "REMIXER_CLIP_REDNECK_2"; break;
              case 1: itemtemp = "REMIXER_CLIP_QUAKE2"; break;
              case 2: itemtemp = "REMIXER_CLIP_GOLDENEYE_5"; break;
              case 3: itemtemp = "REMIXER_CLIP_GOLDENEYE_6"; break;
              case 4: itemtemp = "REMIXER_CLIP_GOLDENEYE_7"; break;
              case 5: itemtemp = "REMIXER_CLIP_GOLDENEYE_8"; break;
              case 6: itemtemp = "REMIXER_CLIP_GOLDENEYE_9"; break;
            }
            break;

          // Small Ammo 2
          case 2:
            switch (message)
            {
              case 0: itemtemp = "REMIXER_SHELL_EXHUMED"; break;
              case 1: itemtemp = "REMIXER_SHELL_REDNECK"; break;
              case 2: itemtemp = "REMIXER_SHELL_GOLDENEYE_1"; break;
              case 3: itemtemp = "REMIXER_SHELL_GOLDENEYE_2"; break;
            }
            break;

          // Large Ammo 2
          case 3:
            switch (message)
            {
              case 0: itemtemp = "REMIXER_SHELL_QUAKE2"; break;
            }
            break;

          // Small Ammo 3
          case 4:
            switch (message)
            {
              case 0: itemtemp = "REMIXER_ROCKET_GOLDENEYE"; break;
            }
            break;

          // Large Ammo 3
          case 5:
            switch (message)
            {
              case 0: itemtemp = "REMIXER_ROCKET_QUAKE2"; break;
            }
            break;

          // Small Ammo 4
          case 6:
            switch (message)
            {
              case 0: itemtemp = "REMIXER_CELL_QUAKE2_1"; break;
            }
            break;

          // Large Ammo 4
          case 7:
            switch (message)
            {
              case 0: itemtemp = "REMIXER_CELL_QUAKE2_2"; break;
              case 1: itemtemp = "REMIXER_CELL_GOLDENEYE"; break;
            }
            break;

          // All Ammo
          case 8:
            switch (message)
            {
              case 0: itemtemp = "REMIXER_ALLAMMO_GOLDENEYE"; break;
            }
            break;
        }
        break;
    }

    switch (GetCVar("msg0color"))
    {
      default: msgcolor = "\ca"; break;
      case 1: msgcolor = "\cb"; break;
      case 2: msgcolor = "\cc"; break;
      case 3: msgcolor = "\cd"; break;
      case 4: msgcolor = "\ce"; break;
      case 5: msgcolor = "\cf"; break;
      case 6: msgcolor = "\cg"; break;
      case 7: msgcolor = "\ch"; break;
      case 8: msgcolor = "\ci"; break;
      case 9: msgcolor = "\cj"; break;
      case 10: msgcolor = "\ck"; break;
      case 11: msgcolor = "\cl"; break;
      case 12: msgcolor = "\cm"; break;
      case 13: msgcolor = "\cn"; break;
      case 14: msgcolor = "\co"; break;
      case 15: msgcolor = "\cp"; break;
      case 16: msgcolor = "\cq"; break;
      case 17: msgcolor = "\cr"; break;
      case 18: msgcolor = "\cs"; break;
      case 19: msgcolor = "\ct"; break;
      case 20: msgcolor = "\cu"; break;
      case 21: msgcolor = "\cv"; break;
      case 22: msgcolor = "\cw"; break;
      case 23: msgcolor = "\cx"; break;
      case 24: msgcolor = "\cy"; break;
      case 25: msgcolor = "\cz"; break;
    }

    Log(s:msgcolor, l:itemtemp);
}

script "SamsaraPickupAnnouncerSounds" (int item) CLIENTSIDE
{
    int pln = PlayerNumber(); // ensure only the activator gets the sounds
    int cpln = ConsolePlayerNumber();

    if (isZDoom() || pln != cpln) { terminate; }

    str annsound = "Placeholder";

    switch (item)
    {
      case 0: annsound = "soulsphere"; break;
      case 1: annsound = "megasphere"; break;
      case 2: annsound = "partialinvisibility"; break;
      case 3: annsound = "invulnerability"; break;
      case 4: annsound = "invisibility"; break;
      case 5: annsound = "timefreeze"; break;
      case 6: annsound = "turbosphere"; break;
      case 7: annsound = "guardsphere"; break;
      case 8: annsound = "doomsphere"; break;
      case 9: annsound = "strength"; break;
      case 10: annsound = "haste"; break;
    }

    AnnouncerSound(annsound, 0);
}
