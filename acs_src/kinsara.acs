//======================================================================================================================
//													Compile this
//======================================================================================================================

#library "kinsara"
#include "zcommon.acs"
#include "commonFuncs.acs"

// A handy method of detecting what Source Port you're using and using appropriate
// scripts for it. Thanks to TheZombieKiller!
// [tv50] GetTimeProperty is a new function in Zandronum that is treated as a dummy
// [tv50] in ZDoom, returning 0 there (as opposed to 1970 in Zandronum with the
// [tv50] parameters chosen). Compared to previous methods, no side effects have
// [tv50] come from this, so this should be used for checking the current source port.

script "IsThisZandro" OPEN
{
	if (GetTimeProperty(0, 5, true) == 0) // TM_YEAR = 5
	{
        //Log(s:"Zandronum check unsuccessful, assuming ZDoom.");
        SetCVar("samsara_runninginzandro",0);
        SetCVar("samsara_runninginzdoom",1);
    } else {
        //Log(s:"Zandronum check successful.");
        SetCVar("samsara_runninginzandro",1);
        SetCVar("samsara_runninginzdoom",0);
    }
}

Script "CanUZScript" OPEN
{
	if(SpawnForced("SamsaraCanUZScript",0,0,0,0,0))
		SetCVAR("samsara_zscriptready",1);
	else
		SetCVAR("samsara_zscriptready",0);
}

Script "ReMixerLoaded" OPEN
{
	if(SpawnForced("SamsaraMixerLoadedToken",0,0,0,0,0))
		SetCVAR("samsara_mixerloaded",1);
	else
		SetCVAR("samsara_mixerloaded",0);
}

// If running in ZDoom, mirror Zandro options to the ZDoom cvars so I don't have
// to define them twice in the menu.
script "ZDoomOptionMirror" ENTER
{
	If (GetCVar("samsara_runninginzdoom") == 1)
	{
		SetCVar("samsara_zd_expparticles",GetCVar("samsara_cl_expparticles"));
		SetCVar("samsara_zd_pickupmode",GetCVar("samsara_cl_pickupmode"));
		SetCVar("samsara_zd_noadditivepickups",GetCVar("samsara_cl_noadditivepickups"));
		SetCVar("samsara_zd_bloodyhell",GetCVar("samsara_cl_bloodyhell"));
		SetCVar("samsara_zd_bloodypersistent",GetCVar("samsara_cl_bloodypersistent"));
		delay(1);
		restart;
	}
}

// Fancy per-class secret notifications
script "SecretNotifier" ENTER
{
    int stotal;
    int sfound;
    int sfound2;

    stotal = GetLevelInfo(LEVELINFO_TOTAL_SECRETS); // Dunno if secret number can increase, though.
    sfound2 = sfound;
    sfound = GetLevelInfo(LEVELINFO_FOUND_SECRETS);

    bool showmsgs = true;

    if (GetTimeProperty(0, 5, true) == 0 && !GetCVar("cl_showsecretmessage") && !GetCVar("samsara_cl_showsecretmessage")) { showmsgs = false; }

    // Found a secret.
    if (sfound > sfound2)
    {
        if (showmsgs) { ACS_NamedExecuteWithResult("SecretNotifierDisplay", sfound, stotal); }

        if (CheckInventory("WolfenClass"))
        {
            if (CheckInventory("WolfenClassMode") == 2) { GiveInventory("TotenkopfSecretCounter", 1); } // Castle Totenkopf SDL
        } else if (CheckInventory("DukeClass")) {
            if (showmsgs) { ACS_NamedExecuteWithResult("SecretNotifierDukeTaunt"); } // don't let the delay get in the way of this script
        } else if (CheckInventory("CalebClass")) {
            if (!CheckInventory("CalebBallgag") && !CheckInventory("CalebTauntCooldown") && showmsgs)
            {
                LocalAmbientSound("Blood/Secret", 127);
                GiveInventory("CalebTauntCooldown", 5);
                ACS_NamedExecuteAlways("CalebTauntCooldown", 0);
            }
        } else if (CheckInventory("EradClass")) {
            if (!CheckInventory("EleenaBallgag") && !CheckInventory("EleenaTauntCooldown") && showmsgs)
            {
                switch (CheckInventory("EradMode"))
                {
                  case 0: // Eleena Brynstaarl
                    LocalAmbientSound("Eleena/Secret", 127);
                    break;

                  case 1: // Kamchak
                    LocalAmbientSound("Kamchak/Secret", 127);
                    break;

                  case 2: // Dan Blaze
                    LocalAmbientSound("DanBlaze/Secret", 127);
                    break;
                }

                GiveInventory("EleenaTauntCooldown", 5);
                ACS_NamedExecuteAlways("EleenaTauntCooldown", 0);
            }
        } else if (CheckInventory("SWClass")) {
            if (!CheckInventory("LoWangBallgag") && !CheckInventory("LoWangTauntCooldown") && showmsgs)
            {
                LocalAmbientSound("SW/Secret", 127);
                GiveInventory("LoWangTauntCooldown", 5);
                ACS_NamedExecuteAlways("LoWangTauntCooldown", 0);
            }
        } else if (CheckInventory("RRClass")) {
            if (!CheckInventory("LeonardBallgag") && !CheckInventory("LeonardTauntCooldown") && showmsgs)
            {
                LocalAmbientSound("RR/Secret", 127);
                GiveInventory("LeonardTauntCooldown", 5);
                ACS_NamedExecuteAlways("LeonardTauntCooldown", 0);
            }
        }
    }

    Delay(1);
    restart;
}

script "SecretNotifierDukeTaunt" (void)
{
    Delay(10);

    if (!CheckInventory("DukeBallgag") && !CheckInventory("DukeTauntCooldown"))
    {
        LocalAmbientSound("duke/secret", 127);
        GiveInventory("DukeTauntCooldown", 5);
        ACS_NamedExecuteAlways("DukeTauntCooldown", 0);
    }
}

script "SecretNotifierDisplay" (int sfound, int stotal) CLIENTSIDE
{
	int pln = PlayerNumber(); // ensure only the activator gets the messages
	int cpln = ConsolePlayerNumber();

    if (pln != cpln) { terminate; }

    if (CheckInventory("DoomguyClass"))
    {
        if (CheckInventory("DoomClassMode") == 1) // Doom 64
        {
            AmbientSound("doom64guy/secret", 127);
            Log(l:"SECRETFOUND_DOOM64");
        } else { // Original/Stronghold
            AmbientSound("secretfound/doom", 127);
            Log(l:"SECRETFOUND_DOOM");
        }
    } else if (CheckInventory("ChexClass")) {
        AmbientSound("secretfound/chex", 127);
        Log(l:"SECRETFOUND_CHEX");
    } else if (CheckInventory("CorvusClass")) {
        AmbientSound("secretfound/heretic", 127);
        Log(l:"SECRETFOUND_RAVEN");
    } else if (CheckInventory("WolfenClass")) {
        if (CheckInventory("WolfenClassMode") == 2) // Castle Totenkopf SDL
        {
            AmbientSound("Totenkopf/Bonus", 127);
            Log(l:"SECRETFOUND_TOTENKOPF");
        } else { // Original/Lost Missions
            AmbientSound("secretfound/wolf", 127);
            Log(l:"SECRETFOUND_WOLF");
        }
    } else if (CheckInventory("HexenClass")) {
        if (sfound >= stotal)
        {
            AmbientSound("secretfound/PuzzleSuccess", 127);
            Print(s:"\cjYou have completed the puzzle of the secrets in ", n:PRINTNAME_LEVELNAME, s:".");
        } else {
            AmbientSound("secretfound/SwitchOtherLevel", 127);
            Print(s:"\cjYou have found ", i:sfound, s:" of the ", i:stotal, s:" secrets in ", n:PRINTNAME_LEVELNAME, s:".");
        }
    } else if (CheckInventory("DukeClass")) {
        AmbientSound("secretfound/duke", 127);
        SetHudSize(400, 300, 0);
        HudMessage(l:"SECRETFOUND_DUKE"; HUDMSG_PLAIN, 1, CR_LIGHTBLUE, 200.4, 9.1, 2.0);
    } else if (CheckInventory("MarathonClass")) {
        AmbientSound("secretfound/marathon", 127);
        Log(l:"SECRETFOUND_MARATHON");
    } else if (CheckInventory("QuakeClass")) {
        AmbientSound("secretfound/quake", 127);
        Print(l:"SECRETFOUND_QUAKE");
    } else if (CheckInventory("RottClass")) {
        AmbientSound("Freely/Secret", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("BlakeClass")) {
        AmbientSound("Blake/Secret", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("CalebClass")) {
        AmbientSound("Caleb/Secret", 127);
        Print(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("StrifeClass")) {
        AmbientSound("Strife/Secret", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("EradClass")) {
        AmbientSound("Eradicator/Secret", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("C7Class")) {
        AmbientSound("C7/Secret", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("RMRClass")) {
        AmbientSound("RMR/Secret", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("KatarnClass")) {
        AmbientSound("Kyle/Secret", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("POGreedClass")) { // placeholder
        AmbientSound("secretfound/default", 127);
        Print(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("DisruptorClass")) {
        AmbientSound("Disruptor/Secret", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("WitchavenClass")) {
        AmbientSound("Grondoval/Secret", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("HalfLifeClass")) { // placeholder
        AmbientSound("secretfound/default", 127);
        Print(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("SWClass")) {
        AmbientSound("LoWang/Secret", 127);
        Print(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("CMClass")) {
        AmbientSound("CYBERM_SECRET1", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("JonClass")) {
        AmbientSound("Jon/KTaunt5", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("RRClass")) {
        AmbientSound("Leonard/Secret", 127);
        Print(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("BittermanClass")) {
        AmbientSound("Q2Misc/Secret", 127);
        Print(l:"SECRETFOUND_QUAKE2");
    } else if (CheckInventory("Hexen2Class")) {
        AmbientSound("Hexen2/Secret", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("BondClass")) { // placeholder
        AmbientSound("secretfound/default", 127);
        Print(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("CatacombClass")) {
        AmbientSound("Catacomb/Secret", 127);
        Log(l:"SECRETFOUND_WOLF");
    } else if (CheckInventory("PainkillerClass")) {
        AmbientSound("Painkiller/Sekret", 127);
        Log(l:"SECRETFOUND_WOLF");
    } else if (CheckInventory("UnrealClass")) {
        AmbientSound("secretfound/unreal", 127);
        Log(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("RTCWClass")) {
        AmbientSound("RTCW/Secret", 127);
        SetHudSize(640, 480, 0);
        HudMessage(l:"SECRETFOUND_RTCW"; HUDMSG_FADEOUT, 578, CR_WHITE, 320.0, 360.0, 3.0, 0.2);
    } else if (CheckInventory("Q3Class")) { // placeholder
        AmbientSound("secretfound/default", 127);
        Print(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("DescentClass")) { // placeholder
        AmbientSound("secretfound/default", 127);
        Print(l:"SECRETFOUND_DEFAULT");
    } else if (CheckInventory("DeusExClass")) { // placeholder
        AmbientSound("secretfound/default", 127);
        Print(l:"SECRETFOUND_DEFAULT");
    } else {
        AmbientSound("secretfound/default", 127);
        Print(l:"SECRETFOUND_DEFAULT");
    }
}

// don't get too brutal, kid
script "BrutalChecker" ENTER
{
    int s = unusedTID(37000, 47000);

    if (SpawnForced("Brutal_Blood",0,0,0,s,0))
	{
		SetFont("BIGFONT");
		HudMessage(s:"Hello! You seem to have Brutal Doom\n
		loaded at the same time as Samsara Reincarnation.\n
		This may cause bugs and glitches.\n
		Please understand.";
		HUDMSG_TYPEON | HUDMSG_LOG, 0, CR_TAN, 1.5, 0.8, 5.0,
		0.05, 2.0);
		PlaySound(0,"LLoyd/MostAnnoyingSound",CHAN_6,1.0,false,ATTN_NONE);
		Delay(13);
		PlaySound(0,"LLoyd/MostAnnoyingSoundLoop",CHAN_6,1.0,true,ATTN_NONE);
    }
}

// Pistol Start Stuff!

str pistolwit[36] =
{
	"PISTOLSTART_WIT1",
	"PISTOLSTART_WIT2",
	"PISTOLSTART_WIT3",
	"PISTOLSTART_WIT4",
	"PISTOLSTART_WIT5",
	"PISTOLSTART_WIT6",
	"PISTOLSTART_WIT7",
	"PISTOLSTART_WIT8",
	"PISTOLSTART_WIT9",
	"PISTOLSTART_WIT10",
	"PISTOLSTART_WIT11",
	"PISTOLSTART_WIT12",
	"PISTOLSTART_WIT13",
	"PISTOLSTART_WIT14",
	"PISTOLSTART_WIT15",
	"PISTOLSTART_WIT16",
	"PISTOLSTART_WIT17",
	"PISTOLSTART_WIT18",
	"PISTOLSTART_WIT19",
	"PISTOLSTART_WIT20",
	"PISTOLSTART_WIT21",
	"PISTOLSTART_WIT22",
	"PISTOLSTART_WIT23",
	"PISTOLSTART_WIT24",
	"PISTOLSTART_WIT25",
	"PISTOLSTART_WIT26",
	"PISTOLSTART_WIT27",
	"PISTOLSTART_WIT28",
	"PISTOLSTART_WIT29",
	"PISTOLSTART_WIT30",
	"PISTOLSTART_WIT31",
	"PISTOLSTART_WIT32",
	"PISTOLSTART_WIT33",
	"PISTOLSTART_WIT34",
	"PISTOLSTART_WIT35",
	"PISTOLSTART_WIT36"
};

script "PistolStart" ENTER
{
	if(GetCvar("samsara_pistolstart") == 1 && (GameType () != GAME_TITLE_MAP))
	{
		// We can't do pistol starts in Hexen or Strife
		if(GetCvar("samsara_currentgame") == 8 || GetCvar("samsara_currentgame") == 16)
		{
			terminate;
		}
		
		GiveInventory("PistolStartEnabled", 1);
		
		SetActorProperty (0, APROP_Health, 100);
		
		// Demoness requires special treatment for starting with the correct amount of health.
		int pln = PlayerNumber();
		switch(PlayerClass(pln))
		{
			case 25:
				SetActorProperty (0, APROP_Health, 70);
				break;
		}
		
		TakeInventory("GotWeapon0", 999);
		TakeInventory("GotWeapon2", 999);
		TakeInventory("GotWeapon3", 999);
		TakeInventory("GotWeapon4", 999);
		TakeInventory("GotWeapon5", 999);
		TakeInventory("GotWeapon6", 999);
		TakeInventory("GotWeapon7", 999);
		ACS_NamedExecuteWithResult("Samsara_ResetInventory",0,0,0,0);
		if (!(CheckInventory("QuakeClass") || CheckInventory("PainkillerClass")))
		{
			GiveInventory("Clip", 50);
		}
		
		LocalAmbientSound("misc/pistolstart", 127);
		Log(l:"PISTOLSTART_HEADER", s:" ", l:pistolwit[random(0,35)]);
	}
}

// Give IDKFA Users the proper inventory tokens for the top bar
// this is basically copypasted from metadoom sorry
script "InventoryCheat" (void)
{
	GiveInventory("GotWeapon0", 1);
	GiveInventory("GotWeapon2", 1);
	GiveInventory("GotWeapon3", 1);
	GiveInventory("GotWeapon4", 1);
	GiveInventory("GotWeapon5", 1);
	GiveInventory("GotWeapon6", 1);
	GiveInventory("GotWeapon7", 1);
	TakeInventory("MetaCheatDetector",1);
	ACS_NamedExecuteWithResult("Samsara_FillInventory",0,0,0,0);
}

// Instead of doing multiple scripts for item messages, we'll
// do all of them in two scripts
script "SamsaraPickupMessages" (int item) CLIENTSIDE
{
	int pln = PlayerNumber(); // ensure only the activator gets the messages
	int cpln = ConsolePlayerNumber();

    if (pln != cpln) { terminate; }

	int colortemp = GetCvar("msg0color");
	str msgcolor = "";
	str itemtemp = "";

	// I tried using an array, but it didn't work out. I'll have to use switch cases, which
	// aren't as pretty looking or compact.
	switch(item)
	{
	case 0:
		itemtemp = "SAMSARA_HEALPACK0";
		break;
	case 1:
		itemtemp = "SAMSARA_HEALPACK_HERETIC";
		break;
	case 2:
		itemtemp = "SAMSARA_HEALPACK1";
		break;
	case 3:
		itemtemp = "SAMSARA_HEALPACK1_STRIFE";
		break;
	case 4:
		itemtemp = "SAMSARA_HEALPACK2";
		break;
	case 5:
		itemtemp = "SAMSARA_HEALPACK2_RAVEN";
		break;
	case 6:
		itemtemp = "SAMSARA_HEALPACK2_STRIFE";
		break;
	case 7:
		itemtemp = "SAMSARA_HEALPACK2_IPOG";
		break;
	case 8:
		itemtemp = "SAMSARA_HEALPACK2_WITCHAVEN";
		break;
	case 9:
		itemtemp = "SAMSARA_HEALPACK2_CYBERMAGE";
		break;
	case 10:
		itemtemp = "SAMSARA_HEALPACK2_REDNECK";
		break;
	case 11:
		itemtemp = "SAMSARA_HEALPACK2_CATACOMB";
		break;
	case 12:
		itemtemp = "SAMSARA_HEALPACK3";
		break;
	case 13:
		itemtemp = "SAMSARA_HEALPACK3_RAVEN";
		break;
	case 14:
		itemtemp = "SAMSARA_HEALPACK3_DUKE";
		break;
	case 15:
		itemtemp = "SAMSARA_HEALPACK3_STRIFE";
		break;
	case 16:
		itemtemp = "SAMSARA_HEALPACK3_SHADOWWARRIOR";
		break;
	case 17:
		itemtemp = "SAMSARA_HEALPACK3_REDNECK";
		break;
	case 18:
		itemtemp = "SAMSARA_HEALPACK3_CATACOMB";
		break;
	case 19:
		itemtemp = "SAMSARA_MEGAPACK";
		break;
	case 20:
		itemtemp = "SAMSARA_MEGAPACK_CORVUS";
		break;
	case 21:
		itemtemp = "SAMSARA_MEGAPACK_MARATHON";
		break;
	case 22:
		itemtemp = "SAMSARA_ARMORSCRAP";
		break;
	case 23:
		itemtemp = "SAMSARA_ARMORSCRAP3";
		break;
	case 24:
		itemtemp = "SAMSARA_ARMOR0_1";
		break;
	case 25:
		itemtemp = "SAMSARA_ARMOR0_2";
		break;
	case 26:
		itemtemp = "SAMSARA_ARMOR0_3";
		break;
	case 27:
		itemtemp = "SAMSARA_ARMOR0_4";
		break;
	case 28:
		itemtemp = "SAMSARA_ARMOR12_1";
		break;
	case 29:
		itemtemp = "SAMSARA_ARMOR12_2";
		break;
	case 30:
		itemtemp = "SAMSARA_ARMOR12_3";
		break;
	case 31:
		itemtemp = "SAMSARA_ARMOR12_4";
		break;
	case 32:
		itemtemp = "SAMSARA_ARMOR3_1";
		break;
	case 33:
		itemtemp = "SAMSARA_ARMOR3_2";
		break;
	case 34:
		itemtemp = "SAMSARA_ARMOR3_3";
		break;
	case 35:
		itemtemp = "SAMSARA_ARMOR3_4";
		break;
	case 36:
		itemtemp = "SAMSARA_ARMORSCRAP_HERETIC";
		break;
	case 37:
		itemtemp = "SAMSARA_ARMORSCRAP3_HERETIC";
		break;
	case 38:
		itemtemp = "SAMSARA_ARMORHEXEN";
		break;
	case 39:
		itemtemp = "SAMSARA_ARMOR3HEXEN";
		break;
	case 40:
		itemtemp = "SAMSARA_POWERUP_ARMOR";
		break;
	case 41:
		itemtemp = "SAMSARA_POWERUP_ARMOR3";
		break;
	case 42:
		itemtemp = "SAMSARA_HEALPACK_TI";
		break;
	case 43:
		itemtemp = "SAMSARA_ARMORSCRAP_TI";
		break;
	case 44:
		itemtemp = "SAMSARA_ARMORSCRAP3_TI";
		break;
	case 45:
		itemtemp = "SAMSARA_POWERUP_INVIS";
		break;
	case 46:
		itemtemp = "SAMSARA_POWERUP_INVIS_RAVEN";
		break;
	case 47:
		itemtemp = "SAMSARA_POWERUP_INVIS_DUKE";
		break;
	case 48:
		itemtemp = "SAMSARA_POWERUP_INVIS_STRIFE";
		break;
	case 49:
		itemtemp = "SAMSARA_POWERUP_INVIS_WITCHAVEN";
		break;
	case 50:
		itemtemp = "SAMSARA_POWERUP_INVIS_EXHUMED";
		break;
	case 51:
		itemtemp = "SAMSARA_POWERUP_INVIS_QUAKE2";
		break;
	case 52:
		itemtemp = "SAMSARA_POWERUP_INVULN";
		break;
	case 53:
		itemtemp = "SAMSARA_POWERUP_INVULN_CORVUS";
		break;
	case 54:
		itemtemp = "SAMSARA_POWERUP_INVULN_HEXEN";
		break;
	case 55:
		itemtemp = "SAMSARA_POWERUP_INVULN_ROTT";
		break;
	case 56:
		itemtemp = "SAMSARA_POWERUP_INVULN_IPOG";
		break;
	case 57:
		itemtemp = "SAMSARA_POWERUP_INVULN_EXHUMED";
		break;
	case 58:
		itemtemp = "SAMSARA_POWERUP_INVULN_CATACOMB";
		break;
	case 59:
		itemtemp = "SAMSARA_POWERUP_RADSUIT";
		break;
	case 60:
		itemtemp = "SAMSARA_POWERUP_INFRARED";
		break;
	case 61:
		itemtemp = "SAMSARA_POWERUP_INFRARED_RAVEN";
		break;
	case 62:
		itemtemp = "SAMSARA_POWERUP_INFRARED_DUKE";
		break;
	case 63:
		itemtemp = "SAMSARA_POWERUP_INFRARED_BLOOD";
		break;
	case 64:
		itemtemp = "SAMSARA_POWERUP_INFRARED_EXHUMED";
		break;
	case 65:
		itemtemp = "SAMSARA_POWERUP_INVIS_QUAKE";
		break;
	case 66:
		itemtemp = "SAMSARA_POWERUP_INVULN_QUAKE";
		break;
	case 67:
		itemtemp = "SAMSARA_CLIP_1";
		break;
	case 68:
		itemtemp = "SAMSARA_CLIP_2";
		break;
	case 69:
		itemtemp = "SAMSARA_SHELL_1";
		break;
	case 70:
		itemtemp = "SAMSARA_SHELL_2";
		break;
	case 71:
		itemtemp = "SAMSARA_ROCKET_1";
		break;
	case 72:
		itemtemp = "SAMSARA_ROCKET_2";
		break;
	case 73:
		itemtemp = "SAMSARA_CELL_1";
		break;
	case 74:
		itemtemp = "SAMSARA_CELL_2";
		break;
	case 75:
		itemtemp = "SAMSARA_BACKPACK";
		break;
	case 76:
		itemtemp = "SAMSARA_CLIPDROP_DOOM";
		break;
	case 77:
		itemtemp = "SAMSARA_CLIPDROP_HERETIC_1";
		break;
	case 78:
		itemtemp = "SAMSARA_CLIPDROP_HERETIC_2";
		break;
	case 79:
		itemtemp = "SAMSARA_SHELLDROP_HERETIC_1";
		break;
	case 80:
		itemtemp = "SAMSARA_SHELLDROP_HERETIC_2";
		break;
	case 81:
		itemtemp = "SAMSARA_ROCKETDROP_HERETIC_1";
		break;
	case 82:
		itemtemp = "SAMSARA_ROCKETDROP_HERETIC_2";
		break;
	case 83:
		itemtemp = "SAMSARA_CELLDROP_HERETIC";
		break;
	case 84:
		itemtemp = "SAMSARA_CLIPSHELL_HEXEN";
		break;
	case 85:
		itemtemp = "SAMSARA_ROCKETCELL_HEXEN";
		break;
	case 86:
		itemtemp = "SAMSARA_ALLAMMO_HEXEN";
		break;
	case 87:
		itemtemp = "SAMSARA_CLIPDROP_STRIFE";
		break;
	case 88:
		itemtemp = "SAMSARA_SHELL_STRIFE";
		break;
	case 89:
		itemtemp = "SAMSARA_ROCKET_STRIFE";
		break;
	case 90:
		itemtemp = "SAMSARA_ALLAMMO_STRIFE_1";
		break;
	case 91:
		itemtemp = "SAMSARA_ALLAMMO_STRIFE_2";
		break;
	case 92:
		itemtemp = "TXT_SIGIL";
		break;
	case 93:
		itemtemp = "SAMSARA_POWERUP_DAMAGE";
		break;
	case 94:
		itemtemp = "SAMSARA_POWERUP_TORCH";
		break;
	case 95:
		itemtemp = "SAMSARA_POWERUP_FLIGHT";
		break;
	case 96:
		itemtemp = "SAMSARA_POWERUP_TELEPORTSELF";
		break;
	case 97:
		itemtemp = "SAMSARA_POWERUP_SPEED";
		break;
	case 98:
		itemtemp = "SAMSARA_POWERUP_TELEPORTOTHER";
		break;
	case 99:
		itemtemp = "SAMSARA_POWERUP_ARMOR";
		break;
	case 100:
		itemtemp = "SAMSARA_POWERUP_ARMOR3";
		break;
	case 101:
		itemtemp = "SAMSARA_ARMORHEXEN";
		break;
	case 102:
		itemtemp = "SAMSARA_ARMOR3HEXEN";
		break;
	case 103:
		itemtemp = "SAMSARA_POWERUP_MAP";
		break;
	case 104:
		itemtemp = "SAMSARA_SKULLTAG_INVIS";
		break;
	case 105:
		itemtemp = "SAMSARA_SKULLTAG_TIME";
		break;
	case 106:
		itemtemp = "SAMSARA_SKULLTAG_TURBO";
		break;
	case 107:
		itemtemp = "SAMSARA_SKULLTAG_GUARD";
		break;
	case 108:
		itemtemp = "SAMSARA_SKULLTAG_DOOM";
		break;
	}
	
	/* Keep it just in case
	str strings[107] = { "SAMSARA_HEALPACK0", "SAMSARA_HEALPACK_HERETIC", "SAMSARA_HEALPACK1", "SAMSARA_HEALPACK1_STRIFE",
	"SAMSARA_HEALPACK2", "SAMSARA_HEALPACK2_RAVEN", "SAMSARA_HEALPACK2_STRIFE", "SAMSARA_HEALPACK2_IPOG", "SAMSARA_HEALPACK2_WITCHAVEN",
	"SAMSARA_HEALPACK2_CYBERMAGE", "SAMSARA_HEALPACK2_REDNECK", "SAMSARA_HEALPACK2_CATACOMB", "SAMSARA_HEALPACK3", "SAMSARA_HEALPACK3_RAVEN",
	"SAMSARA_HEALPACK3_DUKE", "SAMSARA_HEALPACK3_STRIFE", "SAMSARA_HEALPACK3_SHADOWWARRIOR", "SAMSARA_HEALPACK3_REDNECK", "SAMSARA_HEALPACK3_CATACOMB",
	"SAMSARA_MEGAPACK", "SAMSARA_MEGAPACK_CORVUS", "SAMSARA_MEGAPACK_MARATHON", "SAMSARA_ARMORSCRAP", "SAMSARA_ARMORSCRAP3",
	"SAMSARA_ARMOR0_1", "SAMSARA_ARMOR0_2", "SAMSARA_ARMOR0_3", "SAMSARA_ARMOR0_4", "SAMSARA_ARMOR12_1", "SAMSARA_ARMOR12_2",
	"SAMSARA_ARMOR12_3", "SAMSARA_ARMOR12_4", "SAMSARA_ARMOR3_1", "SAMSARA_ARMOR3_2", "SAMSARA_ARMOR3_3", "SAMSARA_ARMOR3_4",
	"SAMSARA_ARMORSCRAP_HERETIC", "SAMSARA_ARMORSCRAP3_HERETIC", "SAMSARA_ARMORHEXEN", "SAMSARA_ARMOR3HEXEN", "SAMSARA_POWERUP_ARMOR",
	"SAMSARA_POWERUP_ARMOR3", "SAMSARA_HEALPACK_TI", "SAMSARA_ARMORSCRAP_TI", "SAMSARA_ARMORSCRAP3_TI", "SAMSARA_POWERUP_INVIS",
	"SAMSARA_POWERUP_INVIS_RAVEN", "SAMSARA_POWERUP_INVIS_DUKE", "SAMSARA_POWERUP_INVIS_STRIFE", "SAMSARA_POWERUP_INVIS_WITCHAVEN", 
	"SAMSARA_POWERUP_INVIS_EXHUMED", "SAMSARA_POWERUP_INVIS_QUAKE2", "SAMSARA_POWERUP_INVULN", "SAMSARA_POWERUP_INVULN_CORVUS",
	"SAMSARA_POWERUP_INVULN_HEXEN", "SAMSARA_POWERUP_INVULN_ROTT", "SAMSARA_POWERUP_INVULN_IPOG", "SAMSARA_POWERUP_INVULN_EXHUMED",
	"SAMSARA_POWERUP_INVULN_CATACOMB", "SAMSARA_POWERUP_RADSUIT", "SAMSARA_POWERUP_INFRARED", "SAMSARA_POWERUP_INFRARED_RAVEN",
	"SAMSARA_POWERUP_INFRARED_DUKE", "SAMSARA_POWERUP_INFRARED_BLOOD", "SAMSARA_POWERUP_INFRARED_EXHUMED", "SAMSARA_POWERUP_INVIS_QUAKE",
	"SAMSARA_POWERUP_INVULN_QUAKE", "SAMSARA_CLIP_1", "SAMSARA_CLIP_2", "SAMSARA_SHELL_1", "SAMSARA_SHELL_2", "SAMSARA_ROCKET_1",
	"SAMSARA_ROCKET_2", "SAMSARA_CELL_1", "SAMSARA_CELL_2", "SAMSARA_BACKPACK", "SAMSARA_CLIPDROP_DOOM", "SAMSARA_CLIPDROP_HERETIC_1",
	"SAMSARA_CLIPDROP_HERETIC_2", "SAMSARA_SHELLDROP_HERETIC_1", "SAMSARA_SHELLDROP_HERETIC_2", "SAMSARA_ROCKETDROP_HERETIC_1",
	"SAMSARA_ROCKETDROP_HERETIC_2", "SAMSARA_CELLDROP_HERETIC", "SAMSARA_CLIPSHELL_HEXEN", "SAMSARA_ROCKETCELL_HEXEN",
	"SAMSARA_ALLAMMO_HEXEN", "SAMSARA_CLIPDROP_STRIFE", "SAMSARA_SHELL_STRIFE", "SAMSARA_ROCKET_STRIFE", "SAMSARA_ALLAMMO_STRIFE_1",
	"SAMSARA_ALLAMMO_STRIFE_2", "TXT_SIGIL", "SAMSARA_POWERUP_LESSERTOME", "SAMSARA_POWERUP_TORCH", "SAMSARA_POWERUP_FLIGHT", "SAMSARA_POWERUP_TELEPORTSELF", 
	"SAMSARA_POWERUP_SPEED", "SAMSARA_POWERUP_TELEPORTOTHER", "SAMSARA_POWERUP_ARMOR", "SAMSARA_POWERUP_ARMOR3", "SAMSARA_ARMORHEXEN", 
	"SAMSARA_ARMOR3HEXEN", "SAMSARA_POWERUP_MAP", "SAMSARA_SKULLTAG_INVIS", "SAMSARA_SKULLTAG_TIME", "SAMSARA_SKULLTAG_TURBO", "SAMSARA_SKULLTAG_GUARD",
	"SAMSARA_SKULLTAG_DOOM" };
	
	itemtemp = strings[item];
	*/
	
	if (GetCvar("msg0color") == 0) { msgcolor = "\ca"; }
	else if (GetCvar("msg0color") == 1) { msgcolor = "\cb"; }
	else if (GetCvar("msg0color") == 2) { msgcolor = "\cc"; }
	else if (GetCvar("msg0color") == 3) { msgcolor = "\cd"; }
	else if (GetCvar("msg0color") == 4) { msgcolor = "\ce"; }
	else if (GetCvar("msg0color") == 5) { msgcolor = "\cf"; }
	else if (GetCvar("msg0color") == 6) { msgcolor = "\cg"; }
	else if (GetCvar("msg0color") == 7) { msgcolor = "\ch"; }
	else if (GetCvar("msg0color") == 8) { msgcolor = "\ci"; }
	else if (GetCvar("msg0color") == 9) { msgcolor = "\cj"; }
	else if (GetCvar("msg0color") == 10) { msgcolor = "\ck"; }
	else if (GetCvar("msg0color") == 11) { msgcolor = "\cl"; }
	else if (GetCvar("msg0color") == 12) { msgcolor = "\cm"; }
	else if (GetCvar("msg0color") == 13) { msgcolor = "\cn"; }
	else if (GetCvar("msg0color") == 14) { msgcolor = "\co"; }
	else if (GetCvar("msg0color") == 15) { msgcolor = "\cp"; }
	else if (GetCvar("msg0color") == 16) { msgcolor = "\cq"; }
	else if (GetCvar("msg0color") == 17) { msgcolor = "\cr"; }
	else if (GetCvar("msg0color") == 18) { msgcolor = "\cs"; }
	else if (GetCvar("msg0color") == 19) { msgcolor = "\ct"; }
	else if (GetCvar("msg0color") == 20) { msgcolor = "\cu"; }
	else if (GetCvar("msg0color") == 21) { msgcolor = "\cv"; }
	else if (GetCvar("msg0color") == 22) { msgcolor = "\cw"; }
	else if (GetCvar("msg0color") == 23) { msgcolor = "\cx"; }
	else if (GetCvar("msg0color") == 24) { msgcolor = "\cy"; }
	else if (GetCvar("msg0color") == 25) { msgcolor = "\cz"; }

    Log(s:msgcolor, l:itemtemp);
}

// This is for the ReMixer ammo pickups
script "ReMixerPickupMessages" (int item) CLIENTSIDE
{
	int pln = PlayerNumber(); // ensure only the activator gets the messages
	int cpln = ConsolePlayerNumber();

    if (pln != cpln) { terminate; }

	int colortemp = GetCvar("msg0color");
	str msgcolor = "";
	str itemtemp = "";

	switch(item)
	{
	case 0:
		itemtemp = "REMIXER_CLIP_TOTENKOPF";
		break;
	case 1:
		itemtemp = "REMIXER_CLIP_EXHUMED";
		break;
	case 2:
		itemtemp = "REMIXER_SHELL_EXHUMED";
		break;
	case 3:
		itemtemp = "REMIXER_CLIP_REDNECK";
		break;
	case 4:
		itemtemp = "REMIXER_SHELL_REDNECK";
		break;
	case 5:
		itemtemp = "REMIXER_CLIP_QUAKE2";
		break;
	case 6:
		itemtemp = "REMIXER_SHELL_QUAKE2";
		break;
	case 7:
		itemtemp = "REMIXER_ROCKET_QUAKE2";
		break;
	case 8:
		itemtemp = "REMIXER_CELL_QUAKE2_1";
		break;
	case 9:
		itemtemp = "REMIXER_CELL_QUAKE2_2";
		break;
	case 10:
		itemtemp = "REMIXER_ALLAMMO_GOLDENEYE";
		break;
	case 11:
		itemtemp = "REMIXER_CLIP_GOLDENEYE_1";
		break;
	case 12:
		itemtemp = "REMIXER_CLIP_GOLDENEYE_2";
		break;
	case 13:
		itemtemp = "REMIXER_CLIP_GOLDENEYE_3";
		break;
	case 14:
		itemtemp = "REMIXER_CLIP_GOLDENEYE_4";
		break;
	case 15:
		itemtemp = "REMIXER_CLIP_GOLDENEYE_5";
		break;
	case 16:
		itemtemp = "REMIXER_CLIP_GOLDENEYE_6";
		break;
	case 17:
		itemtemp = "REMIXER_CLIP_GOLDENEYE_7";
		break;
	case 18:
		itemtemp = "REMIXER_CLIP_GOLDENEYE_8";
		break;
	case 19:
		itemtemp = "REMIXER_CLIP_GOLDENEYE_9";
		break;
	case 20:
		itemtemp = "REMIXER_CLIP_GOLDENEYE_10";
		break;
	case 21:
		itemtemp = "REMIXER_CLIP_GOLDENEYE_11";
		break;
	case 22:
		itemtemp = "REMIXER_CLIP_GOLDENEYE_12";
		break;
	case 23:
		itemtemp = "REMIXER_SHELL_GOLDENEYE_1";
		break;
	case 24:
		itemtemp = "REMIXER_SHELL_GOLDENEYE_2";
		break;
	case 25:
		itemtemp = "REMIXER_ROCKET_GOLDENEYE";
		break;
	case 26:
		itemtemp = "REMIXER_CELL_GOLDENEYE";
		break;
	}
	
	/* Keep it just in case
	str strings[27] = { "REMIXER_CLIP_TOTENKOPF", "REMIXER_CLIP_EXHUMED", "REMIXER_SHELL_EXHUMED", "REMIXER_CLIP_REDNECK", "REMIXER_CLIP_REDNECK", 
	"REMIXER_SHELL_REDNECK", "REMIXER_CLIP_QUAKE2", "REMIXER_SHELL_QUAKE2", "REMIXER_ROCKET_QUAKE2", "REMIXER_CELL_QUAKE2_1", "REMIXER_CELL_QUAKE2_2",
	"REMIXER_ALLAMMO_GOLDENEYE", "REMIXER_CLIP_GOLDENEYE_1", "REMIXER_CLIP_GOLDENEYE_2", "REMIXER_CLIP_GOLDENEYE_3", "REMIXER_CLIP_GOLDENEYE_4", 
	"REMIXER_CLIP_GOLDENEYE_5", "REMIXER_CLIP_GOLDENEYE_6", "REMIXER_CLIP_GOLDENEYE_7", "REMIXER_CLIP_GOLDENEYE_8", "REMIXER_CLIP_GOLDENEYE_9", 
	"REMIXER_CLIP_GOLDENEYE_10", "REMIXER_CLIP_GOLDENEYE_11", "REMIXER_CLIP_GOLDENEYE_12", "REMIXER_SHELL_GOLDENEYE_1", "REMIXER_SHELL_GOLDENEYE_2", 
	"REMIXER_ROCKET_GOLDENEYE", "REMIXER_CELL_GOLDENEYE" };
	
	itemtemp = strings[item];
	*/
	
	if (GetCvar("msg0color") == 0) { msgcolor = "\ca"; }
	else if (GetCvar("msg0color") == 1) { msgcolor = "\cb"; }
	else if (GetCvar("msg0color") == 2) { msgcolor = "\cc"; }
	else if (GetCvar("msg0color") == 3) { msgcolor = "\cd"; }
	else if (GetCvar("msg0color") == 4) { msgcolor = "\ce"; }
	else if (GetCvar("msg0color") == 5) { msgcolor = "\cf"; }
	else if (GetCvar("msg0color") == 6) { msgcolor = "\cg"; }
	else if (GetCvar("msg0color") == 7) { msgcolor = "\ch"; }
	else if (GetCvar("msg0color") == 8) { msgcolor = "\ci"; }
	else if (GetCvar("msg0color") == 9) { msgcolor = "\cj"; }
	else if (GetCvar("msg0color") == 10) { msgcolor = "\ck"; }
	else if (GetCvar("msg0color") == 11) { msgcolor = "\cl"; }
	else if (GetCvar("msg0color") == 12) { msgcolor = "\cm"; }
	else if (GetCvar("msg0color") == 13) { msgcolor = "\cn"; }
	else if (GetCvar("msg0color") == 14) { msgcolor = "\co"; }
	else if (GetCvar("msg0color") == 15) { msgcolor = "\cp"; }
	else if (GetCvar("msg0color") == 16) { msgcolor = "\cq"; }
	else if (GetCvar("msg0color") == 17) { msgcolor = "\cr"; }
	else if (GetCvar("msg0color") == 18) { msgcolor = "\cs"; }
	else if (GetCvar("msg0color") == 19) { msgcolor = "\ct"; }
	else if (GetCvar("msg0color") == 20) { msgcolor = "\cu"; }
	else if (GetCvar("msg0color") == 21) { msgcolor = "\cv"; }
	else if (GetCvar("msg0color") == 22) { msgcolor = "\cw"; }
	else if (GetCvar("msg0color") == 23) { msgcolor = "\cx"; }
	else if (GetCvar("msg0color") == 24) { msgcolor = "\cy"; }
	else if (GetCvar("msg0color") == 25) { msgcolor = "\cz"; }

    Log(s:msgcolor, l:itemtemp);
}
