#define BLOOD_MEDIUM 1
#define BLOOD_SMALL 2
#define BLOOD_SPRAY 3

function int GiveClassWeapon(int class, int slot, int ammoMode, int startmode) // startmode -1 = LMS, 1 or higher = equipmentstart (or similar)
{
	return _giveclassweapon(class, slot, ammoMode, 0, 0, startmode);
}

function int _giveclassweapon(int class, int slot, int ammoMode, int dropped, int nopd, int startmode)
{
	int weapon = ClassWeapons[class][slot][S_WEP];
	int ammo1  = ClassWeapons[class][slot][S_AMMO1];
	int ammo2  = ClassWeapons[class][slot][S_AMMO2];
	int a1count = CheckInventory(ammo1);
	int a2count = CheckInventory(ammo2);

	int hasAmmo = 0;
	int giveWep = 0;
	int hasWep  = CheckInventory(weapon);
	int success;

	if (class == -1) { return 0; }

	if (!StrLen(weapon)) { return 0; }

	if (!CheckInventory(weapon)) { giveWep = 1; }
	if (!strcmp(ClassWeapons[class][slot][S_CHECKITEM], "ForceCheck")
	 || !CheckInventory(ClassWeapons[class][slot][S_CHECKITEM])) { giveWep = 1; }
	if (StrLen(ammo1)) { hasAmmo |= 1; }
	if (StrLen(ammo2)) { hasAmmo |= 2; }

	if (((hasAmmo & 1) && a1count < GetAmmoCapacity(ammo1))
	 || ((hasAmmo & 2) && a2count < GetAmmoCapacity(ammo2)))
	{
		giveWep = 1;
	}

	if (giveWep)
	{
		if (StrLen(SlotItems[slot])) { GiveInventory(SlotItems[slot], 1); }

        int giveScriptResult = ACS_NamedExecuteWithResult("Samsara_GiveCustomSlot", slot, dropped, startmode);

        if (giveScriptResult > -1) { success = giveScriptResult; }
        else
        {
            success = 1;
            GiveInventory(weapon, 1);
        }

		if ((success && array_pickupswitch[PlayerNumber()] && !hasWep &&
			(array_pickupswitch[PlayerNumber()] >= 2 || slot > ClassWeaponSlot())
			|| PlayerIsBot(PlayerNumber())))
		{
			SetWeapon(ClassWeapons[class][slot][S_WEP]);
		}

		switch (ammoMode)
		{
			case 0:
				if (hasAmmo & 1) { TakeInventory(ammo1, CheckInventory(ammo1) - a1count); }
				if (hasAmmo & 2) { TakeInventory(ammo2, CheckInventory(ammo2) - a2count); }
				break;

			case 1:
				if (hasAmmo & 1) { GiveInventory(ammo1, GetAmmoCapacity(ammo1)); }
				if (hasAmmo & 2) { GiveInventory(ammo2, GetAmmoCapacity(ammo2)); }
				break;

			case 2:
				if (hasAmmo & 1) { TakeInventory(ammo1, (CheckInventory(ammo1) - a1count) / 2); }
				if (hasAmmo & 2) { TakeInventory(ammo2, (CheckInventory(ammo2) - a2count) / 2); }
				break;

			default:
				break;
		}
	}
	return !!success;
}

function bool HasClassWeapon(int class, int slot)
{
    if (class == -1) { return false; }

    int weapon = ClassWeapons[class][slot][S_WEP];
    int checkitem = ClassWeapons[class][slot][S_CHECKITEM];
    int failitem = ClassWeapons[class][slot][S_CHECKFAILITEM];

    int hasWep, hasItem, hasFail;

    if (!StrLen(weapon))
    {
        if (slot >= SLOT_MINIGUN)
        {
            weapon = ClassWeapons[class][slot - 4][S_WEP];

            if (!StrLen(weapon)) { return false; }
        }
        else { return false; }
    }

    hasWep  = CheckInventory(weapon);
    hasItem = StrLen(checkitem) && CheckInventory(checkitem);
    hasFail = StrLen(failitem) && CheckInventory(failitem);

    return hasWep || hasItem || hasFail;
}

function void GiveClassUnique(int class, int which)
{
	int unique, ammo, amax;

	if (class == -1) { return; }

	switch (which)
	{
		case 0:
			unique = ClassUniques[class][U_UNIQUE1];
			ammo   = ClassUniques[class][U_AMMO1];
			amax   = UniqueMaxes[class][U_AMMO1];
			break;

		case 1:
			unique = ClassUniques[class][U_UNIQUE2];
			ammo   = ClassUniques[class][U_AMMO2];
			amax   = UniqueMaxes[class][U_AMMO2];
			break;

		case 2:
			unique = ClassUniques[class][U_UNIQUE3];
			ammo   = ClassUniques[class][U_AMMO3];
			amax   = UniqueMaxes[class][U_AMMO3];
			break;
	}

	if (StrLen(unique)) { GiveInventory(unique, 1); }
	if (StrLen(ammo)) { GiveInventory(ammo, amax - CheckInventory(ammo)); }
}

function void ApplyLMS(void)
{
    int pln = PlayerNumber();
	int classNum = samsaraClassNum();
	int i;

	if (classNum == -1) { return; }

    int healthinit = 100;

    if (CheckInventory("Hexen2Class")) { healthinit = 70; }

	if (GetActorProperty(0, APROP_Health) < healthinit && !isDead(0)) { SetActorProperty(0, APROP_Health, healthinit); }

	// Handle backpacks for different classes
    ACS_NamedExecuteWithResult("Samsara_GiveBackpack", -1);

	for (i = SLOT_FIST; i < SLOT_BFG9000; i++) { GiveClassWeapon(classNum, i, 1, -1); }

	if (GetCVAR("samsara_lmsskulltag"))
	{
		for (i = SLOT_MINIGUN; i < SLOT_BFG10K; i++) { GiveClassWeapon(classNum, i, 1, -1); }
	}

	if (GetCVar("samsara_lmsuniques"))
	{
		for (i = 0; i < UNIQUECOUNT; i++)
		{
			if ((!CheckInventory("DoomguyClass") && !CheckInventory("WolfenClass")) || ((CheckInventory("DoomguyClass") || CheckInventory("WolfenClass")) && i == 0)) { GiveUnique(classnum, i, -1); } // temporary hack for having triplicated unique entries for altclass messages
		}
	}

	//if (StrLen(LMSItems[classNum])) { GiveInventory(LMSItems[classNum], 1); }
	if (GetCVar("samsara_lmsult"))
	{
		GiveClassWeapon(classNum, SLOT_BFG9000, 1, -1);
		if (GetCVAR("samsara_lmsskulltag"))
		{
			GiveClassWeapon(classNum, SLOT_BFG10K, 1, -1);
		}
	}

	//i = (GetCVar("samsara_lmslife") + 1) * PlayerCount(); // hasn't been converted or changed yet

	GiveInventory("Clip", GetAmmoCapacity("Clip") - CheckInventory("Clip"));
	GiveInventory("Shell", GetAmmoCapacity("Shell") - CheckInventory("Shell"));
	GiveInventory("RocketAmmo", GetAmmoCapacity("RocketAmmo") - CheckInventory("RocketAmmo"));
	GiveInventory("Cell", GetAmmoCapacity("Cell") - CheckInventory("Cell"));

	/*TakeInventory("LavaNails", INTMAX);
	TakeInventory("MultiRocketAmmo", INTMAX);
	GiveInventory("LavaNails", ftoi(2.5 * i));
	GiveInventory("MultiRocketAmmo", ftoi(0.5 * i));*/

	// Some classes need hard hacks in order to correctly work with LMS rules
	// It's ugly, but a necessity for this feature

	// Doomguy
	if (CheckInventory("DoomguyClass")) {
		GiveInventory("DGStrHasAutoShotgun", 1);
		GiveInventory("DGHasChaingun", 1);
		GiveInventory("DGStrHasFlamethrower", 1);
		GiveInventory("DGHasRocketLauncher", 1);
		GiveInventory("DGStrHasLandMines", 1);
		GiveInventory("DGHasPlasmaRifle", 1);
		GiveInventory("DGStrHasStunnerRifle", 1);

		if (GetCVar("samsara_lmsskulltag")) {
			GiveInventory("DGHasMinigun",1);
			GiveInventory("DGHasGrenadeLauncher",1);
			GiveInventory("DGHasRailGun",1);
		}

		if (GetCVar("samsara_lmsult")) {
			GiveInventory("DGHasBFG9000", 1);
			GiveInventory("Doom64_IHaveUnmaker", 1);
			GiveInventory("DGStrHasPyroCannon", 1);

			if (GetCVAR("samsara_lmsskulltag")) {
				GiveInventory("DGHasBFG10K",1);
			}
		}

		if (GetCVar("samsara_lmsuniques")) {
			GiveInventory("DGStrHasHomingRocketLauncher", 1);
			GiveInventory("DGStrHasPlasmaRepeater", 1);
			GiveInventory("DGStrHasWPK", 1);
		}

		GiveInventory("DoomguyStrGas", GetAmmoCapacity("DoomguyStrGas") - CheckInventory("DoomguyStrGas"));
		GiveInventory("DoomguyStrMines", GetAmmoCapacity("DoomguyStrMines") - CheckInventory("DoomguyStrMines"));
	}

	// Blazkowicz
	if (CheckInventory("WolfenClass")) {
		GiveInventory("Totenkopf_IHaveMauser", 1);
		GiveInventory("Totenkopf_IHaveDualMausers", 1);
		GiveInventory("Wolfen_IHaveSlot2", 1);
		GiveInventory("Totenkopf_IHaveSTG44", 1);
		GiveInventory("Totenkopf_IHaveDualMP40s", 1);

		if (GetCVar("samsara_lmsuniques")) {
			GiveInventory("Totenkopf_IHaveFlamethrower", 1);
			GiveInventory("Totenkopf_FlamethrowerFuel", GetAmmoCapacity("Totenkopf_FlamethrowerFuel") - CheckInventory("Totenkopf_FlamethrowerFuel"));
			GiveInventory("Totenkopf_IHaveMG42", 1);
			GiveInventory("Totenkopf_IHaveScope", 1);
		}
	}

    // Parias
    if (CheckInventory("HexenClass"))
    {
        if (GetCVar("samsara_lmsult") && GetCVar("samsara_lmsskulltag")) { GiveInventory("SamsaraClassicPariasHasBloodscourge", 1); }
    }

	// Duke Nukem
	if (CheckInventory("DukeClass")) {
        if (GetCVar("samsara_lmsskulltag")) { GiveInventory("SamsaraDukeHasGoldenDesertEagle", 1); }

		if (GetCVar("samsara_lmsuniques")) {
            GiveInventory("DukeHasShrinker", 1);
			GiveInventory("ShrinkerAmmo", GetAmmoCapacity("ShrinkerAmmo") - CheckInventory("ShrinkerAmmo"));
            GiveInventory("DukeHasExpander", 1);
			GiveInventory("ExpanderAmmo", GetAmmoCapacity("ExpanderAmmo") - CheckInventory("ExpanderAmmo"));
			GiveInventory("Duke64DumDums", GetAmmoCapacity("Duke64DumDums") - CheckInventory("Duke64DumDums"));
			GiveInventory("Duke64ExplosiveShells", GetAmmoCapacity("Duke64ExplosiveShells") - CheckInventory("Duke64ExplosiveShells"));
			GiveInventory("Duke64HeatSeekingRockets", GetAmmoCapacity("Duke64HeatSeekingRockets") - CheckInventory("Duke64HeatSeekingRockets"));
			GiveInventory("Duke64ShrinkerAmmo", GetAmmoCapacity("Duke64ShrinkerAmmo") - CheckInventory("Duke64ShrinkerAmmo"));
		}
	}

	// Security Officer
	if (CheckInventory("MarathonClass")) {
		GiveInventory("CanDualPistols", 1);
		GiveInventory("CanDualShotties", 1);
		GiveInventory("KnifeAmmo", GetAmmoCapacity("KnifeAmmo") - CheckInventory("KnifeAmmo"));
	}

	// Ranger
	if (CheckInventory("QuakeClass")) {
		GiveInventory("LavaNails", GetAmmoCapacity("LavaNails") - CheckInventory("LavaNails"));
		GiveInventory("MultiRocketAmmo", GetAmmoCapacity("MultiRocketAmmo") - CheckInventory("MultiRocketAmmo"));

		if (GetCVar("samsara_lmsult")) {
			GiveInventory("PlasmaCell", GetAmmoCapacity("PlasmaCell") - CheckInventory("PlasmaCell"));
		}
	}

	// Ian Paul Freeley
	if (CheckInventory("RottClass")) {
		if (GetCVar("samsara_lmsskulltag")) {
			GiveInventory("DMMissiles", GetAmmoCapacity("DMMissiles") - CheckInventory("DMMissiles"));
		}
		
		if (GetCVar("samsara_lmsuniques")) {
			GiveInventory("SMissiles", GetAmmoCapacity("SMissiles") - CheckInventory("SMissiles"));
		}
	}

	// Caleb
	if (CheckInventory("CalebClass")) {
		if (GetCVAR("samsara_lmsskulltag")) {
			GiveInventory("BloodRemoteTNT", 1);
		}
		
		if (GetCVar("samsara_lmsuniques")) {
			GiveInventory("SprayCanAmmo", GetAmmoCapacity("SprayCanAmmo") - CheckInventory("SprayCanAmmo"));
		}
	}

	// Strifeguy
	if (CheckInventory("StrifeClass")) {
		GiveInventory(" Sigil ", 1);
		GiveInventory("StrifeSigilPiece", 4);
		GiveInventory("StrifeSigilPiecePreferred", 4);
		
		GiveInventory("StrifePoisonAmmo", GetAmmoCapacity("StrifePoisonAmmo") - CheckInventory("StrifePoisonAmmo"));
		GiveInventory("WhitePhosGrenade", GetAmmoCapacity("WhitePhosGrenade") - CheckInventory("WhitePhosGrenade"));
		GiveInventory("StrifeGasGrenadeAmmo", GetAmmoCapacity("StrifeGasGrenadeAmmo") - CheckInventory("StrifeGasGrenadeAmmo"));

		if (GetCVar("samsara_lmsult")) {
			GiveInventory("StrifeSigilPiece", 1);
			GiveInventory("StrifeSigilPiecePreferred", 1);
		}

		if (GetCVar("samsara_lmsuniques")) {
            int supdone = 0;

            while (supdone < 10)
            {
                GiveInventory("StaminaUpgradeDamage", 10);
                GiveInventory("AccuracyUpgrade1", 10);
                GiveInventory("AccuracyUpgrade2", 10);

                ACS_NamedExecuteWithResult("SamsaraPlayerSpawnHealthAdjust", 10, 1, 7, 100);
                ACS_NamedExecuteWithResult("SamsaraPlayerHealer");

                GiveInventory("StrifeUpgradeCount", 1);

                supdone++;
            }
		}
	}

	// Space Seal
	if (CheckInventory("C7Class")) {
		if (GetCVar("samsara_lmsuniques")) {
			GiveInventory("C7ProxyMineAmmo", GetAmmoCapacity("C7ProxyMineAmmo") - CheckInventory("C7ProxyMineAmmo"));
		}
	}

	// LDF Commando
	if (CheckInventory("RMRClass")) {
		if (GetCVar("samsara_lmsult")) {
			GiveInventory("Subestron Arm", 1);
		}

		if (GetCVar("samsara_lmsuniques")) { GiveInventory("RMRJetPack", 3); }
	}

    // Kyle Katarn
    if (CheckInventory("KatarnClass"))
    {
        if (GetCVar("samsara_lmsuniques"))
        {
            GiveInventory("KatarnBlazeIt", 2100);
            GiveInventory("KatarnBlazeItTimer", 60);
        }
    }

	// Mooman
	if (CheckInventory("POGreedClass")) {
		if (GetCVar("samsara_lmsuniques")) {
			GiveInventory("ShieldCharge", 3);
			GiveInventory("IPOGProximityMineItem", 10);
			GiveInventory("IPOGTimeBombItem", 10);
			GiveInventory("IPOGCloneItem", 5);
			GiveInventory("Medtube", 4);
		}
	}

	// Jack
	if (CheckInventory("DisruptorClass")) {
		GiveInventory("DisruptorHiFreq", GetAmmoCapacity("DisruptorHiFreq") - CheckInventory("DisruptorHiFreq"));
		GiveInventory("DisruptorBinaryLockOn", GetAmmoCapacity("DisruptorBinaryLockOn") - CheckInventory("DisruptorBinaryLockOn"));
		GiveInventory("DisruptorPSIEnergy", GetAmmoCapacity("DisruptorPSIEnergy") - CheckInventory("DisruptorPSIEnergy"));
		
		if (GetCVar("samsara_lmsult")) {
			TakeInventory("DisruptorEnergyBall", 1);
			GiveInventory("DisruptorTeraBall", 1);
		}
	}

    // Grondoval
    if (CheckInventory("WitchavenClass"))
    {
        if (GetCVar("samsara_lmsult"))
        {
            if (CheckInventory("WTExperience") < 60000) { SetInventory("WTExperience", 60000); }
            if (CheckInventory("WTLevel") < 7) { SetInventory("WTLevel", 7); }
        } else {
            if (CheckInventory("WTExperience") < 50000) { SetInventory("WTExperience", 50000); }
            if (CheckInventory("WTLevel") < 6) { SetInventory("WTLevel", 6); }
        }

        ACS_NamedExecuteWithResult("SamsaraPlayerSpawnHealthAdjust", 100, 1, 8, 100);

        if (GetCVar("samsara_lmsuniques")) { GiveInventory("WTStrengthPhial", 10); }
    }

	// Lo Wang
	if (CheckInventory("SWClass")) {
		GiveInventory("UziAmountCheck", 1);

		if (GetCVar("samsara_lmsult")) {
			GiveInventory("GotNuke", 1);
		}

		if (GetCVar("samsara_lmsuniques")) {
			GiveInventory("HeatSeekingCard", 2);
		}
	}

	// Cybermage
	if (CheckInventory("CMClass")) {
		if (GetCVar("samsara_lmsuniques")) {
			GiveInventory("AllowMeDoSwitch1", 1);
			GiveInventory("MagicMode1", 1);
			GiveInventory("AllowMeDoSwitch2", 1);
			GiveInventory("MagicMode2", 1);
			GiveInventory("AllowMeDoSwitch3", 1);
			GiveInventory("MagicMode3", 1);
			GiveInventory("AllowMeDoSwitch4", 1);
			GiveInventory("MagicMode4", 1);
		}
	}

	// Leonard
	if (CheckInventory("RRClass")) {
		if (GetCVar("samsara_lmsuniques")) {
			GiveInventory("ChickenAmmo", GetAmmoCapacity("ChickenAmmo") - CheckInventory("ChickenAmmo"));
		}
	}

	// Bitterman
	if (CheckInventory("BittermanClass")) {
		if (GetCVar("samsara_lmsskulltag")) {
			GiveInventory("Q2Flechettes", GetAmmoCapacity("Q2Flechettes") - CheckInventory("Q2Flechettes"));
		}
	}

	// Demoness
	if (CheckInventory("Hexen2Class")) {
		if (GetCVar("samsara_lmsuniques")) {
			GiveInventory("Hexen2ForceCube", 20); // I don't think it's needed, but just in case
		}
	}

	// Daniel Garner
	if (CheckInventory("PainkillerClass")) {
		GiveInventory("Painkiller_FreezerAmmo", GetAmmoCapacity("Painkiller_FreezerAmmo") - CheckInventory("Painkiller_FreezerAmmo"));
		GiveInventory("Painkiller_FlamerAmmo", GetAmmoCapacity("Painkiller_FlamerAmmo") - CheckInventory("Painkiller_FlamerAmmo"));
		GiveInventory("Painkiller_HeaterAmmo", GetAmmoCapacity("Painkiller_HeaterAmmo") - CheckInventory("Painkiller_HeaterAmmo"));
		GiveInventory("Painkiller_ElectroAmmo", GetAmmoCapacity("Painkiller_ElectroAmmo") - CheckInventory("Painkiller_ElectroAmmo"));
		GiveInventory("Painkiller_GoldAmount", 999999);

		if (GetCVar("samsara_lmsult")) {
			GiveInventory("Painkiller_Speed", 1);
			GiveInventory("Painkiller_Dexterity", 1);
			GiveInventory("Painkiller_Fury", 1);
			GiveInventory("Painkiller_Rage", 1);
			GiveInventory("Painkiller_Confusion", 1);
			GiveInventory("Painkiller_Endurance", 1);
			GiveInventory("Painkiller_IronWill", 1);
			GiveInventory("Painkiller_Haste", 1);
			GiveInventory("Painkiller_DoubleHaste", 1);
			GiveInventory("Painkiller_TripleHaste", 1);
			GiveInventory("Painkiller_TimeBonus", 1);
			GiveInventory("Painkiller_DoubleTimeBonus", 1);
			GiveInventory("Painkiller_WeaponModifier", 1);
			GiveInventory("Painkiller_MagicGun", 1);
			GiveInventory("Painkiller_TheSceptre", 1);
			GiveInventory("Painkiller_DemonMorphCard", 1);
			GiveInventory("Painkiller_Rebirth", 1);
		}

		if (GetCVar("samsara_lmsuniques")) {
			GiveInventory("Painkiller_SoulCatcher", 1);
			GiveInventory("Painkiller_GoldMagnet", 1);
			GiveInventory("Painkiller_SoulRedeemer", 1);
			GiveInventory("Painkiller_DarkSoul", 1);
			GiveInventory("Painkiller_Blessing", 1);
			GiveInventory("Painkiller_Replenish", 1);
			GiveInventory("Painkiller_Forgiveness", 1);
			GiveInventory("Painkiller_Mercy", 1);
			GiveInventory("Painkiller_LastBreath", 1);
			GiveInventory("Painkiller_HealthStealer", 1);
			GiveInventory("Painkiller_HealthRegeneration", 1);
			GiveInventory("Painkiller_ArmorRegeneration", 1);
			GiveInventory("Painkiller_Fear", 1);
			GiveInventory("Painkiller_666Ammo", 1);
		}
	}

    // Prisoner 849
    if (CheckInventory("UnrealClass"))
    {
        if (CheckInventory("UDPistolUpgrade") < 4)
        {
            SetInventory("UDPistolUpgrade", 4);
            SetInventory("UDPistolUpgradePreferred", 4);
            GiveInventory("UnrealRevertDirection", 1);
        }

        int DPistolLevel = CheckInventory("UDPistolUpgrade");

        if (GetAmmoCapacity("DPistolAmmo") != 60 + (DPistolLevel * 10)) { SetAmmoCapacity("DPistolAmmo", 60 + (DPistolLevel * 10)); }

        GiveInventory("DPistolAmmo", GetAmmoCapacity("DPistolAmmo") - CheckInventory("DPistolAmmo"));
    }
	
	// RTCW Blazkowicz
	if (CheckInventory("RTCWClass")) {
		GiveInventory("RTCW_AlliedAmmo1", GetAmmoCapacity("RTCW_AlliedAmmo1") - CheckInventory("RTCW_AlliedAmmo1"));
		GiveInventory("RTCW_AlliedAmmo2", GetAmmoCapacity("RTCW_AlliedAmmo2") - CheckInventory("RTCW_AlliedAmmo2"));
		GiveInventory("RTCW_AlliedAmmo3", GetAmmoCapacity("RTCW_AlliedAmmo3") - CheckInventory("RTCW_AlliedAmmo3"));
		GiveInventory("RTCW_AlliedAmmo4", GetAmmoCapacity("RTCW_AlliedAmmo4") - CheckInventory("RTCW_AlliedAmmo4"));
	}

	// Sarge
	if (CheckInventory("Q3Class")) {
		if (GetCVar("samsara_lmsuniques")) {
			GiveInventory("Q3GrenadeLauncherAmmo", GetAmmoCapacity("Q3GrenadeLauncherAmmo") - CheckInventory("Q3GrenadeLauncherAmmo"));
			GiveInventory("Q3ChaingunAmmo", GetAmmoCapacity("Q3ChaingunAmmo") - CheckInventory("Q3ChaingunAmmo"));
		}
	}

	// Pyro-GX
	if (CheckInventory("DescentClass")) {
		GiveInventory("DescentLaserLevel", 5);
	}

	// JC Denton
	if (CheckInventory("DeusExClass")) {
		GiveInventory("DeusEx_LowTechSkill", 4);
		GiveInventory("DeusEx_PistolSkill", 4);
		GiveInventory("DeusEx_RifleSkill", 4);
		GiveInventory("DeusEx_HeavyWeaponSkill", 4);
		GiveInventory("DeusEx_MedicineSkill", 4);
		GiveInventory("DeusEx_EnviroSkill", 4);
		SetAmmoCapacity("DeusEx_GlockMagazine", 12);
		SetAmmoCapacity("DeusEx_MiniXBowMagazine", 14);
		SetAmmoCapacity("DeusEx_ShotgunMagazine", 8);
		SetAmmoCapacity("DeusEx_AssShotgunMagazine", 24);
		SetAmmoCapacity("DeusEx_AssaultGunMagazine", 70);
		SetAmmoCapacity("DeusEx_FlameThrowerMagazine", 200);
		SetAmmoCapacity("DeusEx_PlasmaRifleMagazine", 32);
		SetAmmoCapacity("DeusEx_SniperMagazine", 14);
		SetAmmoCapacity("DeusEx_StealthMagazine", 19);
		GiveInventory("DeusEx_GlockMagazine", 12);
		GiveInventory("DeusEx_MiniXBowMagazine", 14);
		GiveInventory("DeusEx_ShotgunMagazine", 8);
		GiveInventory("DeusEx_AssShotgunMagazine", 24);
		GiveInventory("DeusEx_AssaultGunMagazine", 70);
		GiveInventory("DeusEx_FlameThrowerMagazine", 200);
		GiveInventory("DeusEx_PlasmaRifleMagazine", 32);
		GiveInventory("DeusEx_SniperMagazine", 14);
		GiveInventory("DeusEx_StealthMagazine", 19);
		SetAmmoCapacity("DeusEx_GlockSpread", 45);
		SetAmmoCapacity("DeusEx_XBowSpread", 25);
		SetAmmoCapacity("DeusEx_SawedOffSpread", 30);
		SetAmmoCapacity("DeusEx_ShotgunSpread", 0);
		SetAmmoCapacity("DeusEx_AssaultGunSpread", 0);
		SetAmmoCapacity("DeusEx_PlasmaRifleSpread", 42);
		SetAmmoCapacity("DeusEx_StealthSpread", 25);
		GiveInventory("DeusEx_Augmentation_CombatStrength", 4);
		GiveInventory("DeusEx_Augmentation_MicrofibralMuscle", 4);
		GiveInventory("DeusEx_Augmentation_SpeedEnhancement", 4);
		GiveInventory("DeusEx_Augmentation_RunSilent", 4);
		GiveInventory("DeusEx_Augmentation_BallisticProtection", 4);
		GiveInventory("DeusEx_Augmentation_EMPShield", 4);
		GiveInventory("DeusEx_Augmentation_Cloak", 4);
		GiveInventory("DeusEx_Augmentation_Repulsor", 4);
		GiveInventory("DeusEx_Augmentation_EnergyShield", 4);
		GiveInventory("DeusEx_Augmentation_EnvironmentalResistance", 4);
		GiveInventory("DeusEx_Augmentation_Regeneration", 4);
		GiveInventory("DeusEx_Augmentation_Maintenance", 4);
		GiveInventory("DeusEx_Augmentation_PowerRecirculator", 4);
		GiveInventory("DeusEx_Augmentation_RechargeableBattery", 4);
		GiveInventory("DeusEx_Augmentation_SpyDrone", 4);
		GiveInventory("DeusEx_Augmentation_AggressiveDefenseSystem", 4);
		GiveInventory("DeusEx_Augmentation_VisionEnhancement", 4);
		GiveInventory("DeusEx_Augmentation_Targeting", 4);
		GiveInventory("DeusEx_Augmentation_InfoLink", 1);
		GiveInventory("DeusEx_Augmentation_IFF", 1);
		GiveInventory("DeusEx_Augmentation_Light", 1);
		if(!CheckInventory("DeusEx_Augmentation_ArmsSlot")) GiveInventory("DeusEx_Augmentation_ArmsSlot",1);
		if(!CheckInventory("DeusEx_Augmentation_LegsSlot")) GiveInventory("DeusEx_Augmentation_LegsSlot",1);
		if(!CheckInventory("DeusEx_Augmentation_Subdermal1Slot")) GiveInventory("DeusEx_Augmentation_Subdermal1Slot",1);
		if(!CheckInventory("DeusEx_Augmentation_Subdermal2Slot")) GiveInventory("DeusEx_Augmentation_Subdermal2Slot",1);
		if(!CheckInventory("DeusEx_Augmentation_Torso1Slot")) GiveInventory("DeusEx_Augmentation_Torso1Slot",1);
		if(!CheckInventory("DeusEx_Augmentation_Torso2Slot")) GiveInventory("DeusEx_Augmentation_Torso2Slot",1);
		if(!CheckInventory("DeusEx_Augmentation_Torso3Slot")) GiveInventory("DeusEx_Augmentation_Torso3Slot",1);
		if(!CheckInventory("DeusEx_Augmentation_CranialSlot")) GiveInventory("DeusEx_Augmentation_CranialSlot",1);
		if(!CheckInventory("DeusEx_Augmentation_EyeSlot")) GiveInventory("DeusEx_Augmentation_EyeSlot",1);
		GiveInventory("DeusEx_StealthPistol", 1);
		GiveInventory("DeusEx_LAM", 1);

		if (GetCVar("samsara_lmsuniques")) {
			GiveInventory("DeusEx_LAWAmmo", GetAmmoCapacity("DeusEx_LAWAmmo") - CheckInventory("DeusEx_LAWAmmo"));
		}
	}

    int lmsHealth = GetCVar("samsara_lmshealth"), lmsArmor = GetCVar("samsara_lmsarmor");

    if (!isDead(0))
    {
        if (lmsHealth > 0)
        {
            if (GetActorProperty(0, APROP_Health) < healthinit + lmsHealth) { SetActorProperty(0, APROP_Health, healthinit + lmsHealth); }
        } else {
            if (GetActorProperty(0, APROP_Health) < healthinit) { SetActorProperty(0, APROP_Health, healthinit); }
        }
    }

    if (lmsArmor > 0)
    {
        int lmsArmorTier = ARMOR_LMSARMOR1 + GetCVar("samsara_lmsarmortier");

        if (lmsArmorTier > ARMOR_LMSARMOR5) { lmsArmorTier = ARMOR_LMSARMOR5; }
        else if (lmsArmorTier < ARMOR_LMSARMOR1) { lmsArmorTier = ARMOR_LMSARMOR1; }

        ACS_NamedExecuteWithResult("SamsaraArmorAdjust", lmsArmorTier, -lmsArmor, -lmsArmor, -2);
    }

	//ACS_NamedExecuteAlways("Samsara678",0,0,0,0);
}

function int samsaraClassNum(void)
{
	/*int i;
	for (i = 0; i < CLASSCOUNT; i++)
	{
		if (CheckInventory(ClassNames[i][1])) { return i; }
	}*/
   return PlayerClass(PlayerNumber());
}

function int samsaraAltClassNum (void)
{
    str i = "Placeholder";

    i = ClassNames[samsaraClassNum()][2];

    if (!StrLen(i)) { return 0; }

    return CheckInventory(i);
}

function int itemToSlot(int i)
{
	i--;
	if (i < 0 || i > 11) { return -1; }
	return ItoSArray[i];
}

function int SamsaraClientVars(void)
{
	int switchOnPickup = !!GetCVar("switchonpickup");
	int weaponBar      = !!GetCVar("samsara_cl_weaponhud");
	int ballgag        = !!GetCVar("samsara_cl_ballgag");
	int smoothAnims    = !!GetCVar("samsara_cl_smoothanims");
	int wolfmove       = !!GetCVar("samsara_cl_wolfmove");

	return (switchOnPickup << 4) + (weaponBar << 3) + (ballgag << 2) + (smoothAnims << 1) + wolfmove;
}

function int GiveUnique(int cnum, int unum, int startmode) // startmode -1 = LMS, 1 or higher = uniquestart (or similar)
{
	return _giveunique(cnum, unum, 0, 0, startmode);
}

int TempUniques[UNIQUECOUNT];

function int _giveunique(int cnum, int unum, int ignoreinv, int nopd, int startmode)
{
	int success;
	int i, j, tmpcount;

	if (cnum == -1) { return -1; }

	if (unum == -1)
	{
		tmpcount = 0;
		for (i = 0; i < UNIQUECOUNT; i++)
		{
			j = ClassUniques[cnum][i * 2];
			if (!strcmp(j, "")) { continue; }

			TempUniques[tmpcount++] = i;
		}

		if (tmpcount == 0) { return -1; }

		unum = TempUniques[random(0, tmpcount-1)];
	}

    int ounum = unum + 1; // for custom unique giving script
    ounum = -ounum; // accommodate for defines

	unum *= 2;
	int uanum = unum + 1;

	int unique = ClassUniques[cnum][unum];
	int unammo = ClassUniques[cnum][uanum];

	int uniqueMax = UniqueMaxes[cnum][unum];
	int unammoMax = UniqueMaxes[cnum][uanum];

	int unCount = UniqueCounts[cnum][unum];
	int unammoCount = UniqueCounts[cnum][uanum];

	unCount = cond(unCount == -1, 1, unCount);
	unammoCount = cond(unammoCount == -1, unammoMax, unammoCount);

	if (unammoMax == 0 && unammo) { unammoMax = GetAmmoCapacity(unammo); }

	// If you can get a unique and:
	//  - You don't have the unique at all
	//   or
	//  - You don't get multiple duplicates of the unique, and it lacks ammo
	//   or
	//  - It does have ammo, but you're not full
	//   or
	//  - You can have multiple duplicates of the unique, and you're not full

    int giveScriptResult = ACS_NamedExecuteWithResult("Samsara_GiveCustomUnique", ounum, startmode);

    if (giveScriptResult > -1) { success = giveScriptResult; }
    else
    {
        if (strcmp(unique, "") &&
            ((!CheckInventory(unique) || ignoreinv) ||
              (uniqueMax <= 1 && (!strcmp(unammo, "") || unammoMax == 0)) ||
              (unammoMax != 0 && (CheckInventory(unammo) != unammoMax || ignoreinv)) ||
              (uniqueMax > 1 && (CheckInventory(unique) != uniqueMax || ignoreinv))
            )
           )
        {
            GiveInventory(unique, unCount);
            GiveInventory(unammo, unammoCount);
            success = 1;
        }
    }

	return success;
}

function void TakeUnique(int cnum, int unum)
{
	unum *= 2;
	int uanum = unum + 1;

	if (cnum == -1) { return; }

	int unique = ClassUniques[cnum][unum];
	if (unique != "") { TakeInventory(unique, INTMAX); }
}

function bool HasUnique(int cnum, int unum)
{
	if (cnum == -1) { return 0; }

	int unique = ClassUniques[cnum][unum*2];
	return (unique != "") && CheckInventory(unique);
}

function int ClassWeaponSlot(void)
{
	int pclass = samsaraClassNum();
	int weapon, i;

	if (pclass == -1) { return -1; }

	for (i = 0; i < SLOTCOUNT; i++)
	{
		weapon = ClassWeapons[pclass][i][S_WEP];

		if (CheckWeapon(weapon)) { return i; }
	}

	return -1;
}

function int ConvertClassWeapons(int classnum)
{
	int i, j, k;
	int ret;

	if (classnum < 0) { classnum = samsaraClassNum(); }

	for (i = 0; i < CLASSCOUNT; i++)
	{
		if (i == classnum) { continue; }

		for (j = 0; j < SLOTCOUNT; j++)
		{
			if (HasClassWeapon(i, j))
			{
				TakeInventory(ClassWeapons[i][j][S_WEP], INTMAX);
				if (classnum != -1) { GiveClassWeapon(classnum, j, 1, 0); }
				ret += 1;
			}
		}

		for (j = 0; j < UNIQUECOUNT; j++)
		{
			if (HasUnique(i, j))
			{
				k = j;
				TakeUnique(i, j);

				while (!_giveunique(classnum, k, 1, 0, 0) && k >= 0) { k--; }
			}
		}
	}


	return ret;
}

function int ammoCount(int ammoname)
{
	switch (ammoname)
	{
		case "Clip":       return 10;
		case "Shell":      return 4;
		case "RocketAmmo": return 1;
		case "Cell":       return 20;
	}

	return GetAmmoCapacity(ammoname); // not the best of defaults but ya gotta have SOMETHING
}

function int CheckQuad(void)
{
	return CheckInventory("QuakeQuadTimer") - QUAD_THRESHOLD;
}

function int GiveQuad(int toAdd)
{
	int quadcount = QUAD_THRESHOLD - CheckInventory("QuakeQuadTimer");
	GiveInventory("QuakeQuadTimer", quadcount);
	GiveInventory("QuakeQuadTimer", toAdd);

    if (!CheckInventory("QuakeQuadTimer") || CheckQuad() > 0 || CheckInventory("SamsaraHasDisabledInventoryCooldown") || !CheckInventory("QuadDamageItem")) { SetInventory("SamsaraQuadDamageCooldownDisplay", 0); }
    else { SetInventory("SamsaraQuadDamageCooldownDisplay", CheckInventory("QuakeQuadTimer") / 35 + 1); }

	if (GetCVar("samsara_permault"))
	{
		GiveInventory("DoNotQuad", 1);   // nasty hack
	}

	quadcount = max(0, CheckInventory("QuakeQuadTimer") - QUAD_THRESHOLD);

	return quadcount;
}

function int HandleUniqueSpawn (int respawning)
{
    int cs = GetCVar("samsara_uniquestart");
    int classnum = samsaraClassNum();
    int i;

    if (cs > 4) { cs = 4; }
    else if (cs < 0) { cs = 0; }

    if (cs == 0 || isLMS() || GetCVar("samsara_lmsrules")) { return 0; }

    switch (cs)
    {
      case 1:
        if (respawning && (isSinglePlayer() || isCoop())) { return 0; }
        // Fallthrough

      case 3:
        GiveUnique(classnum, -1, cs);
        break;

      case 2:
        if (respawning && (isSinglePlayer() || isCoop())) { return 0; }
        // Fallthrough

      case 4:
        for (i = 0; i < UNIQUECOUNT; i++)
        {
            if ((!CheckInventory("DoomguyClass") && !CheckInventory("WolfenClass")) || ((CheckInventory("DoomguyClass") || CheckInventory("WolfenClass")) && i == 0)) { GiveUnique(classnum, i, cs); } // temporary hack for having triplicated unique entries for altclass messages
        }
        break;
    }

    return 1;
}

function int HandleChainsawSpawn (int respawning) // gonna merge all the slots into one someday
{
    int cs = GetCVar("samsara_chainsawstart");
    int classnum = samsaraClassNum();
    int ammomode = 3;

    if (cs > 2) { cs = 2; }
    else if (cs < 0) { cs = 0; }

    if (cs == 0 || (respawning && (isSinglePlayer() || isCoop())) || isLMS() || GetCVar("samsara_lmsrules") || CheckInventory("SamsaraSlotIGiven")) { return 0; }

    if (cs == 2) { ammomode = 1; }

    GiveClassWeapon(classnum, SLOT_CHAINSAW, ammomode, cs);

    if (CheckInventory("MarathonClass")) { GiveInventory("CanDualPistols", 1); }

    GiveInventory("SamsaraSlotIGiven", 1);
    return 1;
}

function int HandleShotgunSpawn (int respawning)
{
    int cs = GetCVar("samsara_shotgunstart");
    int classnum = samsaraClassNum();
    int ammomode = 3;

    if (cs > 2) { cs = 2; }
    else if (cs < 0) { cs = 0; }

    if (cs == 0 || (respawning && (isSinglePlayer() || isCoop())) || isLMS() || GetCVar("samsara_lmsrules") || CheckInventory("SamsaraSlotIIGiven")) { return 0; }

    if (cs == 2) { ammomode = 1; }

    GiveClassWeapon(classnum, SLOT_SHOTGUN, ammomode, cs);

    GiveInventory("SamsaraSlotIIGiven", 1);
    return 1;
}

function int HandleBackpackSpawn (int respawning)
{
    bool cs = GetCVar("samsara_backpackstart");

    if (!cs || (respawning && (isSinglePlayer() || isCoop())) || isLMS() || GetCVar("samsara_lmsrules") || CheckInventory("SamsaraBackpackGiven")) { return 0; }

    ACS_NamedExecuteWithResult("Samsara_GiveBackpack", cs);

    GiveInventory("SamsaraBackpackGiven", 1);
    return 1;
}

function void CheckMapArmors(void)
{
	int i;

	for (i = 0; i < ARMORCOUNT; i++)
	{
        if (!strcmp(ArmorPickups[i], "")) { continue; }

		MapArmors[i] = ThingCountName(ArmorPickups[i], 0) > 0;
	}
}

function void SetArmorMode(void)
{
	if (ArmorMode < 0)
	{
		ArmorMode = middle(0, GetCVar("samsara_armormode"), ARMORMODES-1);
	}
}

function int HandleInstagib(int turnedOff)
{
	if(isZDoom())
		return 0;

	int cs = GetCvar("instagib");
	int classnum = samsaraClassNum();
	int i;

	if (!turnedOff && cs <= 0) return 0;
	else if (cs <= 0) { ConsoleCommand("set sv_infiniteammo 0"); return 0; }

	for (i = 0; i < SLOTCOUNT; i++)
	{
		TakeInventory(ClassWeapons[classnum][i][S_WEP], INTMAX);
		TakeInventory(ClassWeapons[classnum][i][S_AMMO1], INTMAX);
		TakeInventory(ClassWeapons[classnum][i][S_AMMO2], INTMAX);
	}

	ConsoleCommand("set sv_infiniteammo 1");
	ConsoleCommand("set sv_infiniteinventory 1");
	GiveInventory("InstagibModeOn",1);

	ACS_NamedExecuteAlways("HandleInstagibWeapons",0,0,0,0);
	return 1;
}

function int HandleBans (void)
{
    int classnum = samsaraClassNum(), altclassnum = samsaraAltClassNum();
    if (classnum == -1) { return 0; }

    bool classbanned = GetCVar(BanCVarsAndStrings[classnum][altclassnum][0]);

    if (classbanned)
    {
        KickFromGame(PlayerNumber(), BanCVarsAndStrings[classnum][altclassnum][1]);
        return 1;
    }

    return 0;
}

function int HandleBuffCVars (void)
{
    int classnum = samsaraClassNum(), altclassnum = samsaraAltClassNum();
    if (classnum == -1) { return 0; }

    // Since the CVars can be negative, we add to the cvar readings a value we know
    //   points to the "zero" index in the DamageModes/DefenseModes arrays.
    //   That way, -10 points to index 0 if the zero point is at index 10.

    // Before, this ran a couple loops to determine the correct item. This is not
    //   necessary when the items are static and causes a lot more memory to be used

    //int i, j;

    int dmgcvar = DamageAndDefenseCVars[classnum][altclassnum][0];
    int damagelevel = min(max(GetCVar(dmgcvar) + DAMAGEDEFENSEZEROINDEX, 0), DAMAGEDEFENSEMODES - 1);
    str damageitem = "Placeholder";
    int generaldamagelevel = min(max(GetCVar("samsara_generaldamage") + DAMAGEDEFENSEZEROINDEX, 0), DAMAGEDEFENSEMODES - 1);
    str generaldamageitem = "Placeholder";

    damageitem = CVarDamageAndDefenseItems[damagelevel][0];
    if (StrLen(damageitem)) { GiveInventory(damageitem, 1); }

    generaldamageitem = CVarDamageAndDefenseItems[generaldamagelevel][0];
    if (StrLen(generaldamageitem)) { GiveInventory(generaldamageitem, 1); }

    /*for (i = 0; i < DAMAGEDEFENSEMODES; i++)
    {
        j = CVarDamageAndDefenseItems[i][0];
        if (!StrLen(j)) { continue; }

        SetInventory(j, damagelevel == i || generaldamagelevel == i);
    }*/

    int defcvar = DamageAndDefenseCVars[classnum][altclassnum][1];
    int defenselevel = min(max(GetCVar(defcvar) + DAMAGEDEFENSEZEROINDEX, 0), DAMAGEDEFENSEMODES - 1);
    str defenseitem = "Placeholder";
    int generaldefenselevel = min(max(GetCVar("samsara_generaldefense") + DAMAGEDEFENSEZEROINDEX, 0), DAMAGEDEFENSEMODES - 1);
    str generaldefenseitem = "Placeholder";

    defenseitem = CVarDamageAndDefenseItems[defenselevel][1];
    if (StrLen(defenseitem)) { GiveInventory(defenseitem, 1); }

    generaldefenseitem = CVarDamageAndDefenseItems[generaldefenselevel][1];
    if (StrLen(generaldefenseitem)) { GiveInventory(generaldefenseitem, 1); }

    /*for (i = 0; i < DAMAGEDEFENSEMODES; i++)
    {
        j = CVarDamageAndDefenseItems[i][1];
        if (!StrLen(j)) { continue; }

        SetInventory(j, defenselevel == i || generaldefenselevel == i);
    }*/

    int speedlevel = min(max(GetCVar("samsara_speedmod") + SPEEDZEROINDEX, 0), SPEEDMODES - 1);
    str speeditem = "Placeholder";

    speeditem = CVarSpeedItems[speedlevel];
    if (StrLen(speeditem)) { GiveInventory(speeditem, 1); }

    /*for (i = 0; i < SPEEDMODES; i++)
    {
        j = CVarSpeedItems[i];
        if (!StrLen(j)) { continue; }

        SetInventory(j, speedlevel == i);
    }*/

    return 1;
}

function void HandleAmmoCapacities (int pickedup)
{
    int classNum = samsaraClassNum();

    int maxClip = GetCVar("samsara_max_clip");
    int maxShell = GetCVar("samsara_max_shell");
    int maxRocket = GetCVar("samsara_max_rockets");
    int maxCell = GetCVar("samsara_max_cell");
    int hasBackPack = 1 + (CheckInventory("Backpack") || CheckInventory("BagOfHolding") || CheckInventory("AmmoSatchel") || CheckInventory("Zorchpack"));

    if (maxClip < 0) { maxClip = 0; }
    if (maxShell < 0) { maxShell = 0; }
    if (maxRocket < 0) { maxRocket = 0; }
    if (maxCell < 0) { maxCell = 0; }
    if (hasBackPack == 1 && pickedup && !(classNum == CLASS_HEXEN || classNum == CLASS_DEMONESS || classNum == CLASS_CATACOMB || classNum == CLASS_QUAKE3)) { hasBackPack++; }

    int increasingClip = 0;
    int increasingShell = 0;
    int increasingRockets = 0;
    int increasingCell = 0;
    int increasingPerc = GetCVar("samsara_increasingammopercent");
    int increasingLimit = GetCVar("samsara_increasingammolimit");

    if (GetCVar("samsara_increasingammo") && increasingPerc > 0 && increasingLimit != 0)
    {
        int backPacks = max(0, CheckInventory("SamsaraBackpacksInInventory") - 1);

        if (backPacks > increasingLimit && increasingLimit >= 1) { backPacks = increasingLimit; }

        increasingClip = (maxClip * (increasingPerc * backPacks) / 100);
        increasingShell = (maxShell * (increasingPerc * backPacks) / 100);
        increasingRockets = (maxRocket * (increasingPerc * backPacks) / 100);
        increasingCell = (maxCell * (increasingPerc * backPacks) / 100);
    }

    bool noAmmoCap = GetCVar("samsara_noammocap");

    // Standard Ammo
    if (CheckInventory("Hexen2Class"))
    {
        SetAmmoCapacity("Clip", noAmmoCap ? INTMAXSAFE : (((maxClip * 5) / 4) * hasBackPack) + increasingClip + CheckInventory("Hexen2BlueManaAdd"));
        SetAmmoCapacity("Cell", noAmmoCap ? INTMAXSAFE : (((maxCell * 5) / 6) * hasBackPack) + increasingCell + CheckInventory("Hexen2GreenManaAdd"));
    } else {
        SetAmmoCapacity("Clip", noAmmoCap ? INTMAXSAFE : (maxClip * hasBackPack) + increasingClip);
        SetAmmoCapacity("Shell", noAmmoCap ? INTMAXSAFE : (maxShell * hasBackPack) + increasingShell);
        SetAmmoCapacity("RocketAmmo", noAmmoCap ? INTMAXSAFE : (maxRocket * hasBackPack) + increasingRockets);
        SetAmmoCapacity("Cell", noAmmoCap ? INTMAXSAFE : (maxCell * hasBackPack) + increasingCell);
    }

    // Stronghold Ammo
    SetAmmoCapacity("DoomguyStrMines", noAmmoCap ? INTMAXSAFE : ((maxRocket * hasBackPack) / 5) * 2);
    SetAmmoCapacity("DoomguyStrGas", noAmmoCap ? INTMAXSAFE : ((maxCell * hasBackPack) / 5) * 4);

    // Totenkopf Ammo
    SetAmmoCapacity("Totenkopf_FlameThrowerFuel", noAmmoCap ? INTMAXSAFE : ((maxCell * hasBackPack) / 3) * 2);

    // Duke 3D Ammo
    SetAmmoCapacity("ShrinkerAmmo", noAmmoCap ? INTMAXSAFE : (maxCell * hasBackPack) / 10);
    SetAmmoCapacity("ExpanderAmmo", noAmmoCap ? INTMAXSAFE : (maxCell * hasBackPack) / 3);

    // Duke 64 Ammo
    SetAmmoCapacity("Duke64DumDums", noAmmoCap ? INTMAXSAFE : ((maxClip * hasBackPack) / 100) * 12);
    SetAmmoCapacity("Duke64ExplosiveShells", noAmmoCap ? INTMAXSAFE : (maxShell * hasBackPack) / 10);
    SetAmmoCapacity("Duke64HeatSeekingRockets", noAmmoCap ? INTMAXSAFE : (maxRocket * hasBackPack * 2) / 8);
    SetAmmoCapacity("Duke64ShrinkerAmmo", noAmmoCap ? INTMAXSAFE : (maxCell * hasBackPack) / 15);

    // Marathon Ammo
    SetAmmoCapacity("KnifeAmmo", noAmmoCap ? INTMAXSAFE : 2);

    // Q1 Ammo
    SetAmmoCapacity("LavaNails", noAmmoCap ? INTMAXSAFE : ((maxClip * hasBackPack) / 4) * 3);
    SetAmmoCapacity("MultiRocketAmmo", noAmmoCap ? INTMAXSAFE : ((maxRocket * hasBackPack) / 5) * 2);
    SetAmmoCapacity("PlasmaCell", noAmmoCap ? INTMAXSAFE : (maxCell * hasBackPack) / 20);

    // RoTT Ammo
    SetAmmoCapacity("RottMissiles", noAmmoCap ? INTMAXSAFE : ((maxClip * hasBackPack) + increasingClip) / 2);
    SetAmmoCapacity("HSMissiles", noAmmoCap ? INTMAXSAFE : ((maxShell * hasBackPack) + increasingShell) / 2);
    SetAmmoCapacity("FBMissiles", noAmmoCap ? INTMAXSAFE : ((maxRocket * hasBackPack) + increasingRockets) / 2);
    SetAmmoCapacity("DMissiles", noAmmoCap ? INTMAXSAFE : ((maxCell * hasBackPack) + increasingCell) / 5);
    SetAmmoCapacity("SMissiles", noAmmoCap ? INTMAXSAFE : ((maxCell * hasBackPack) + increasingCell) / 3);
    SetAmmoCapacity("DMMissiles", noAmmoCap ? INTMAXSAFE : ((maxRocket * hasBackPack) + increasingRockets) / 2);
    SetAmmoCapacity("FWMissiles", noAmmoCap ? INTMAXSAFE : ((maxCell * hasBackPack) + increasingCell) / 30);
    SetAmmoCapacity("BMissiles", noAmmoCap ? INTMAXSAFE : (maxCell + increasingCell) / 30);
    SetAmmoCapacity("DSEnergy", noAmmoCap ? INTMAXSAFE : (maxCell + increasingCell) / 30);

    // Blood Ammo
    SetAmmoCapacity("SprayCanAmmo", noAmmoCap ? INTMAXSAFE : ((maxCell * hasBackPack) / 48) * 48);

    // Strife Ammo
    SetAmmoCapacity("StrifePoisonAmmo", noAmmoCap ? INTMAXSAFE : (maxShell * hasBackPack) / 2);
    SetAmmoCapacity("WhitePhosGrenade", noAmmoCap ? INTMAXSAFE : (maxRocket * hasBackPack) / 5);
    SetAmmoCapacity("StrifeGasGrenadeAmmo", noAmmoCap ? INTMAXSAFE : (maxRocket * hasBackPack) / 5);

    // C7 Ammo
    SetAmmoCapacity("C7ProxyMineAmmo", noAmmoCap ? INTMAXSAFE : (maxRocket * hasBackPack * 3) / 5);

    // Disruptor Ammo
    SetAmmoCapacity("DisruptorHiFreq", noAmmoCap ? INTMAXSAFE : ((maxClip * hasBackPack) / 4) * 3);
    SetAmmoCapacity("DisruptorBinaryLockOn", noAmmoCap ? INTMAXSAFE : ((maxRocket * hasBackPack) / 5) * 2);
    SetAmmoCapacity("DisruptorPSIEnergy", noAmmoCap ? INTMAXSAFE : ((maxCell * hasBackPack) * 2) / 3);

    // RR Ammo
    SetAmmoCapacity("MotoGunAmmo", noAmmoCap ? INTMAXSAFE : (maxClip * hasBackPack * 3) / 2);
    SetAmmoCapacity("ChickenAmmo", noAmmoCap ? INTMAXSAFE : (maxRocket * hasBackPack / 5) * 2);

    // Q2 Ammo
    SetAmmoCapacity("Q2Flechettes", noAmmoCap ? INTMAXSAFE : maxClip * hasBackPack);

    // GE Ammo
    SetAmmoCapacity("Goldeneye_ThrowingKnivesAmmo", noAmmoCap ? INTMAXSAFE : (maxShell * hasBackPack) / 8);
    SetAmmoCapacity("Goldeneye_GoldenGunRounds", noAmmoCap ? INTMAXSAFE : (maxCell * hasBackPack) / 12);

    // PK Ammo
    SetAmmoCapacity("Painkiller_FlamerAmmo", noAmmoCap ? INTMAXSAFE : ((maxClip * hasBackPack) * 3) / 4);
    SetAmmoCapacity("Painkiller_FreezerAmmo", noAmmoCap ? INTMAXSAFE : (maxShell * hasBackPack) / 10);
    SetAmmoCapacity("Painkiller_HeaterAmmo", noAmmoCap ? INTMAXSAFE : ((maxCell * hasBackPack) * 2) / 3);
    SetAmmoCapacity("Painkiller_ElectroAmmo", noAmmoCap ? INTMAXSAFE : (maxCell * hasBackPack * 2) / 3);
    
    // RTCW Ammo
    SetAmmoCapacity("RTCW_AlliedAmmo1", noAmmoCap ? INTMAXSAFE : (maxClip * hasBackPack) / 2);
    SetAmmoCapacity("RTCW_AlliedAmmo2", noAmmoCap ? INTMAXSAFE : (maxShell * hasBackPack) / 2);
    SetAmmoCapacity("RTCW_AlliedAmmo3", noAmmoCap ? INTMAXSAFE : (maxRocket * hasBackPack) / 2);
    SetAmmoCapacity("RTCW_AlliedAmmo4", noAmmoCap ? INTMAXSAFE : (maxCell * hasBackPack) / 2);

    // Q3 Ammo
    SetAmmoCapacity("Q3ChaingunAmmo", noAmmoCap ? INTMAXSAFE : (maxClip * hasBackPack / 2) * 3);
    SetAmmoCapacity("Q3GrenadeLauncherAmmo", noAmmoCap ? INTMAXSAFE : (maxRocket * hasBackPack / 2) * 3);

    // Deus Ex Ammo
    SetAmmoCapacity("DeusEx_LAWAmmo", noAmmoCap ? INTMAXSAFE : (maxRocket / 50) * 3);
}

function str GetBloodStateModifier(str state, int bloodSize)
{
	switch (bloodSize)
	{
		case BLOOD_MEDIUM: return StrParam(s: state, s: "Medium");
		case BLOOD_SMALL: return StrParam(s: state, s: "Small");
		case BLOOD_SPRAY: return StrParam(s: state, s: "Spray");
	}

	return state;
}

function int CheckSamsaraRecoilSettings (int player)
{
    // Check for clientside CVars
    if (GetUserCVar(player, "samsara_cl_norecoil") && !GetCVar("samsara_forcerecoil")) { return true; }

    // Next, check for serverside CVars
    if (GetCVar("sv_nofreelook")) { return true; }

    // We're done
    return false;
}

function void runGarbageScriptCollector (int player)
{
    for (int i = 0; i < CLASSCOUNT; i++)
    {
        if (PlayerClass(player) != i) { TakeInventory(ClassNames[i][1], 1); }
    }
}

function int ExecuteClassScripts (int player, int client)
{
    if (!client) { runGarbageScriptCollector(player); } //Insurance policy

    int pClass = PlayerClass(player);

    if (client)
    {
        if (playerClassesClient[player] == pClass) { return 0; }

        playerClassesClient[player] = pClass;

        switch (pClass)
        {
            case CLASS_ROTT:     ACS_NamedExecuteWithResult("RoTT452");           break;
            case CLASS_HALFLIFE: ACS_NamedExecuteWithResult("Freeman_HEV_Enter"); break;
            case CLASS_BOND:     ACS_NamedExecuteWithResult("BondHudDisplay");    break;
            case CLASS_RTCW:     ACS_NamedExecuteWithResult("RTCW_OverHeat");     break;
        }
    } else {
        if (playerClasses[player] == pClass) { return 0; }

        playerClasses[player] = pClass;

        switch (pClass)
        {
            case CLASS_HERETIC:      ACS_NamedExecuteWithResult("TomeOfPowerStartCheck"); break;
            case CLASS_ROTT:         ACS_NamedExecuteWithResult("RoTT453");               break;
            case CLASS_C7:           ACS_NamedExecuteWithResult("Corridor7Loop");         break;
            case CLASS_WITCHAVEN:    ACS_NamedExecuteWithResult("GrondovalLoop");         break;
            case CLASS_HALFLIFE:     ACS_NamedExecuteWithResult("Freeman_Loop");          break;
            case CLASS_SW:           ACS_NamedExecuteWithResult("LoWangLoop");            break;
            case CLASS_RR:           ACS_NamedExecuteWithResult("LeonardLoop");           break;
            case CLASS_BITTERMAN:    ACS_NamedExecuteWithResult("Q2Scripts");             break;
            case CLASS_DEMONESS:     ACS_NamedExecuteWithResult("Hexen2_Hud");            break;
            case CLASS_BOND:         ACS_NamedExecuteWithResult("BondAim");               break;
            case CLASS_PAINKILLER:   ACS_NamedExecuteWithResult("Painkiller_Loop");       break;
            case CLASS_UNREAL:       ACS_NamedExecuteWithResult("Unreal_Loop");           break;
            case CLASS_RTCW:         ACS_NamedExecuteWithResult("RTCW_Enter");            break;
            case CLASS_QUAKE3:       ACS_NamedExecuteWithResult("Q3Loop");                break;
            case CLASS_DESCENT:      ACS_NamedExecuteWithResult("DescentEnter");          break;
            case CLASS_DEUSEX:       ACS_NamedExecuteWithResult("DeusEx_Enter");          break;
            case CLASS_SHADOWCASTER: ACS_NamedExecuteWithResult("ShadowCaster_Loop");     break;
        }
    }

    return pClass;
}

function int DisconnectClassScripts(int player)
{
	int pClass = PlayerClass(player);
	switch(pClass)
	{
		case CLASS_ROTT:
			RemoveMessages(35200, 35200);
			break;
		case CLASS_HALFLIFE:   
			RemoveMessages(1,5);       
			RemoveMessages(17450,17460);   
			break;
		case CLASS_BOND:       
			RemoveMessages(12010, 12015);
			RemoveMessages(11900, 12050);
			break;
		case CLASS_PAINKILLER: 
			RemoveMessages(1495,1600);
			RemoveMessages(1490,1500);
			RemoveMessages(32600,32600);
			RemoveMessages(24001,24001);
			break;
		case CLASS_RTCW:       
			RemoveMessages(1200,1200);               
			break;
		case CLASS_QUAKE3:     
			RemoveMessages(25000,25320);            
			break;
		case CLASS_DESCENT:
			RemoveMessages(26800,26810);
			RemoveMessages(26850,26910);
			RemoveMessages(26950,26999);
			RemoveMessages(27800,27810);
			RemoveMessages(27850,27910);
			RemoveMessages(27950,27999);
			break;
		case CLASS_DEUSEX:     
			RemoveMessages(1550,1561);
			RemoveMessages(1500,1600);
			RemoveMessages(2000,2010);
			break;
	}
	return pClass;
}

function void autoUseHealth(int pClass, int threshold)
{
	int diff = threshold - GetActorProperty(0,APROP_Health);
	int stopTrying = 0;
	if(diff > 0)
	{
		switch(pClass)
		{
			default:
				if(UseInventory("SamsaraSurgeryKitInventory")) break;
				if(diff < 13)
				{
					if(UseInventory("SamsaraMedPatchInventory")) break;
					if(UseInventory("SamsaraMedicalKitInventory")) break;
				}
				if(UseInventory("SamsaraMedicalKitInventory")) break;
				if(UseInventory("SamsaraMedPatchInventory")) break;
				stopTrying = 1;
				break;
			case CLASS_HERETIC:
				if(UseInventory("CorvusMegasphere")) break;
				if(UseInventory("PortSuperHealth")) break;
				if(UseInventory("SamsaraSurgeryKitInventory")) break;
				if(diff < 13)
				{
					if(UseInventory("SamsaraMedPatchInventory")) break;
					if(UseInventory("PortQuartzFlask")) break;
					if(UseInventory("SamsaraMedicalKitInventory")) break;
				}
				if(UseInventory("PortQuartzFlask")) break;
				if(UseInventory("SamsaraMedicalKitInventory")) break;
				if(UseInventory("SamsaraMedPatchInventory")) break;
				stopTrying = 1;
				break;
			case CLASS_HEXEN:
				if(UseInventory("PortSuperHealth")) break;
				if(UseInventory("SamsaraSurgeryKitInventory")) break;
				if(diff < 13)
				{
					if(UseInventory("SamsaraMedPatchInventory")) break;
					if(UseInventory("PortQuartzFlask")) break;
					if(UseInventory("SamsaraMedicalKitInventory")) break;
				}
				if(UseInventory("PortQuartzFlask")) break;
				if(UseInventory("SamsaraMedicalKitInventory")) break;
				if(UseInventory("SamsaraMedPatchInventory")) break;
				stopTrying = 1;
				break;
			case CLASS_CALEB:
				if(UseInventory("CalebDoctorsBag")) break;
				if(UseInventory("SamsaraSurgeryKitInventory")) break;
				if(diff < 13)
				{
					if(UseInventory("SamsaraMedPatchInventory")) break;
					if(UseInventory("SamsaraMedicalKitInventory")) break;
				}
				if(UseInventory("SamsaraMedicalKitInventory")) break;
				if(UseInventory("SamsaraMedPatchInventory")) break;
				stopTrying = 1;
				break;
			case CLASS_STRIFE:	
				if(UseInventory("StrifeSurgeryKit2")) break;
				if(UseInventory("SamsaraSurgeryKitInventory")) break;
				if(diff < 13)
				{
					if(UseInventory("StrifeStimpack2")) break;
					if(UseInventory("SamsaraMedPatchInventory")) break;
					if(UseInventory("StrifePortMedikit")) break;
					if(UseInventory("SamsaraMedicalKitInventory")) break;
				}		
				if(UseInventory("StrifePortMedikit")) break;
				if(UseInventory("SamsaraMedicalKitInventory")) break;
				if(UseInventory("StrifeStimpack2")) break;
				if(UseInventory("SamsaraMedPatchInventory")) break;
				stopTrying = 1;
				break;
			case CLASS_RMR:
				if(UseInventory("RMROxygenRecycler")) break;
				if(UseInventory("SamsaraSurgeryKitInventory")) break;
				if(diff < 13)
				{
					if(UseInventory("SamsaraMedPatchInventory")) break;
					if(UseInventory("SamsaraMedicalKitInventory")) break;
				}
				if(UseInventory("SamsaraMedicalKitInventory")) break;
				if(UseInventory("SamsaraMedPatchInventory")) break;
				stopTrying = 1;
				break;
			case CLASS_POGREED:
				if(UseInventory("SamsaraSurgeryKitInventory")) break;
				if(diff < 13)
				{
					if(UseInventory("SamsaraMedPatchInventory")) break;
					if(UseInventory("Medtube")) break;
					if(UseInventory("SamsaraMedicalKitInventory")) break;
				}
				if(UseInventory("Medtube")) break;
				if(UseInventory("SamsaraMedicalKitInventory")) break;
				if(UseInventory("SamsaraMedPatchInventory")) break;
				stopTrying = 1;
				break;
			case CLASS_WITCHAVEN:
				if(UseInventory("SamsaraSurgeryKitInventory")) break;
				if(diff < 13)
				{
					if(UseInventory("SamsaraMedPatchInventory")) break;
					if(UseInventory("WTHealthPhial")) break;
					if(UseInventory("SamsaraMedicalKitInventory")) break;
				}
				if(UseInventory("WTHealthPhial")) break;
				if(UseInventory("SamsaraMedicalKitInventory")) break;
				if(UseInventory("SamsaraMedPatchInventory")) break;
				stopTrying = 1;
				break;
			case CLASS_CM:
				if(UseInventory("SamsaraSurgeryKitInventory")) break;
				if(diff < 13)
				{
					if(UseInventory("SamsaraMedPatchInventory")) break;
					if(UseInventory("CybermageMedkit")) break;
					if(UseInventory("SamsaraMedicalKitInventory")) break;
				}
				if(UseInventory("CybermageMedkit")) break;
				if(UseInventory("SamsaraMedicalKitInventory")) break;
				if(UseInventory("SamsaraMedPatchInventory")) break;
				stopTrying = 1;
				break;
			case CLASS_RR:
				if(UseInventory("RRCheapasswhiskey")) break;
				if(UseInventory("SamsaraSurgeryKitInventory")) break;
				if(diff < 13)
				{
					if(UseInventory("SamsaraMedPatchInventory")) break;
					if(UseInventory("RRCowPie")) break;
					if(UseInventory("RRBubbaBeer")) break;
					if(UseInventory("SamsaraMedicalKitInventory")) break;
				}
				if(UseInventory("RRCowPie")) break;
				if(UseInventory("RRBubbaBeer")) break;
				if(UseInventory("SamsaraMedicalKitInventory")) break;
				if(UseInventory("SamsaraMedPatchInventory")) break;
				stopTrying = 1;
				break;
			case CLASS_DEMONESS:
				if(UseInventory("PortSuperHealth3")) break;
				if(UseInventory("SamsaraSurgeryKitInventory")) break;
				if(diff < 13)
				{
					if(UseInventory("SamsaraMedPatchInventory")) break;
					if(UseInventory("PortQuartzFlask3")) break;
					if(UseInventory("SamsaraMedicalKitInventory")) break;
				}
				if(UseInventory("PortQuartzFlask3")) break;
				if(UseInventory("SamsaraMedicalKitInventory")) break;
				if(UseInventory("SamsaraMedPatchInventory")) break;
				stopTrying = 1;
				break;
			case CLASS_CATACOMB:
				if(UseInventory("Catacomb_LargeHealthPotion")) break;
				if(UseInventory("SamsaraSurgeryKitInventory")) break;
				if(diff < 13)
				{
					if(UseInventory("SamsaraMedPatchInventory")) break;
					if(UseInventory("Catacomb_SmallHealthPotion")) break;
					if(UseInventory("SamsaraMedicalKitInventory")) break;
				}
				if(UseInventory("Catacomb_SmallHealthPotion")) break;
				if(UseInventory("SamsaraMedicalKitInventory")) break;
				if(UseInventory("SamsaraMedPatchInventory")) break;
				stopTrying = 1;
				break;
		}
		if (!isDead(0) && GetActorProperty(0, APROP_Health) < threshold && !stopTrying) { autoUseHealth(pClass, threshold); }
	}
}

function void AdjustHealthOverMaxDisplay (void)
{
    SetInventory("SamsaraHealthOverMax", getMaxHealth(0) * 2);
    SetInventory("SamsaraHealthOverOverMax", getMaxHealth(0) * 3);
}

function void AdjustArmorDisplays (void)
{
    int pln = PlayerNumber();

    if (GetArmorType("ArmorPack5ArmorMarathon", pln)) { SetInventory("SamsaraArmorCategory", 10); }
    else if (GetArmorType("ArmorPack2ArmorMarathon", pln) ||
             GetArmorType("EnchantedShield", pln) ||
             GetArmorType("ArmorPack3ArmorHeretic", pln) || GetArmorType("StrifeArmorPack3ArmorHeretic", pln))
    { SetInventory("SamsaraArmorCategory", 9); }
    else if (GetArmorType("ArmorScrapArmorQuake", pln) || GetArmorType("MaxArmorScrapArmorQuake", pln) ||
             GetArmorType("ArmorScrapDumpArmorQuake", pln) ||
             GetArmorType("ArmorPackBonusLightArmorQuake", pln) ||
             GetArmorType("ArmorPackBonusHeavyArmorQuake", pln) ||
             GetArmorType("ArmorPack1ArmorQuake", pln) || GetArmorType("StrifeArmorPack1ArmorQuake", pln))
    { SetInventory("SamsaraArmorCategory", 8); }
    else if (GetArmorType("ArmorScrapArmorHeretic", pln) || GetArmorType("MaxArmorScrapArmorHeretic", pln) ||
             GetArmorType("ArmorScrapDumpArmorHeretic", pln) ||
             GetArmorType("ArmorPackBonusLightArmorHeretic", pln) ||
             GetArmorType("ArmorPackBonusHeavyArmorHeretic", pln) ||
             GetArmorType("SilverShield", pln) ||
             GetArmorType("ArmorPack1ArmorHeretic", pln) || GetArmorType("StrifeArmorPack1ArmorHeretic", pln) ||
             GetArmorType("ArmorPack4ArmorQuake", pln) ||
             GetArmorType("StrifeArmorPack3ArmorQuakePlusTier2Active", pln) ||
             GetArmorType("SilverArmor", pln) || // just in case
             GetArmorType("ArmorPack5ArmorNormal", pln))
    { SetInventory("SamsaraArmorCategory", 7); }
    else if (GetArmorType("ArmorScrapArmorQuakePlus", pln) || GetArmorType("MaxArmorScrapArmorQuakePlus", pln) ||
             GetArmorType("ArmorScrapDumpArmorQuakePlus", pln) ||
             GetArmorType("ArmorPackBonusLightArmorQuakePlus", pln) ||
             GetArmorType("ArmorPackBonusHeavyArmorQuakePlus", pln) ||
             GetArmorType("YellowArmor", pln) || // just in case
             GetArmorType("ArmorPack2ArmorNormal", pln) ||
             GetArmorType("ArmorPack2ArmorQuake", pln) || GetArmorType("StrifeArmorPack3ArmorQuakeTier2Inactive", pln) ||
             GetArmorType("StrifeArmorPack1ArmorQuakePlus", pln) ||
             GetArmorType("ArmorPack2ArmorHeretic", pln) ||
             GetArmorType("ArmorPack3ArmorMarathon", pln) || GetArmorType("StrifeArmorPack3ArmorMarathon", pln))
    { SetInventory("SamsaraArmorCategory", 6); }
    //else if (GetArmorType("", pln)) { SetInventory("SamsaraArmorCategory", 5); } // hexen 25 armor pickups give 25 points of tier 1 armor
    else if (GetArmorType("ArmorScrapArmorMarathon", pln) || GetArmorType("MaxArmorScrapArmorMarathon", pln) ||
             GetArmorType("ArmorScrapDumpArmorMarathon", pln) ||
             GetArmorType("ArmorPackBonusLightArmorMarathon", pln) ||
             GetArmorType("ArmorPackBonusHeavyArmorMarathon", pln) ||
             GetArmorType("ArmorPack1ArmorMarathon", pln) || GetArmorType("StrifeArmorPack1ArmorMarathon", pln) ||
             GetArmorType("ArmorPack3ArmorQuake", pln) || GetArmorType("StrifeArmorPack3ArmorQuakeTier2Active", pln) ||
             GetArmorType("StrifeArmorPack3ArmorQuakePlusTier2Inactive", pln) ||
             GetArmorType("RedArmor", pln) || // why not?
             GetArmorType("ArmorPack4ArmorNormal", pln) ||
             GetArmorType("ArmorPack4ArmorHeretic", pln))
    { SetInventory("SamsaraArmorCategory", 4); }
    else if (GetArmorType("BasicArmorPickup", pln) || GetArmorType("BlueArmor", pln) || GetArmorType("BlueArmorForMegasphere", pln) || GetArmorType("MetalArmor", pln) || GetArmorType("SuperChexArmor", pln) || // BasicArmorPickup is given by armor cheat
             GetArmorType("ArmorPack3ArmorNormal", pln) || GetArmorType("StrifeArmorPack3ArmorNormal", pln) ||
             GetArmorType("FuckArmor", pln))
    { SetInventory("SamsaraArmorCategory", 3); }
    else if (GetArmorType("BasicArmorBonus", pln) || GetArmorType("ArmorBonus", pln) || GetArmorType("MaxArmorBonus", pln) || GetArmorType("SlimeRepellent", pln) ||
             GetArmorType("ArmorScrapArmorNormal", pln) || GetArmorType("ArmorScrap100", pln) || GetArmorType("ArmorScrap200", pln) || GetArmorType("InfiniteArmorBonus", pln) || GetArmorType("MaxArmorScrapArmorNormal", pln) ||
             GetArmorType("ArmorScrapDumpArmorNormal", pln) ||
             GetArmorType("ArmorPackBonusLightArmorNormal", pln) ||
             GetArmorType("ArmorPackBonusHeavyArmorNormal", pln) ||
             GetArmorType("GreenArmor", pln) || GetArmorType("LeatherArmor", pln) || GetArmorType("ChexArmor", pln) ||
             GetArmorType("ArmorPack1ArmorNormal", pln) || GetArmorType("StrifeArmorPack1ArmorNormal", pln))
    { SetInventory("SamsaraArmorCategory", 2); }
    else if (GetArmorType("ArmorPack4ArmorMarathon", pln) ||
             GetArmorType("ArmorPack5ArmorHeretic", pln))
    { SetInventory("SamsaraArmorCategory", 1); }
    else { SetInventory("SamsaraArmorCategory", 0); } // other armors

    if (CheckInventory("BasicArmor") > 0)
    {
        // some of these armors need special adjustments. there's probably a better way to do this, but I don't know what it could be
        if (GetArmorType("ArmorPack4ArmorHeretic", pln)) { SetInventory("SamsaraArmorSavePercent", 87); }
        else if (GetArmorType("ArmorPack2ArmorHeretic", pln)) { SetInventory("SamsaraArmorSavePercent", 67); }
        else if (GetArmorType("RedArmor", pln) || // why not?
                 GetArmorType("ArmorPack4ArmorNormal", pln))
        { SetInventory("SamsaraArmorSavePercent", 66); }
        else { SetInventory("SamsaraArmorSavePercent", roundZandronum(GetArmorInfo(ARMORINFO_SAVEPERCENT) * 100)); }
    }
    else { SetInventory("SamsaraArmorSavePercent", 0); }
}

function void CalcPlayerSpawnHealth (void)
{
    int classNum = samsaraClassNum();
    int storedhp = CheckInventory("SamsaraBaseSpawnHealth");

    // get base max health if we're not forcing a custom one

    if (!storedhp)
    {
        switch (classNum)
        {
          default:
            storedhp = 100;
            break;

          case CLASS_DEMONESS:
            storedhp = 70;
            break;
        }
    }

    // increase base max health through leveling

    switch (classNum)
    {
      case CLASS_WITCHAVEN:
        storedhp += CheckInventory("SamsaraWitchavenHealthIncrease");
        break;

      case CLASS_DEMONESS:
        storedhp += CheckInventory("Hexen2HealthAdd");
        break;
    }

    // increase base max health through these generic tokens

    storedhp += CheckInventory("SamsaraExtraBaseSpawnHealth") + CheckInventory("SamsaraExtraBaseSpawnHealthDeterminant") + CheckInventory("SamsaraExtraBaseSpawnHealthPermanent");

    // multi runes support: set base max health to whatever prosperity_max_health is set to if it's below the cvar

    if (CheckInventory("PowerProsperity1") && GetCVar("prosperity_max_health") > storedhp) { storedhp = GetCVar("prosperity_max_health"); }

    // add max health supplement through a similar manner to health upgrading through zandronum/gzdoom

    switch (classNum)
    {
      case CLASS_STRIFE:
        storedhp += CheckInventory("StaminaUpgradeHealth");
        break;
    }

    // add max health supplement through these generic tokens plus another similar manner to health upgrading through zandronum

    storedhp += CheckInventory("SamsaraExtraSpawnHealth") + CheckInventory("SamsaraExtraSpawnHealthDeterminant") + CheckInventory("SamsaraExtraSpawnHealthPermanent") + CheckInventory("SamsaraHasMaxHealth");

    // set our max health now!

    SetActorProperty(0, APROP_SpawnHealth, storedhp);

    // apply finishing touch to hud

    AdjustHealthOverMaxDisplay();
}
