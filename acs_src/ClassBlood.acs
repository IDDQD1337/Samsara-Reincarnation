#define MAX_BLOOD_ANGLE        2047
#define BLOOD_ANGLE_TO_DEGREES 0.17578125

Script "CalebUnique" (void) //599
{
	int u = ActivatorTID();
	SetActivatorToTarget(0);
	Thing_ChangeTID(u, CheckInventory("Voodoo")/2+1);
}

script "CalebTauntCooldown" (void) //600
{
	while (CheckInventory("CalebTauntCooldown") > 0)
	{
		Delay(35);
		TakeInventory("CalebTauntCooldown", 1);
	}
}

Script "CalebLifeLeech" (void) //603
{
	if (CheckWeapon("LifeLeech") && !CheckInventory("SamsaraHasInfiniteAmmo"))
	{
		if (CheckInventory("Cell") >= 1)
			TakeInventory("Cell", 2);
		else
			Thing_Damage2(0, 1, "Suicide");
	}
}

Script "FlareGunPitch" (void)
{
	SetActivator(0, AAPTR_TARGET);
	int pitch = GetActorPitch(0);
	SetResultValue(pitch);
}

Script "Caleb_BurningManVoice" (int mode)
{
	bool crashDebuggerEnabled = GetCVar("samsara_CrashDebugger");
	int speed;
	str painSound, deathSound;
	int master = UniqueTID();

	Thing_ChangeTID(0, master);
	SetActivator(0, AAPTR_MASTER);

	if (crashDebuggerEnabled)
	{
		Log(s: "Debugger: Burning Enemy: ", s: GetActorClass(0));
	}

	switch (mode)
	{
		case 1:
			speed = GetActorProperty(0, APROP_Speed);
			painSound = GetActorProperty(0, APROP_PainSound);
			deathSound = GetActorProperty(0, APROP_DeathSound);

			SetActivator(master);

			if (painSound != "")
			{
				SetActorProperty(0, APROP_PainSound, painSound);
			}
			if (deathSound != "")
			{
				SetActorProperty(0, APROP_DeathSound, deathSound);
			}

			if (crashDebuggerEnabled)
			{
				Log(s: "Debugger: Pass");
			}

			SetActorProperty(0, APROP_Speed, speed/2);
			break;

		case 2:
			speed = GetActorProperty(0, APROP_Speed);
			deathSound = GetActorProperty(0, APROP_DeathSound);

			SetActivator(master);

			if (deathSound != "")
			{
				SetActorProperty(0, APROP_DeathSound, deathSound);
			}

			if (crashDebuggerEnabled)
			{
				Log(s: "Debugger: Pass");
			}

			SetActorProperty(0, APROP_Speed, speed/2);
			break;
	}
}

Script "BurningManSpeed" (void) // will just have to wait until 4.0 before you can use a_setspeed I guess
{
	SetActorProperty(0, APROP_Speed, 7 << 16);
}

script "SamsaraBloodGunsAkimboCooldown" (void)
{
	while (CheckInventory("SamsaraBloodGunsAkimboCooldown"))
	{
		Delay(35);
		TakeInventory("SamsaraBloodGunsAkimboCooldown", 1);
	}
}

script "SamsaraBloodGunsAkimboCooldownDecrement" (void) { SetInventory("SamsaraBloodGunsAkimboCooldown", CheckInventory("SamsaraBloodGunsAkimboCooldown") / 2); }

Script "CalebRetrieveLifeLeech" (void)
{
	int isAlive = ClassifyActor(0) & ACTOR_ALIVE;
	int lifeLeechTid = ActivatorTID();

	SetActivator(0,AAPTR_MASTER);

	if (CheckInventory("CalebClass") && isAlive)
	{
		GiveInventory("LifeLeech", 1);
		SetActorState(lifeLeechTid,"Death",1);
		GiveInventory("GotWeapon7",1);
	}
}

Script "CalebLifeLeechTurretMarkForDeath" (void)
{
	if (CheckInventory("LifeLeechMarkedForDeath"))
		terminate;

	int lifeLeechTid = ActivatorTID();

	SetActivator(0,AAPTR_MASTER);

	if (ClassifyActor(0) & ACTOR_DEAD)
	{
		SetActivator(lifeLeechTid);
		GiveInventory("LifeLeechMarkedForDeath",1);
		Delay(175);
		SetActorState(0,"Death",1);
	}
}

Script "CalebAltSpreadAngle" (void)
{
	int angle = -1 * ((8 * CheckInventory("CalebAltSpreadCounter") - 56) % MAX_BLOOD_ANGLE * BLOOD_ANGLE_TO_DEGREES);

	SetResultValue(angle);
}

Script "CalebThrowStrength" (void)
{
	int newTid = UniqueTID();
	SpawnForced("CalebTNTShootable",GetActorX(0),GetActorY(0),GetActorZ(0),newTid);
	SetPointerExt(AAPTR_MASTER,0,newTid);
	SetActivator(0,AAPTR_TARGET);
	int power = CheckInventory("ThrowPower");
	int projfired = CheckInventory("SamsaraHasSpread") ? 3 : 1;
	GiveInventory("SamsaraBloodThrowChecks", 1);
	if (CheckInventory("SamsaraBloodThrowChecks") >= projfired)
	{
		SetInventory("ThrowPower", 0);
		SetInventory("SamsaraBloodThrowChecks", 0);
	}
	SetResultValue(power);
}

Script "CalebThrowDuration" (int switchcase)
{
	int baseDuration = GetAmmoCapacity("ThrowPowerBig");

	SetActorProperty(0,APROP_ReactionTime,baseDuration-ACS_NamedExecuteWithResult("CalebCheckThrowTimer"));
}

Script "CalebCheckThrowTimer" (void)
{
	SetActivator(0,AAPTR_TARGET);
	int power = CheckInventory("ThrowPowerBig");
	int projfired = CheckInventory("SamsaraHasSpread") ? 3 : 1;
	GiveInventory("SamsaraBloodThrowChecksBig", 1);
	if (CheckInventory("SamsaraBloodThrowChecksBig") >= projfired)
	{
		SetInventory("ThrowPowerBig", 0);
		SetInventory("SamsaraBloodThrowChecksBig", 0);
	}
	SetResultValue(power);
}

Script "CalebTossableHitBox" (void)
{
	if (!Warp(AAPTR_MASTER,0,0,0,0,WARPF_USEPTR|WARPF_NOCHECKPOSITION))
	{
		Thing_Remove(0);
	}
}

Script "CalebTossableDetonate" (void)
{
	SetActivator(0,AAPTR_MASTER);
	SetActorProperty(0,APROP_ReactionTime,0);
	SetActorState(0,"Detonate",0);
}

Script "CalebTossableResolve" (int reactionTime, int strength, int type)
{
	switch (type)
	{
		case 0:
			if (strength == 0 && reactionTime > 0) SetActorState(0,"Stay",1);
			else SetActorState(0,"XDeath",1);
			break;
		case 1:
			if (reactionTime > 0) SetActorState(0,"Stay",1);
			else SetActorState(0,"Explode",1);
			break;
		case 2:
			if (reactionTime > 0)
			{
				if (CheckInventory("ProximityTNTArmed")) SetActorState(0,"ChargeLoop",1);
				else SetActorState(0,"Stay",1);
			}
			else SetActorState(0,"Explode",1);
			break;
	}
}

Script "CalebSelfDamage" (int type)
{
	switch (type)
	{
		case 0:
			ACS_NamedExecuteWithResult("CalebBurner",1,5);
			Thing_Damage2(0,5,"CalebFire");
			break;
		case 1:
			Thing_Damage2(0,100,"Dynamite");
			break;
	}
}

Script "CalebBurner" (int notracer, int extraburn)
{
	if (!notracer) SetActivator(0,AAPTR_TRACER);
	int height = GetActorProperty(0,APROP_Height);
	int radius = GetActorProperty(0,APROP_Radius);

	if ((ClassifyActor(0) & ACTOR_PLAYER) && CheckInventory("BloodBurnVFXHudFlames") == 0)
		ACS_NamedExecuteWithResult("CalebBurningHud");

	GiveInventory("BloodBurnVFXHudFlames",1+extraburn);

	for (int flameCount = 0; GetActorProperty(0,APROP_Health) > 0 && flameCount <= 14; flameCount++)
	{
		Spawn("BloodBurnVFX",GetActorX(0)+random(-radius,radius),GetActorY(0)+random(-radius,radius),GetActorZ(0)+random(0,height));
		Delay(1);
	}

	TakeInventory("BloodBurnVFXHudFlames",1+extraburn);
}

Script "CalebBurningHud" (void) clientside
{
	str flameGraphic = "";
	int flameCount = 0;
	int graphicCounter = 0;
	int id = 0;
	SetHudSize(320,200,0);

	while (ClassifyActor(0) & ACTOR_PLAYER)
	{
		graphicCounter = (flameCount/2);
		if (graphicCounter > 13) graphicCounter -= 14;
		flameGraphic = StrParam(s:"BF01",c:65+flameCount,d:0);
		SetFont(flameGraphic);
		for (id = 0; id < 12; id++)
		{
			HudMessage(s:"a";HUDMSG_LAYER_UNDERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN,32750+id,CR_UNTRANSLATED,0.1+(id*56.0)-224.0,280.2-(8.0*abs((id-6)/2))-((CheckInventory("BloodBurnVFXHudFlames"))*2.0),0.0);
		}
		Delay(1);
		flameCount++;
		if (CheckInventory("BloodBurnVFXHudFlames") < 1) break;
	}
	for (id = 0; id < 12; id++) HudMessage(s:"";HUDMSG_LAYER_UNDERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN,32750+id,CR_UNTRANSLATED,0,0,0.1);
	//RemoveMessages(32750,32751);
}

Script "CalebTeslaSwitch" (void)
{
	if (ClassifyActor(0) & ACTOR_DEAD) terminate;
	int scaleX = GetActorProperty(0,APROP_ScaleX);
	int scaleY = GetActorProperty(0,APROP_ScaleY);
	int totalScale = (scaleX + scaleY) / 2; //We want the average, not the magnitude
	SetActorState(0,StrParam(s:"CalebTesla",d:(((1.0-totalScale))/3275)+6),true);
}

Script "CalebTeslaBlink" (void)
{
	Thing_Stop(0);
	if ((Timer()%4) < 2) ACS_NamedExecuteWithResult("CalebTeslaTurnOffBrightness");
	SetResultValue((Timer()%4) < 2);
}

Script "CalebTeslaBlinkNonHumanoid" (void)
{
	int renderStyle = GetActorProperty(0,APROP_RenderStyle);
	SetActorProperty(0,APROP_Renderstyle,STYLE_STENCIL);
	for (int stunTimer = 0; stunTimer < 24 && ClassifyActor(0) & ACTOR_ALIVE; stunTimer++)
	{
		switch (stunTimer%6)
		{
			case 0: SetActorProperty(0,APROP_StencilColor,0x2F324A); break;
			case 1: SetActorProperty(0,APROP_StencilColor,0x62677F); break;
			case 2: SetActorProperty(0,APROP_StencilColor,0x7784A8); break;
			case 3: SetActorProperty(0,APROP_StencilColor,0x62677F); break;
			case 4: SetActorProperty(0,APROP_StencilColor,0x2F324A); break;
			case 5: SetActorProperty(0,APROP_StencilColor,0x000000); break;
		}
		Thing_Stop(0);
		Delay(2);
	}

	SetActorProperty(0,APROP_RenderStyle,renderStyle);
	GiveInventory("BloodTurnOffTeslaBrightness",1);
}

//In case a monster dies, ya know
Script "CalebTeslaTurnOffBrightness" (void)
{
	Delay(2);
	if (ClassifyActor(0) > 1) GiveInventory("BloodTurnOffTeslaBrightness",1);
}

script "CalebBeastVisionDrain" (void)
{
	if (CheckInventory("CalebVision"))
	{
		if (CheckInventory("CalebVisionFuel") || CheckInventory("SamsaraHasInfiniteInventory"))
		{
			Delay(10);
			if (!CheckInventory("SamsaraHasInfiniteInventory")) { TakeInventory("CalebVisionFuel", 1); }
			restart;
		} else {
			//PlaySound(0, "Caleb/Powerup", CHAN_ITEM);
			SetInventory("CalebVision", 0);
			TakeInventory("PowerLightAmp", 1);
		}
	}

	if (!CheckInventory("CalebVisionFuel") && !CheckInventory("SamsaraHasInfiniteInventory")) { SetInventory("BeastVision", 0); }
}

script "CalebTetheredEffect" (int type) clientside
{
	int effectTid = UniqueTID();
	str effectClassname;

	switch (type)
	{
		case 0: effectClassname = "FlareFireStar"; break;
		case 1: effectClassname = "FlareAltStar"; break;
		case 2: effectClassname = "TeslaProjectileBall"; break;
	}

	int missileTid = SpawnMissileEffect(effectClassname, effectTid);

	while (ClassifyActor(missileTid) & ACTOR_MISSILE)
	{
		Warp(missileTid,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_COPYINTERPOLATION);
		Delay(1);
	}

	Thing_Remove(effectTid);
}