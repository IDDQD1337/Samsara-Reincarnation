//======================================================================================================================
//										General Scripts that don't serve one set purpose
//======================================================================================================================

//SCRIPTS
//200:
//201: Check if SP/DM/co-op for the Tome of Power/Morph Ovum.
//202: Cooldown for Tome of Power.
//203: Take away all the shit on level ending!
//204: Boss monologues.
//205: Cooldown for Duke's taunts.
//207: Flechette cooldown.
//208: Buddha mode for B.J.'s Extra Life.
//209: Activate Send Full Button Info and activate sv_banjetpack/sv_lmslife/sv_lmsult.
//212: Displaying text.
//214: Duke Jetpack/Visor fuel draining.
//901-902: I'm pretty sure Synert is a wizard, too.
//224: Doomguy's vanilla animations. By Ijon Tichy, transcribed by Llewellyn.
//225: Weapon bar. By Ijon Tichy, transcribed by Llewellyn.

script "SamsaraDecorate" (int choice, int arg1, int arg2) //215 - SAMSARA_DECORATE
{
	int clipcount;
	int result;
	int i, j, k;
	int x, y, z;
	int armorIndex, armorToSet;
	int pln = PlayerNumber();
    str ammotype = "Placeholder";

	switch (choice)
	{
	case 1:
		result = GetActorProperty(0, APROP_Dropped);
		break;

	case 2:
		if (CheckInventory("WolfenMovement") == 1) { SetActorState(0, "Spawn"); }
		break;

	case 3:
		result = !(GetCVar("sv_itemrespawn") || GetCVar("sv_weaponstay"));
		break;

	case 4:
		result = isInvasion() || !(isCoop() || isSinglePlayer());
		break;

	case 5:
        if (arg1 >= 1) // get discharge amount
        {
            SetActivatorToTarget(0);

            result = CheckInventory("SamsaraWeaponDischargeAmount");
        } else { // set discharge amount
            switch (arg2)
            {
              case 0: // Thunderbolt (Lightning Mode)
                ammotype = "Cell";
                break;

              case 1: // Thunderbolt (Plasma Mode)
                ammotype = "PlasmaCell";
                break;

              case 2: // Shock Roach
                ammotype = "ShockRoachAmmo";
                break;
            }

            if (CheckInventory("SamsaraHasInfiniteAmmo")) { SetInventory("SamsaraWeaponDischargeAmount", GetAmmoCapacity(ammotype)); }
            else { SetInventory("SamsaraWeaponDischargeAmount", CheckInventory(ammotype)); }
        }
        break;

	case 6:
		result = GetCVar("skulltag");
		break;

	case 7:
		if (arg2 != 1)
		{
			GiveQuad(arg1);
		}
		else
		{
			if (isLMS())
			{
				if (GetCvar("samsara_permaquad") == 1)
				{ GiveInventory("QuadDamageItem", 1); }
				break;
			}

			GiveQuad(arg1);

			if (GetCvar("samsara_permaquad") == 1)//if (isCoop() || isSinglePlayer())
			{ GiveInventory("QuadDamageItem", 1); }
		}
		break;

	case 8:
		if (GetCVar("samsara_runninginzdoom")) { result = GetCVar("samsara_zd_expparticles"); }
		else { result = GetUserCVar(ConsolePlayerNumber(), "samsara_cl_expparticles"); }

		if (result == 0) { result = 100; } // default

		if (result > 0)
		{
			result = max(0, result);

			result *= max(arg1, 1);
			result /= max(arg2, 1);

			GiveInventory("QuakeExplosionCounter", result);
		}
		break;

	case 9:
		clipcount = CheckInventory("Clip");

		if (clipcount < 50)
		{
			GiveInventory("Clip", 50 - clipcount);
			TakeInventory("Clip", CheckInventory("Clip") - 50);
			result = 1;
		}
		break;

	case 10:
		TakeInventory("QuakeExplosionCounter", arg1);
		result = CheckInventory("QuakeExplosionCounter");
		break;

	case 15:
		SetActorProperty(0, APROP_Speed, percFloat(arg1, arg2));
		break;

	case 16:
		SetHudSize(400, 300, 0);

		if (IsSinglePlayer() && !GetCVar("sv_singleplayerrespawn")) { HudMessage(l:"DUKEDEADMESSAGERESTART"; HUDMSG_PLAIN, 1024, CR_LIGHTBLUE, 200.4, 9.1, 1.75); }
		else { HudMessage(l:"DUKEDEADMESSAGERESPAWN"; HUDMSG_PLAIN, 1024, CR_LIGHTBLUE, 200.4, 9.1, 1.75); }

		Delay(15);

		if (!CheckInventory("DukeBallgag"))
		{
			if (CheckInventory("DukeLegacyVoices")) { LocalAmbientSound("duke/old_mpdeath", 127); } else { LocalAmbientSound("duke/mpdeath", 127); }
			GiveInventory("DukeTauntCooldown", 5);
			ACS_NamedExecuteAlways("DukeTauntCooldown", 0);
		}
		break;

	case 17:
		if (arg1) { result = GetCVar("samsara_permault"); }
		else { result = GetCVar("sv_weaponstay"); }
		break;

	case 18:
		if (MapArmors[0] == -1) { CheckMapArmors(); }
		SetArmorMode();

		i = Timer() != 0;

		if (MapArmors[ARMOR_YELLOW] == 1) { i += 2; }

		SetActorState(0, ArmorModeStates[ArmorMode][i]);
		break;

	case 19:
		result = isLMS();
		break;

	case 20:
		SetArmorMode();

		armorIndex = -1;
		armorToSet = arg1;

		for (i = 0; i < ARMORCOUNT; i++)
		{
			if (GetArmorType(ArmorItems[ArmorMode][i][0], pln))
			{
				armorIndex = i;
				break;
			}
		}

		arg1 = middle(0, arg1, ARMORCOUNT-1);
		i = CheckInventory("Armor");
		j = ArmorItems[ArmorMode][arg1][1];

		if (j == 0) { result = 0; break; }


		/* If we're adding armor, always follow through
		 Else, if the ending armor count is lower than the current armor count
		 and we're not upgrading our armor, give up now */

		if (arg2 > 0)
		{
			if (arg1 <= armorIndex) { armorToSet = armorIndex; }
		}
		else if (((arg2 == 0 && i > j) || (arg2 < 0 && i > -arg2)) && (arg1 <= armorIndex))
		{
			result = 0;
			break;
		}

		if (arg2 <= 0)
		{
			TakeInventory("BasicArmor", i);
			GiveInventory(ArmorItems[ArmorMode][armorToSet][0], 1);

			k = CheckInventory("Armor");

			if (arg2 == 0) { break; }

			TakeInventory("BasicArmor", k-1);
			GiveInventory("InfiniteArmorBonus", -arg2 - 1);
		}
		else
		{
			TakeInventory("BasicArmor", i);
			GiveInventory(ArmorItems[ArmorMode][armorToSet][0], 1);

			k = CheckInventory("Armor");
			TakeInventory("BasicArmor", k-1);

			GiveInventory("InfiniteArmorBonus", (i + arg2) - 1);
		}

		result = 1;
		break;

	case 21:
		i = CheckInventory("Armor");
		if (i < arg1) { result = 0; break; }

		TakeInventory("BasicArmor", i-arg1);
		result = 1;
		break;

	case 22:
		result = GetCVar("samsara_nohealthcap");
		break;

	case 23:
		GiveInventory("TimeBombPause", 1);
		Delay(arg1);
		TakeInventory("TimeBombPause", 1);
		break;

	case 24:
		result = GetCVar("samsara_noult");
		break;

	case 25:
		if (GameType() == GAME_NET_COOPERATIVE)
		{ AmbientSound("quake/invisannouncer",127); }
		else
		{ LocalAmbientSound("quake/invisannouncer",127); }
		break;

	case 26:
		if (CheckInventory("PowerInvisibility") == 0)
		{ GiveInventory("PowerInvisibility",1); }
		else
		{ TakeInventory("PowerInvisibility",1);
		delay(1);
		GiveInventory("PowerShadow",1);
		delay(1);
		GiveInventory("PowerShadow",1); }
		break;

	case 27:
		result = GetCVar("samsara_nounique");
		break;

	case 28:
		result = GetCVar("samsara_noinvuln");
		break;

	case 29:
		result = GetCVar("instagib");
		break;

	case 30:
		if (GetCVar("samsara_runninginzdoom") == 1)
		{
			result = GetCVar("samsara_zd_bloodyhell");
			//log(s:"ZDoom ",i:result);
		} else {
			result = GetCVar("samsara_cl_bloodyhell");
			//log(s:"Zandro ",i:result);
		}
		break;

	case 31:
		if (GetCVar("samsara_runninginzdoom") == 1)
		{
			result = GetCVar("samsara_zd_bloodypersistent");
		} else {
			result = GetCVar("samsara_cl_bloodypersistent");
		}
		break;

	case 32:
		result = GetCVar("samsara_nohealth") || GetCVar("sv_nohealth");
		break;

	case 33:
		result = GetCVar("samsara_vanillaquake");
		break;

		case 34:
			if (!CheckInventory("EleenaBallgag"))
			{
				LocalAmbientSound("Eleena/Suicide",127);
				GiveInventory("EleenaTauntCooldown",5);
				ACS_NamedExecuteAlways("EleenaTauntCooldown",0,0);
			}
		break;

	case 35:
		SetResultValue(pln);
		break;

	case 36: //we're kinda stuck with this, for now
		if(arg1 == 2)
			result = GetCVar("samsara_microwavepop");

		else
			{
				if(arg2 == 0)
					result = SpawnForced("RPGExplosion", GetActorX(0), GetActorY(0), GetActorZ(0) + (GetActorProperty(0,APROP_Height) * 2), 0, 0);
				else
					result = SpawnForced("RPGExplosion", GetActorX(0), GetActorY(0), GetActorZ(0) + (GetActorProperty(0,APROP_Height) / 2), 0, 0);
			}

		GiveInventory("Duke64ExpanderBell",1);
		break;

	case 37:
		SetHudSize(400, 300, 0);

		HudMessage(l:"LEONARDDEADMESSAGE"; HUDMSG_PLAIN, 1024, CR_WHITE, 200.4, 9.1, 1.75);

		Delay(15);

		if (!CheckInventory("LeonardBallgag"))
		{
			LocalAmbientSound("leonard/mpdeath", 127);
			GiveInventory("LeonardTauntCooldown", 5);
			ACS_NamedExecuteAlways("LeonardTauntCooldown", 0);
		}
		break;

	case 38:
		result = GetCVar("samsara_notimefreeze");
		break;
	case 39:
		SetActorProperty(0,APROP_Renderstyle,STYLE_NORMAL);
		break;
	case 40:
		Delay(3);
		TakeInventory("DaedalonInRange",1);
		break;
	case 41:
		Thing_ChangeTid(0,UniqueTid());
		break;

	case 42:
		if (arg1)
		{
			if (MapArmors[0] == -1) { CheckMapArmors(); }
			SetArmorMode();

			if (MapArmors[ARMOR_YELLOW] == 1) { i = 1; }
			else { i = 0; }

			result = i;
		} else {
			SetArmorMode();

			result = ArmorMode;
		}
		break;
	case 43:
		result = onLiquid(0);
		break;

	case 44:
		result = GetCVar("samsara_cl_berserkswitch");
		break;

	case 45:
		result = GetCVar("samsara_runninginzandro") && GetCVar("samsara_banmorphovum");
		break;

	case 46:
		result = SinglePlayer();
		break;

	case 47:
		result = GetCVar("samsara_fullradiusdmg");
		break;

	case 48:
		result = GetCVar("samsara_nopainkillercorpseremoval");
		break;
		
	case 49:
		result = GetCVar("samsara_currentgame");
		break;
	}

	SetResultValue(result);
}

script "SamsaraClientDecorate" (int which, int a1, int a2) clientside //212 -- SAMSARA_CLIENT_DECORATE
{
	int i, j, k;
	int x, y, z;
	int result;
	int bloodyHellCVar;

	SetFont("SMALLFONT");
	switch (which)
	{
	case 1:
		Print(l:"NOTUNLESSINJURED");
		break;

	case 2:
		Print(s:"");
		break;

	case 3:
		SetHudSize(400, 300, 0);
		Hudmessage(l:"FOOTENGAGED";
		HUDMSG_PLAIN,1024,CR_LIGHTBLUE,200.4,9.1,1.0);
		break;

	case 4:
		// [tv50] can't use while, otherwise the cpln isn't acquired I guess?
		// [tv50] in any case, it won't work. at least, not to my knowledge

		//while (true)
		//{
			bool cvarenabled = false;

			if (GetCVar("samsara_runninginzdoom")) { cvarenabled = GetCVar("samsara_zd_noadditivepickups"); }
			else { cvarenabled = GetUserCVar(ConsolePlayerNumber(), "samsara_cl_noadditivepickups"); }

			if (cvarenabled)
			{
				SetActorProperty(0, APROP_RenderStyle, STYLE_Normal);
				SetActorProperty(0, APROP_Alpha, itof(a1)/100);
			} else {
				SetActorProperty(0, APROP_RenderStyle, STYLE_Add);
				SetActorProperty(0, APROP_Alpha, itof(a2)/100);
			}

			//Delay(35);
		//}
		break;

	case 5:
		Print(l:"NOFUEL");
		break;

	case 6:
		Print(l:"NOPOWER");
		break;
	case 7:
		Print(l:"ALREADYFLYING");
		break;

	case 9:
		x = GetActorX(0); y = GetActorY(0); z = GetActorZ(0);
		i = GetActorPitch(0);
		j = GetActorAngle(0);
		k = unusedTID(4000, 14000);

		z += itof(cond(keyDown(BT_CROUCH), random(10, 14), random(30, 34)));
		Spawn("GauntletSparks", x + FixedMul(cos(i), 16 * cos(j)), y + FixedMul(cos(i), 16 * sin(j)), z - (16 * sin(i)), k);
		SetActorVelocity(k, GetActorVelX(0), GetActorVelY(0), GetActorVelZ(0), 0,0);
		break;

	case 10:
		if (GetCVar("samsara_runninginzdoom") == 1) { bloodyHellCVar = GetCvar("samsara_zd_bloodyhell"); }
		else { bloodyHellCVar = GetUserCvar(ConsolePlayerNumber(), "samsara_cl_bloodyhell"); }

		switch (bloodyHellCVar)
		{
			case BLOODYHELL_COMIC:			SetActorState(0,"XDeathComic"); break;
			case BLOODYHELL_HAPPYFUN:		SetActorState(0,"XDeathHappyfun"); break;
			case BLOODYHELL_VANILLA:		break;
			case BLOODYHELL_NASHGORE:		SetActorState(0,"XDeathNashgore"); break;
			case BLOODYHELL_NASHGORE2D:		SetActorState(0,"XDeathNashgore2D"); break;
			case BLOODYHELL_BRUTAL:			SetActorState(0,"XDeathBrutal"); break;
			case BLOODYHELL_BRUTAL2D:		SetActorState(0,"XDeathBrutal2D"); break;
			case BLOODYHELL_NIGHTMARE:		SetActorState(0,StrParam(s: "XDeathNightmare", d: random(1,2))); break;
			case BLOODYHELL_NIGHTMARE2D:	SetActorState(0,StrParam(s: "XDeathNightmare2D", d: random(1,2))); break;
			case BLOODYHELL_BOLOGNESE:		SetActorState(0,"XDeathBolognese"); break;
			case BLOODYHELL_KETCHUP:		SetActorState(0,"XDeathKetchup"); break;
			case BLOODYHELL_DBT:			SetActorState(0,StrParam(s: "XDeathDBThanatos", d: random(1,4))); break;
		}
		break;

	case 11:
		if (GetCVar("samsara_runninginzdoom") == 1) { bloodyHellCVar = GetCvar("samsara_zd_bloodyhell"); }
		else { bloodyHellCVar = GetUserCvar(ConsolePlayerNumber(), "samsara_cl_bloodyhell"); }

		switch (bloodyHellCVar)
		{
			case BLOODYHELL_COMIC:			SetActorState(0,"DeathComic"); break;
			case BLOODYHELL_HAPPYFUN:		SetActorState(0,"DeathHappyfun"); break;
			case BLOODYHELL_VANILLA:		break;
			case BLOODYHELL_NASHGORE:		SetActorState(0,"DeathNashgore"); break;
			case BLOODYHELL_NASHGORE2D:		SetActorState(0,"DeathNashgore2D"); break;
			case BLOODYHELL_BRUTAL:			SetActorState(0,"DeathBrutal"); break;
			case BLOODYHELL_BRUTAL2D:		SetActorState(0,"DeathBrutal2D"); break;
			case BLOODYHELL_NIGHTMARE:		SetActorState(0,StrParam(s: "DeathNightmare", d: random(1,6))); break;
			case BLOODYHELL_NIGHTMARE2D:	SetActorState(0,StrParam(s: "DeathNightmare2D", d: random(1,6))); break;
			case BLOODYHELL_BOLOGNESE:		SetActorState(0,"DeathBolognese"); break;
			case BLOODYHELL_KETCHUP:		SetActorState(0,"DeathKetchup"); break;
			case BLOODYHELL_DBT:			SetActorState(0,"DeathDBThanatos"); break;
		}
		break;

	case 12:
		//Many players won't use this option, so it's best to check default to cut back on if statements
		if (GetCVar("samsara_runninginzdoom") == 1) { bloodyHellCVar = GetCvar("samsara_zd_bloodyhell"); }
		else { bloodyHellCVar = GetUserCvar(ConsolePlayerNumber(), "samsara_cl_bloodyhell"); }

		if (CheckActorClass(0,"Switchable_FlyingBlood_NonViolent"))
		{
			switch (bloodyHellCVar)
			{
				case BLOODYHELL_COMIC:		SetActorState(0,"SpawnComic"); break;
				case BLOODYHELL_HAPPYFUN:	SetActorState(0,GetBloodStateModifier("SpawnHappyfun", a1)); break;
				default:					SetActorState(0,GetBloodStateModifier("SpawnNormal", a1)); break;
			}
		}
		else
		{
			switch (bloodyHellCVar)
			{
				case BLOODYHELL_COMIC:			SetActorState(0,"SpawnComic"); break;
				case BLOODYHELL_HAPPYFUN:		SetActorState(0,GetBloodStateModifier("SpawnHappyfun", a1)); break;
				case BLOODYHELL_VANILLA:		SetActorState(0,GetBloodStateModifier("SpawnNormal", a1)); break;
				case BLOODYHELL_NASHGORE:		SetActorState(0,GetBloodStateModifier("SpawnNashgore", a1)); break;
				case BLOODYHELL_NASHGORE2D:		SetActorState(0,GetBloodStateModifier("SpawnNashgore2D", a1)); break;
				case BLOODYHELL_BRUTAL:			SetActorState(0,"SpawnBrutal"); break;
				case BLOODYHELL_BRUTAL2D:		SetActorState(0,"SpawnBrutal2D"); break;
				case BLOODYHELL_NIGHTMARE:		SetActorState(0,GetBloodStateModifier("SpawnNightmare", a1)); break;
				case BLOODYHELL_NIGHTMARE2D:	SetActorState(0,GetBloodStateModifier("SpawnNightmare2D", a1)); break;
				case BLOODYHELL_BOLOGNESE:		SetActorState(0,"SpawnBolognese"); break;
				case BLOODYHELL_KETCHUP:		SetActorState(0,"SpawnKetchup"); break;
				case BLOODYHELL_DBT:			SetActorState(0,"SpawnDBThanatos"); break;
			}
		}
		break;

	case 13:
		if (GetCVar("samsara_runninginzdoom") == 1)
		{
			result = GetCVar("samsara_zd_bloodypersistent");
		} else {
			result = GetUserCVar(ConsolePlayerNumber(), "samsara_cl_bloodypersistent");
		}
		break;

	case 14:
		if (GetCVar("samsara_runninginzdoom") == 1)
			result = GetCVar("samsara_cl_dukemode");

		else
			result = GetUserCVar(ConsolePlayerNumber(), "samsara_cl_dukemode");

		break;
	case 15:
		if (GetCVar("samsara_runninginzdoom") == 1) { bloodyHellCVar = GetCvar("samsara_zd_bloodyhell"); }
		else { bloodyHellCVar = GetUserCvar(ConsolePlayerNumber(), "samsara_cl_bloodyhell"); }

		switch (bloodyHellCVar)
		{
			case BLOODYHELL_COMIC:			SetActorState(0,"CrashComic"); break;
			case BLOODYHELL_HAPPYFUN:		SetActorState(0,"CrashHappyfun"); break;
			case BLOODYHELL_VANILLA:		break;
			case BLOODYHELL_NASHGORE:		SetActorState(0,"CrashNashgore"); break;
			case BLOODYHELL_NASHGORE2D:		SetActorState(0,"CrashNashgore2D"); break;
			case BLOODYHELL_BRUTAL:			SetActorState(0,"CrashBrutal"); break;
			case BLOODYHELL_BRUTAL2D:		SetActorState(0,"CrashBrutal2D"); break;
			case BLOODYHELL_NIGHTMARE:		SetActorState(0,"CrashNightmare"); break;
			case BLOODYHELL_NIGHTMARE2D:	SetActorState(0,"CrashNightmare2D"); break;
			case BLOODYHELL_BOLOGNESE:		SetActorState(0,"CrashBolognese"); break;
			case BLOODYHELL_KETCHUP:		SetActorState(0,"CrashKetchup"); break;
			case BLOODYHELL_DBT:			SetActorState(0,"CrashDBThanatos"); break;
		}
		break;
	}

	SetResultValue(result);
}

//======================================================================================================================
//												Hotkey Scripts
//======================================================================================================================

int SamsaraOriginalSlotDelays[CLASSCOUNT][MAXMODES] =
{
	{ 9, 9, 9 },
	{ 9 },
	{ 9 },
	{ 0, 0, 0 },
	{ 9, 9, 9 },
	{ 9, 9, 9 },
	{ 9 },
	{ 0 },
	{ 9, 9, 9, 9, 9 },
	{ 0, 0 },
	{ 9 },
	{ 9 },
	{ 9 },
	{ 0 },
	{ 9 },
	{ 9 },
	{ 9 },
	{ 9 },
	{ 9 },
	{ 0, 0 },
	{ 9 },
	{ 9 },
	{ 9 },
	{ 9 },
	{ 9 },
	{ 9 },
	{ 9 },
	{ 0 },
	{ 0 },
	{ 9 },
	{ 9 },
	{ 5 },
	{ 12 },
	{ 9 },
};

Script "Samsara_WeaponHotkeys" (int mode)
{
	int pln = PlayerNumber();
	if(!SetWeapon(ClassHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][mode]))
		UseInventory(ClassHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][mode]);
}

Script "Samsara_OriginalSlots" (int mode)
{
	if(CheckInventory("SamsaraOriginalKeySwitcheroo")) terminate;
	GiveInventory("SamsaraOriginalKeySwitcheroo",1);

	int pln = PlayerNumber();
	int switchAttempts = 0;
	if (mode != CheckInventory("SamsaraOriginalSlotCounter")) SetInventory("SamsaraOriginalKeyCounter", 0);
	str nextWeapon = OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][mode][CheckInventory("SamsaraOriginalKeyCounter")];
	if (StrLen(nextweapon) == 0) { SetInventory("SamsaraOriginalKeyCounter", 0); nextWeapon = OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][mode][CheckInventory("SamsaraOriginalKeyCounter")]; }

	switch(PlayerClass(pln))
	{
		default:
			SetInventory("SamsaraOriginalSlotCounter", mode);
			GiveInventory("SamsaraOriginalKeyCounter", 1);
			until(SetWeapon(nextweapon) || switchAttempts >= 8)
			{
				switchAttempts++;
				GiveInventory("SamsaraOriginalKeyCounter", 1);
				nextWeapon = OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][mode][CheckInventory("SamsaraOriginalKeyCounter")];
				if (StrLen(nextweapon) == 0) { SetInventory("SamsaraOriginalKeyCounter", 0); nextWeapon = OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][mode][CheckInventory("SamsaraOriginalKeyCounter")]; }
			}
			break;
		case CLASS_HALFLIFE:
			ACS_NamedExecuteWithResult("Samsara_DoHLWeaponSwitch",mode,pln);
			break;
		case CLASS_DESCENT:
			SetInventory("SamsaraOriginalSlotCounter", mode);
			switch(mode)
			{
				default:
					TakeInventory("DescentSecondaryKeySwitcher",1);
					SetWeapon(nextweapon);
					break;
				case 5:
				case 6:
				case 7:
				case 8:
				case 9:
					GiveInventory("DescentSecondaryKeySwitcher",1);
					SetWeapon(nextweapon);
					break;
			}
			GiveInventory("SamsaraOriginalKeyCounter", 1);
			break;
	}

	//Log(d:CheckInventory("SamsaraOriginalSlotCounter"), s:" ", d:CheckInventory("SamsaraOriginalKeyCounter"), s:" ", s:OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][CheckInventory("SamsaraOriginalSlotCounter")][CheckInventory("SamsaraOriginalKeyCounter")]);

	Delay(SamsaraOriginalSlotDelays[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")]);

	TakeInventory("DescentSecondaryKeySwitcher",1);
	SetInventory("SamsaraOriginalKeySwitcheroo", 0);
}

str HLWeaponGraphics[2][10][10] =
{
	{
		{ "HPKUP00", "", "", "", "", "", "", "", "", "" },
		{ "HPKUP01", "HPKUP12", "", "", "", "", "", "", "", "" },
		{ "HPKUP13", "HPKUP14", "HPKUP16", "", "", "", "", "", "", "" },
		{ "HPKUP17", "HPKUP18", "HPKUP19", "HPKUP20", "", "", "", "", "", "" },
		{ "HPKUP15", "", "", "", "", "", "", "", "", "" },
		{ "", "", "", "", "", "", "", "", "", "" },
		{ "", "", "", "", "", "", "", "", "", "" },
		{ "", "", "", "", "", "", "", "", "", "" },
		{ "", "", "", "", "", "", "", "", "", "" },
		{ "", "", "", "", "", "", "", "", "", "" },
	},
	{
		{ "OPFSL11", "OPFSL00", "", "", "", "", "", "", "", "" },
		{ "OPFSL10", "OPFSL02", "", "", "", "", "", "", "", "" },
		{ "OPFSL04", "OPFSL03", "", "", "", "", "", "", "", "" },
		{ "", "", "", "", "", "", "", "", "", "" },
		{ "OPFSL09", "", "", "", "", "", "", "", "", "" },
		{ "OPFSL06", "OPFSL07", "OPFSL08", "", "", "", "", "", "", "" },
		{ "OPFSL05", "OPFSL01", "", "", "", "", "", "", "", "" },
		{ "", "", "", "", "", "", "", "", "", "" },
		{ "", "", "", "", "", "", "", "", "", "" },
		{ "", "", "", "", "", "", "", "", "", "" },
	},
};

script "Samsara_DoHLWeaponSwitch" (int mode, int pln)
{
	int switchTimer;

	if (mode != CheckInventory("SamsaraOriginalSlotCounter"))
	{
		SetInventory("SamsaraOriginalKeyCounter",0);
		SetInventory("HLOriginalKeySwitcherOpen",0);
	}

	SetInventory("SamsaraOriginalSlotCounter", mode);

    if (CheckInventory("HLOriginalKeySwitcherOpen"))
    {
        LocalAmbientSound("halflife/weaponmove", 127);
        GiveInventory("SamsaraOriginalKeyCounter", 1);
    } else {
        LocalAmbientSound("halflife/weaponselect", 127);
        GiveInventory("HLOriginalKeySwitcherOpen", 1);
    }

	if(strlen(OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][CheckInventory("SamsaraOriginalSlotCounter")][CheckInventory("SamsaraOriginalKeyCounter")]) == 0)
		SetInventory("SamsaraOriginalKeyCounter", 0);

	//Keep it from selecting invalid weapons
	int attempts;
	int startingCounter = CheckInventory("SamsaraOriginalKeyCounter");
	until(CheckInventory(OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][CheckInventory("SamsaraOriginalSlotCounter")][CheckInventory("SamsaraOriginalKeyCounter")]))
	{
		attempts++;
		if(attempts > 5) { SetInventory("SamsaraOriginalKeyCounter", startingCounter); terminate; }
		GiveInventory("SamsaraOriginalKeyCounter", 1);

		if(strlen(OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][CheckInventory("SamsaraOriginalSlotCounter")][CheckInventory("SamsaraOriginalKeyCounter")]) == 0)
		SetInventory("SamsaraOriginalKeyCounter", 0);
	}

	GiveInventory("HLOriginalKeySwitcher",1);
	int currentSwitch = CheckInventory("HLOriginalKeySwitcher");
	int startingMode = CheckInventory("SamsaraModeCounter");


	while(switchTimer < 35 && CheckInventory("SamsaraModeCounter") == startingMode)
	{
		int heightOffset = (32 + 144 * (CheckInventory("ExpandedHud") && GetCVAR("screenblocks") <= 10)) * 1.0;
		if(CheckInventory("HLOriginalKeySwitcher") != currentSwitch)
			terminate;

		SetHudSize(1280,960,1);
		for(int a = 0; a < 7; a++)
		{
			SetFont(strparam(s:CheckInventory("SamsaraModeCounter") == 0 ? "HWMSLOT" : "OPFWM",d:a+1));
			HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,32100+a,0,((a*24.0)+(mode<a)*152.0)+0.1,heightOffset,0.0,0.5);
			int validWeapon = 0;
			for(int b = 0; b < 5; b++)
			{
				if(strlen(OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][a][b]) > 0 && CheckInventory(OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][a][b]))
				{
					if(mode == a)
					{
						if(b == CheckInventory("SamsaraOriginalKeyCounter"))
						{
							SetFont(CheckInventory("SamsaraModeCounter") == 0 ? "HLWPNSL0" : "OPWPNSL0");
							HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,32229,0,((a*24.0)+(mode<a)*152.0)+0.1,heightOffset+((validWeapon+1)*48.0)-12.0,0.0,0.5);
							SetFont(strparam(s:HLWeaponGraphics[CheckInventory("SamsaraModeCounter")][a][b],s:"H"));
							HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,32200+(10*a)+validWeapon,0,((a*24.0)+(mode<a)*152.0)+0.1,heightOffset+((validWeapon+1)*48.0)-12.0,0.0,0.5);
						}
						else
						{
							SetFont(strparam(s:HLWeaponGraphics[CheckInventory("SamsaraModeCounter")][a][b],s:"N"));
							HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,32200+(10*a)+validWeapon,0,((a*24.0)+(mode<a)*152.0)+0.1,heightOffset+((validWeapon+1)*48.0)-12.0,0.0,0.5);
						}
					}
					else
					{
						SetFont(CheckInventory("SamsaraModeCounter") == 0 ? "HWMSLOT" : "OPFWMB");
						HudMessage(s:"a";HUDMSG_PLAIN|HUDMSG_ADDBLEND|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP,32200+(10*a)+validWeapon,0,((a*24.0)+(mode<a)*152.0)+0.1,heightOffset+((validWeapon+1)*24.0),0.0,0.5);
					}
					validWeapon++;
				}
			}
		}

		//PrintBold(s:OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][CheckInventory("SamsaraOriginalSlotCounter")][CheckInventory("SamsaraOriginalKeyCounter")]);
		if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_ATTACK)
		{
			LocalAmbientSound("halflife/weaponpick",127);
			SetWeapon(OriginalHotKeyWeapon[PlayerClass(pln)][CheckInventory("SamsaraModeCounter")][CheckInventory("SamsaraOriginalSlotCounter")][CheckInventory("SamsaraOriginalKeyCounter")]);
			TakeInventory("HLOriginalKeySwitcher",65536);
			TakeInventory("HLOriginalKeySwitcherOpen",65536);
			break;
		}
		Delay(1);
		switchTimer++;

		if(switchTimer == 10) SetInventory("SamsaraOriginalKeySwitcheroo", 0);
	}
	TakeInventory("HLOriginalKeySwitcherOpen",65536);
	TakeInventory("HLOriginalKeySwitcher",65536);
	RemoveMessages(32100,32110);
	RemoveMessages(32200,32290);
}

// Until Zandronum doesn't crash with the old keybindings in KEYCONF, this will be required, I'm afraid

script "Samsara_Keybinds" (int button) NET
{
	int pln = PlayerNumber(); // ensure only the activator gets the messages
	int cpln = ConsolePlayerNumber();

	int cvarsetting = 0;
	int mode = 0;
	int arg2 = -1;

	switch (button)
	{
	case 1:
		SetCVar("samsara_cl_smoothanims", !GetCVar("samsara_cl_smoothanims"));
		mode = GetCVar("samsara_cl_smoothanims");
		break;

	case 2:
		SetCVar("samsara_cl_wolfmove", !GetCVar("samsara_cl_wolfmove"));
		mode = GetCVar("samsara_cl_wolfmove");
		break;

	case 3:
		SetCVar("samsara_cl_ballgag", !GetCVar("samsara_cl_ballgag"));
		mode = GetCVar("samsara_cl_ballgag");
		break;

	case 4:
		SetCVar("samsara_cl_weaponhud", !GetCVar("samsara_cl_weaponhud"));
		mode = GetCVar("samsara_cl_weaponhud");
		break;

	case 5:
		SetCVar("samsara_cl_moremessages", !GetCVar("samsara_cl_moremessages"));
		mode = GetCVar("samsara_cl_moremessages");
		break;

	case 6:
		SetCVar("samsara_cl_printpickup", !GetCVar("samsara_cl_printpickup"));
		mode = GetCVar("samsara_cl_printpickup");
		break;

	case 7:
		SetCVar("samsara_cl_norecoil", !GetCVar("samsara_cl_norecoil"));
		mode = GetCVar("samsara_cl_norecoil");
		break;

	case 8:
		if (GetCVar("samsara_cl_heromusic") >= 2) { cvarsetting = 0; }
		else { cvarsetting = GetCVar("samsara_cl_heromusic") + 1; }

		SetCVar("samsara_cl_heromusic", cvarsetting);

        // SamsaraOST_Enter handles everything else

		mode = GetCVar("samsara_cl_heromusic");
		break;

	case 9:
		if (GetCVar("samsara_cl_pickupmode") >= 2) { cvarsetting = 0; }
		else { cvarsetting = GetCVar("samsara_cl_pickupmode") + 1; }

		SetCVar("samsara_cl_pickupmode", cvarsetting);

		mode = GetCVar("samsara_cl_pickupmode");
		break;

	case 10:
		if (PlayerIsSpectator(pln) > 0) { break; }

		switch (samsaraClassNum())
		{
		case CLASS_DOOM:
			if (GetCVar("samsara_cl_doommode") >= 2) { cvarsetting = 0; }
			else { cvarsetting = GetCVar("samsara_cl_doommode") + 1; }

			SetCVar("samsara_cl_doommode", cvarsetting);
			mode = GetCVar("samsara_cl_doommode");
			arg2 = CLASS_DOOM;
			break;

		case CLASS_WOLFEN:
			if (GetCVar("samsara_cl_wolfmode") >= 2) { cvarsetting = 0; }
			else { cvarsetting = GetCVar("samsara_cl_wolfmode") + 1; }

			SetCVar("samsara_cl_wolfmode", cvarsetting);
			mode = GetCVar("samsara_cl_wolfmode");
			arg2 = CLASS_WOLFEN;
			break;

		case CLASS_HEXEN:
			if (GetCVar("samsara_cl_hexclass") >= 2) { cvarsetting = 0; }
			else { cvarsetting = GetCVar("samsara_cl_hexclass") + 1; }

			SetCVar("samsara_cl_hexclass", cvarsetting);
			mode = GetCVar("samsara_cl_hexclass");
			arg2 = CLASS_HEXEN;
			break;

		case CLASS_DUKE:
			if (GetCVar("samsara_cl_dukemode") >= 2) { cvarsetting = 0; }
			else { cvarsetting = GetCVar("samsara_cl_dukemode") + 1; }

			SetCVar("samsara_cl_dukemode", cvarsetting);
			mode = GetCVar("samsara_cl_dukemode");
			arg2 = CLASS_DUKE;
			break;

		case CLASS_ROTT:
			if (GetCVar("samsara_cl_rottmode") >= 4) { cvarsetting = 0; }
			else { cvarsetting = GetCVar("samsara_cl_rottmode") + 1; }

			SetCVar("samsara_cl_rottmode", cvarsetting);
			mode = GetCVar("samsara_cl_rottmode");
			arg2 = CLASS_ROTT;
			break;

		case CLASS_BLAKE:
			SetCVar("samsara_cl_bsaog", !GetCVar("samsara_cl_bsaog"));
			mode = GetCVar("samsara_cl_bsaog");
			arg2 = CLASS_BLAKE;
			break;

		case CLASS_ERAD:
			if (GetCVar("samsara_cl_eradmode") >= 3) { cvarsetting = 0; }
			else { cvarsetting = GetCVar("samsara_cl_eradmode") + 1; }

			SetCVar("samsara_cl_eradmode", cvarsetting);
			mode = GetCVar("samsara_cl_eradmode");
			arg2 = CLASS_ERAD;
			break;

		case CLASS_POGREED:
			if (GetCVar("samsara_cl_ipogmode") >= 4) { cvarsetting = 0; }
			else { cvarsetting = GetCVar("samsara_cl_ipogmode") + 1; }

			SetCVar("samsara_cl_ipogmode", cvarsetting);
			mode = GetCVar("samsara_cl_ipogmode");
			arg2 = CLASS_POGREED;
			break;

		case CLASS_HALFLIFE:
			SetCVar("samsara_cl_shephardmode", !GetCVar("samsara_cl_shephardmode"));

			if (CheckInventory("flashlightinventory")) { ACS_NamedExecuteWithResult("HL2677"); }

			mode = GetCVar("samsara_cl_shephardmode");
			arg2 = CLASS_HALFLIFE;
			break;

		default:
			break;
		}
		break;

	case 11:
		SetCVar("samsara_cl_idleballgag", !GetCVar("samsara_cl_idleballgag"));
		mode = GetCVar("samsara_cl_idleballgag");
		break;

	}

	ACS_NamedExecuteWithResult("Samsara_Keybinds_Messages", button, mode, arg2);
}

script "Samsara_Keybinds_Messages" (int button, int mode, int arg2) CLIENTSIDE
{
	int pln = PlayerNumber(); // ensure only the activator gets the messages
	int cpln = ConsolePlayerNumber();

	str modestring = "Default";

	switch (button)
	{
	case 1:
		if (mode >= 1) { modestring = "Smooth"; }
		else { modestring = "Vanilla"; }

		if (pln == cpln)
		{
			SetCVar("samsara_cl_smoothanims", mode);
			Log(s:"\cgWeapon Animations: ", s:"\ck", s:modestring);
		}
		break;

	case 2:
		if (mode >= 1) { modestring = "On"; }
		else { modestring = "Off"; }

		if (pln == cpln)
		{
			SetCVar("samsara_cl_wolfmove", mode);
			Log(s:"\cgWolfenstein Style Movement: ", s:"\ck", s:modestring);
		}
		break;

	case 3:
		if (mode >= 1) { modestring = "Off"; }
		else { modestring = "On"; }

		if (pln == cpln)
		{
			SetCVar("samsara_cl_ballgag", mode);
			Log(s:"\cgCharacter Talk: ", s:"\ck", s:modestring);
		}
		break;

	case 4:
		if (mode >= 1) { modestring = "On"; }
		else { modestring = "Off"; }

		if (pln == cpln)
		{
			SetCVar("samsara_cl_weaponhud", mode);
			Log(s:"\cgWeapon HUD Bar: ", s:"\ck", s:modestring);
		}
		break;

	case 5:
		if (mode >= 1) { modestring = "On"; }
		else { modestring = "Off"; }

		if (pln == cpln)
		{
			SetCVar("samsara_cl_moremessages", mode);
			Log(s:"\cgExtra Pickup Messages: ", s:"\ck", s:modestring);
		}
		break;

	case 6:
		if (mode >= 1) { modestring = "Print"; }
		else { modestring = "Log"; }

		if (pln == cpln)
		{
			SetCVar("samsara_cl_printpickup", mode);
			Log(s:"\cgPickup Message Mode: ", s:"\ck", s:modestring);
		}
		break;

	case 7:
		if (mode >= 1) { modestring = "Off"; }
		else { modestring = "On"; }

		if (pln == cpln)
		{
			SetCVar("samsara_cl_norecoil", mode);
			Log(s:"\cgWeapon Recoil: ", s:"\ck", s:modestring);
		}
		break;

	case 8:
		if (mode >= 2) { modestring = "Game Override"; }
		else if (mode == 1) { modestring = "Class"; }
		else { modestring = "Off"; }

		if (pln == cpln)
		{
			SetCVar("samsara_cl_heromusic", mode);
			Log(s:"\cgHero Music: ", s:"\ck", s:modestring);
		}
		break;

	case 9:
		if (mode >= 2) { modestring = "Class"; }
		else if (mode == 1) { modestring = "Hybrid"; }
		else { modestring = "Old-Style"; }

		if (pln == cpln)
		{
			SetCVar("samsara_cl_pickupmode", mode);
			Log(s:"\cgPickup Graphics: ", s:"\ck", s:modestring);
		}
		break;

	case 10:
		if (PlayerIsSpectator(pln) > 0)
		{
			if (pln == cpln) { Log(s:"This cannot be used while spectating."); }
			terminate;
		}

		switch (arg2)
		{
		case CLASS_DOOM:
			if (mode >= 2) { modestring = "Doomguy (Stronghold)"; }
			else if (mode == 1) { modestring = "Doom 64 Guy"; }
			else { modestring = "Doomguy (Original)"; }

			if (pln == cpln)
			{
				SetCVar("samsara_cl_doommode", mode);
				Log(s:"\cgDoom Character: ", s:"\ck", s:modestring);
			}
			break;

		case CLASS_WOLFEN:
			if (mode >= 2) { modestring = "B.J. Blazkowicz (Castle Totenkopf SDL)"; }
			else if (mode == 1) { modestring = "B.J. Blazkowicz (Lost Missions)"; }
			else { modestring = "B.J. Blazkowicz (Original)"; }

			if (pln == cpln)
			{
				SetCVar("samsara_cl_wolfmode", mode);
				Log(s:"\cgWolfenstein 3D Character: ", s:"\ck", s:modestring);
			}
			break;

		case CLASS_HEXEN:
			if (mode >= 2) { modestring = "Baratus"; }
			else if (mode == 1) { modestring = "Daedolon"; }
			else { modestring = "Parias"; }

			if (pln == cpln)
			{
				SetCVar("samsara_cl_hexclass", mode);
				Log(s:"\cgHexen 1 Character: ", s:"\ck", s:modestring);
			}
			break;

		case CLASS_DUKE:
			if (mode >= 2) { modestring = "Duke Nukem (Duke Nukem 64)"; }
			else if (mode == 1) { modestring = "Duke Nukem (Life's a Beach)"; }
			else { modestring = "Duke Nukem (Original)"; }

			if (pln == cpln)
			{
				SetCVar("samsara_cl_dukemode", mode);
				Log(s:"\cgDuke Nukem 3D Character: ", s:"\ck", s:modestring);
			}
			break;

		case CLASS_ROTT:
			if (mode >= 4) { modestring = "Doug Wendt"; }
			else if (mode == 3) { modestring = "Lorelei Ni"; }
			else if (mode == 2) { modestring = "Thi Barrett"; }
			else if (mode == 1) { modestring = "Taradino Cassatt"; }
			else { modestring = "Ian Paul Freeley"; }

			if (pln == cpln)
			{
				SetCVar("samsara_cl_rottmode", mode);
				Log(s:"\cgROTT: H.U.N.T. Team Member: ", s:"\ck", s:modestring);
			}
			break;

		case CLASS_BLAKE:
			if (mode >= 1) { modestring = "Aliens of Gold"; }
			else { modestring = "Planet Strike"; }

			if (pln == cpln)
			{
				SetCVar("samsara_cl_bsaog", mode);
				Log(s:"\cgBlake Stone Weapon Skins: ", s:"\ck", s:modestring);
			}
			break;

		case CLASS_ERAD:
			if (mode >= 3) { modestring = "Alliance Commando"; }
			else if (mode == 2) { modestring = "Dan Blaze"; }
			else if (mode == 1) { modestring = "Kamchak"; }
			else { modestring = "Eleena Brynstaarl"; }

			if (pln == cpln)
			{
				SetCVar("samsara_cl_eradmode", mode);
				Log(s:"\cgEradicator Character: ", s:"\ck", s:modestring);
			}
			break;

		case CLASS_POGREED:
			if (mode >= 4) { modestring = "Theola Nom"; }
			else if (mode == 3) { modestring = "Specimen 7"; }
			else if (mode == 2) { modestring = "Xith"; }
			else if (mode == 1) { modestring = "Tobias Locke"; }
			else { modestring = "Aldus Kaden"; }

			if (pln == cpln)
			{
				SetCVar("samsara_cl_ipogmode", mode);
				Log(s:"\cgIPOG: A.V.C. Team Member: ", s:"\ck", s:modestring);
			}
			break;

		case CLASS_HALFLIFE:
			if (mode >= 1) { modestring = "Adrian Shephard"; }
			else { modestring = "Gordon Freeman"; }

			if (pln == cpln)
			{
				SetCVar("samsara_cl_shephardmode", mode);
				Log(s:"\cgHalf-Life Character: ", s:"\ck", s:modestring);
			}
			break;

		default:
			if (pln == cpln) { Log(s:"This character has no alternative modes."); }
			terminate;
		}
		break;

	case 11:
		if (mode >= 1) { modestring = "Off"; }
		else { modestring = "On"; }

		if (pln == cpln)
		{
			SetCVar("samsara_cl_idleballgag", mode);
			Log(s:"\cgCharacter Idle Talk: ", s:"\ck", s:modestring);
		}
		break;

	default:
		if (pln == cpln) { Log(s:"Invalid setting."); }
		terminate;
	}
}

//For our unique keys to be consolidated
Script "Samsara_UniqueKeys" (int key) net
{
	int pln = PlayerNumber();
	switch(PlayerClass(pln))
	{
		case 10:
			if(GetCvar("samsara_permakimbo"))
			{
				if(CheckInventory("GunsAkimboP"))
					TakeInventory("GunsAkimboP",1);
				else
					GiveInventory("GunsAkimboP",1);
			}
			break;
		case 13:
			ACS_NamedExecuteWithResult("Corridor7ActivateVisor");
			break;
		case 19:
			ACS_NamedExecuteWithResult("HL2677",0,0,0);
			break;
			if(key == 0)
				ACS_NamedExecuteWithResult("HL2677",0,0,0);
			break;
		case CLASS_RR:
			if(key == 0)
			{
				if(((timer() > CheckInventory("LeonardPissTimer") + 10500) || CheckInventory("LeonardPissTimer") == 0) && GetActorProperty(0,APROP_Health) > 0)
				{
					SetInventory("LeonardPissTimer",timer());
					if(GetActorProperty(0,APROP_Health) < 90)
						SetActorProperty(0,APROP_Health,GetActorProperty(0,APROP_Health)+2);
					else if(GetActorProperty(0,APROP_Health) < 100)
						SetActorProperty(0,APROP_Health,100);

					Playsound(0,"Leonard/Pee",CHAN_6,1.0,0,ATTN_NORM);
				}
			}
			else if(key == 1)
			{	
				if(timer()-CheckInventory("LeonardYeeHawTimer") >= 105 && GetActorProperty(0,APROP_Health) < 100 && GetActorProperty(0,APROP_Health) > 0)
				{
					SetInventory("LeonardYeeHawTimer",timer());
					Playsound(0,"Leonard/Taunt7",CHAN_VOICE,1.0,0,ATTN_NORM);
					SetActorProperty(0,APROP_Health,GetActorProperty(0,APROP_Health)+1);
				}
			}
			break;
		case 26:
			ACS_NamedExecuteWithResult("BondActivateWatch",0,0,0);
			break;
		case 28:
			if(key == 1)
				ACS_NamedExecuteWithResult("Painkiller_BlackTarot_Initiate",0,0,0,0);
			else
				ACS_NamedExecuteWithResult("Painkiller_GoldTarot_Activate",0,0,0,0);
			break;
		case 29:
			if(key == 0)
				ACS_NamedExecuteWithResult("Unreal_RevertUpgrade",0,0,0);
			break;
		case 30:
			if(key == 0)
				ACS_NamedExecuteWithResult("RTCW_Kick",0,0,0);
			break;
		case 32:
			GiveInventory("DescentRollToken",1);
			break;
		case CLASS_DEUSEX:
			if(key == 1)
				ACS_NamedExecuteWithResult("DeusEx_Augmentations_Initiate");
			else
				ACS_NamedExecuteWithResult("DeusEx_Augmentations_QuickSwitch");
			break;
	}
}

//======================================================================================================================
//													Get Settings
//======================================================================================================================

script "SamsaraGetSettings" (void) net //676 -- SAMSARA_GETSETTINGS
{
	int lmsLevel = middle(0, GetCVar("samsara_lmslife"), LMSMODES-1);
	int lmsHP, lmsArmor;
	int lmsUlt, lmsUnique;
	int lmsSkulltag = GetCVar("samsara_lmsskulltag");
	int ultStay, highLow;

	if (lmsLevel) { lmsHP = 100*lmsLevel; lmsArmor = 100*lmsLevel; }
	else { lmsHP = 100; lmsArmor = 0; }

	if (GetCVar("samsara_lmsuniques")) { lmsUnique = "\cdwith"; }
	else { lmsUnique = "\cgwithout"; }

	if (GetCVar("samsara_lmsult")) { lmsUlt = "\cdwith"; }
	else { lmsUlt = "\cgwithout"; }

	if (GetCVar("samsara_lmsskulltag")) { lmsSkulltag = "\cdwith"; }
	else { lmsSkulltag = "\cgwithout"; }

	if (GetCVar("samsara_permault")) { ultStay = "\cdstay"; }
	else { ultStay = "\cado not stay"; }

	if (GetCVar("samsara_jumpmod") < 0) { highLow = "\calower"; }
	else { highLow = "\cfhigher"; }

	SetHudSize(640, 480, 1);

	if (isLMS() || GetCVar("samsara_lmsrules"))
	{
		HudMessage(s:"You spawn with \ca", d:lmsHP, s:" health\c- and \cd", d:lmsArmor, s:" armor", s:"\c-.";
			HUDMSG_FADEOUT, 6761, CR_WHITE, 50.1, 80.0, 3.0, 1.0);

		HudMessage(s:"You spawn ", s:lmsUnique, s:"\c- your uniques, ", s:lmsUlt, s:"\c- your Slot VII, and ", s:lmsSkulltag, s:"\c- your Skulltag weapons.";
			HUDMSG_FADEOUT, 6762, CR_WHITE, 50.1, 96.0, 3.0, 1.0);
	}
	else
	{
		HudMessage(s:"Slot VII pickups ", s:ultStay, s:"\c- on pickup", s:"\c-.";
			HUDMSG_FADEOUT, 6761, CR_WHITE, 50.1, 80.0, 3.0, 1.0);

		HudMessage(s:"Armor mode is \cf", s:ArmorModeNames[ArmorMode], s:"\c-.";
			HUDMSG_FADEOUT, 6762, CR_WHITE, 50.1, 96.0, 3.0, 1.0);
	}

	if (GetCVar("samsara_jumpmod"))
	{
		HudMessage(s:"You jump \cn", d:abs(GetCVar("samsara_jumpmod")), s:"\c- units ", s:highLow, s:"\c- than normal.";
				HUDMSG_FADEOUT, 6763, CR_WHITE, 50.1, 112.0, 3.0, 1.0);
	}
	else
	{
		HudMessage(s:"Jumping is \cbnormal", s:"\c-.";
				HUDMSG_FADEOUT, 6763, CR_WHITE, 50.1, 112.0, 3.0, 1.0);
	}

	HudMessage(s:"Your running speed is \cf", s:SpeedModeNames[GetCVar("samsara_speedmod") + 6], s:"\c-.";
		HUDMSG_FADEOUT, 6764, CR_WHITE, 50.1, 128.0, 3.0, 1.0);


	if (GetCVar("samsara_banjetpack"))
	{
		HudMessage(s:"Flight items are \cgbanned", s:"\c-.";
				HUDMSG_FADEOUT, 6765, CR_WHITE, 50.1, 144.0, 3.0, 1.0);
	}
	else
	{
		HudMessage(s:"Flight items are \cdallowed", s:"\c-.";
				HUDMSG_FADEOUT, 6765, CR_WHITE, 50.1, 144.0, 3.0, 1.0);
	}

	if (GetCVar("samsara_banwolfmove"))
	{
		HudMessage(s:"Wolfenstein Style movement is \cgbanned", s:"\c-.";
				HUDMSG_FADEOUT, 6766, CR_WHITE, 50.1, 160.0, 3.0, 1.0);
	}
	else
	{
		HudMessage(s:"Wolfenstein Style movement is \cdallowed", s:"\c-.";
				HUDMSG_FADEOUT, 6766, CR_WHITE, 50.1, 160.0, 3.0, 1.0);
	}

	if (GetCVar("samsara_nocustomgravity"))
	{
		HudMessage(s:"Custom gravities are \cadisabled", s:"\c-.";
				HUDMSG_FADEOUT, 6767, CR_WHITE, 50.1, 176.0, 3.0, 1.0);
	}
	else
	{
		HudMessage(s:"Custom gravities are \cdenabled", s:"\c-.";
				HUDMSG_FADEOUT, 6767, CR_WHITE, 50.1, 176.0, 3.0, 1.0);
	}

	if (GetCVar("samsara_reloadmode") == 2)
	{
		HudMessage(s:"Reloading is \cgenabled", s:"\c-.", s:" Some classes are able to reload manually.";
				HUDMSG_FADEOUT, 6768, CR_WHITE, 50.1, 192.0, 3.0, 1.0);
	}
	else if (GetCVar("samsara_reloadmode") == 1)
	{
		HudMessage(s:"Reloading is \cgenabled", s:"\c-.", s:" Some classes are unable to reload manually.";
				HUDMSG_FADEOUT, 6768, CR_WHITE, 50.1, 192.0, 3.0, 1.0);
	}
	else
	{
		HudMessage(s:"Reloading is \cadisabled", s:"\c-.";
				HUDMSG_FADEOUT, 6768, CR_WHITE, 50.1, 192.0, 3.0, 1.0);
	}

	if (GetCVar("samsara_bottomlessmagazines"))
	{
		HudMessage(s:"Bottomless magazines are \cdenabled", s:"\c-.";
				HUDMSG_FADEOUT, 6769, CR_WHITE, 50.1, 208.0, 3.0, 1.0);
	}
	else
	{
		HudMessage(s:"Bottomless magazines are \cadisabled", s:"\c-.";
				HUDMSG_FADEOUT, 6769, CR_WHITE, 50.1, 208.0, 3.0, 1.0);
	}

	HudMessage(s:"Shotgun/Chainsaw/Unique/Backpack start: \cd", d:GetCVar("samsara_shotgunstart"), s:"\c- / \ca", d:GetCvar("samsara_chainsawstart"), s:"\c- / \cn", d:GetCvar("samsara_uniquestart"), s:"\c- / \cf", d:GetCvar("samsara_backpackstart");
			HUDMSG_FADEOUT, 6774, CR_WHITE, 50.1, 288.0, 3.0, 1.0);

	HudMessage(s:"PDWTAK Mode is ", s:cond(GetCVar("samsara_peoplediewhentheyarekilled"), "\cdon\c-.", "\caoff\c-."), s:"\c- (", d:GetCVar("samsara_peoplediewhentheyarekilled"), s:")";
			HUDMSG_FADEOUT, 6770, CR_WHITE, 50.1, 224.0, 3.0, 1.0);

	HudMessage(s:"PPW Mode is ", s:cond(GetCVar("samsara_permaweaponlevel2"), "\cdon\c-.", "\caoff\c-.");
			HUDMSG_FADEOUT, 6771, CR_WHITE, 50.1, 240.0, 3.0, 1.0);

	HudMessage(s:"STTP3K Mode is ", s:cond(GetCVar("samsara_superturboturkeypuncher3000"), "\cdon\c-.", "\caoff\c-.");
			HUDMSG_FADEOUT, 6772, CR_WHITE, 50.1, 256.0, 3.0, 1.0);

	HudMessage(s:"Limitless Health is ", s:cond(GetCVar("samsara_nohealthcap"), "\cdon\c-.", "\caoff\c-.");
			HUDMSG_FADEOUT, 6773, CR_WHITE, 50.1, 272.0, 3.0, 1.0);
}

//======================================================================================================================
//													Key Share
//======================================================================================================================

int keys[3][26] = {{0},
	{"RedCard", "YellowCard", "BlueCard", "RedSkull", "YellowSkull", "BlueSkull", "KeyBlue", "KeyGreen", "KeyYellow", "ChexRedCard", "ChexYellowCard", "ChexBlueCard", "RedFlemKey", "YellowFlemKey", "BlueFlemKey", "KeyAxe", "KeyCastle", "KeyCave", "KeyDungeon", "KeyEmerald", "KeyFire", "KeyHorn", "KeyRusted", "KeySilver", "KeySteel", "KeySwamp"},
{"\cgRed Keycard", "\ckYellow Keycard", "\chBlue Keycard", "\cgRed Skull", "\ckYellow Skull", "\chBlue Skull", "\chBlue Prism Key", "\cqGreen Prism Key", "\ckYellow Prism Key", "\cgRed Card", "\ckYellow Card", "\chBlue Card", "\cgRed Flem Key", "\ckYellow Flem Key", "\chBlue Flem Key", "\cuAxe Key", "\cfCastle Key", "\csCave Key", "\cuDungeon Key", "\cdEmerald Key", "\cgFire Key", "\ceHorn Key", "\cbRusted Key", "\cuSilver Key", "\cmSteel Key", "\cpSwamp Key"}};
//0, 1, 2: Doom R/Y/B Keycard. - \cg, \ck, \ch
//3, 4, 5: Doom R/Y/B Skull. - \cg, \ck, \ch
//6, 7, 8: Heretic B/G/Y Prism Key. - \ch, \cq, \ck
//9, 10, 11: Chex Quest R/Y/B Keycard. - \cg, \ck, \ch
//12, 13, 14: Chex Quest R/Y/B Flem Key. - \cg, \ck, \ch
//15: Axe Key - \cu (Grey)
//16: Castle Key - \cf (Gold)
//17: Cave Key - \cs (Brown)
//18: Dungeon Key - \cu (Grey)
//19: Emerald Key - \cd (Light Green)
//20: Fire Key - \cg (Red)
//21: Horn Key - \ce (Beige)
//22: Rusted Key - \cb (Very light off-white)
//23: Silver Key - \cu (Grey)
//24: Steel Key - \cm (Black)
//25: Swamp Key - \cp (Drab green-brown)

////////////////////
// SHARED KEYS
// (by Synert)
/////////////////

// Give keys as needed, for people joining the game.

script "SamsaraKeyShare" ENTER //901
{
	if (!(IsSinglePlayer() || IsCoop())) { terminate; }

	while (1)
	{
		for (int a = 0; a < 26; a++)
		{
			if (keys[0][a] == 1)
			{
				GiveInventory(keys[1][a], 1);
			}
		}
		delay(10);
	}
}

script "SamsaraKeyBroadcast" (int a) { // Picked up a key, broadcast that shit to the whole world! --902
	if(keys[0][a] == 0 && isCoop() && !isSinglePlayer()) {
		Log(n:0,s:"\c* has picked up the ",s:keys[2][a],s:"\c*."); // Let the server admins know.
		HudMessageBold(n:0,s:"\c* has picked up the ",s:keys[2][a],s:"\c*.";HUDMSG_FADEOUT, 900, CR_GOLD, 0.5, 0.1, 3.0, 0.5);
	}
	keys[0][a] = 1;

	if (CheckInventory("SamsaraHeroMusicHalfLifeActive") && !CheckInventory("HalfLifeMusicPlayingToken"))
	{
		GiveInventory("HLMusicKey",1);
	}
}

//======================================================================================================================
//													Kill Count
//======================================================================================================================

//Replace this script and inject code into it for other tcs when actors die. Override 1 is for base samsara monsters. Override 2 is shrunk actors to get their parent.
Script "Samsara_KillCount" (int override)
{
	if(!(ClassifyActor(0) & ACTOR_MONSTER))
		terminate;

	int HasXDeath;
	int isBoss = CheckFlag(0,"BOSS");

	if(GetTimeProperty(0, 5, true) == 0) // TM_YEAR = 5
		HasXDeath = CheckActorState(0,"XDeath",1);
	else
		HasXDeath = 1;

	if(SpawnForced("StrongHoldLoaded",0,0,0,0))
		ACS_NamedExecuteWithResult("Stronghold_KillCount",0,0,0,0);

	int noblood = CheckFlag(0,"NOBLOOD");
	int health;
	int currentHealth = GetActorProperty(0, APROP_Health);
	int experience = GetCVar("samsara_experiencegain");
	int healthtokens = CheckInventory("ShrunkMasterHealthTokens");

	if(healthtokens == 0)
		health = GetActorProperty(0, APROP_SpawnHealth);
	else
		health = healthtokens;

	int x = GetActorX(0);
	int y = GetActorY(0);
	int z = GetActorZ(0);

	//eww
	if(GetCvar("samsara_mixerloaded"))
	{
		if(!GetCvar("samsara_merrychristmas"))
			ACS_NamedExecuteAlways("Samsara_PinataHandler",0,health,GetActorProperty(0,APROP_Radius)>>16,GetActorProperty(0,APROP_Height)>>16);
		else
		{
			int presentTid = UniqueTid();
			int presentScale = 0.25 + ((health >= 200) * 0.175) + ((health >= 1000) * 0.175) + ((health >= 2500) * 0.175) + ((health >= 5000) * 0.175);
			SpawnForced("XmasGift",x,y,z,presentTid);
			ThrustThing(random(0,256),random(1,2),0,presentTid);
			ThrustThingZ(presentTid,random(4,8),0,0);
			SetActorProperty(presentTid,APROP_Health,health);
			SetActorProperty(presentTid,APROP_Accuracy,GetActorProperty(0,APROP_Radius)>>16);
			SetActorProperty(presentTid,APROP_Score,GetActorProperty(0,APROP_Height)>>16);
			SetActorProperty(presentTid,APROP_ScaleX,presentScale);
			SetActorProperty(presentTid,APROP_ScaleY,presentScale);
			SetActorProperty(presentTid,APROP_Mass,1+CheckFlag(0,"FRIENDLY"));
			Thing_ChangeTid(presentTid,0);
		}
	}

	if(CheckInventory("Painkiller_DamageCredit") && ((CheckFlag(0, "BOSS") == false) && CheckFlag(0, "NOBLOOD") == false && CheckFlag(0, "SEESDAGGERS") == false) && (!CheckInventory("IsSamsaraClass"))) ACS_NamedExecuteWithResult("Painkiller_MonsterKill",0,0,0);

	SetActivatorToTarget(0);

	if(override != 1)
		GiveInventory("KillCount", 1);

	if(CheckInventory("Hexen2Class"))
	{
		int chance = (0.05+((CheckInventory("Hexen2Level")-4)*0.03));
		if(chance > 0.2)
			chance = 0.2;

		if(CheckInventory("PistolStartEnabled"))
		{
			GiveInventory("Hexen2Experience", FixedMul((health*2.5)>>16,(1.0+(0.05*CheckInventory("Hexen2Wisdom"))))*(1+(PlayerCount()/4))*(experience*8)/2);
		}
		else
		{
			GiveInventory("Hexen2Experience", FixedMul((health*2.5)>>16,(1.0+(0.05*CheckInventory("Hexen2Wisdom"))))*(1+(PlayerCount()/4))*(experience)/2);
		}

		if(random(0.0,1.0) <= chance && !noblood)
			SpawnForced("Hexen2SoulSphere",x,y,z,0,0);
	}

	if(CheckInventory("WitchavenClass"))
		if(CheckInventory("PistolStartEnabled"))
		{
			GiveInventory("WTExperience", health*(1+(PlayerCount()/4))*(experience*4)/2);
		}
		else
		{
			GiveInventory("WTExperience", health*(1+(PlayerCount()/4))*(experience)/2);
		}

	if(CheckInventory("StrifeClass") && !CheckInventory("BlackBirdTauntCooldown"))
	{
		if(isBoss)
			GiveInventory("BlackBirdBossKill",1);
		else if(HasXDeath && currentHealth < -health && random(0,20) <= 3)
		{
			GiveInventory("BlackBirdXDeath",1);
		}
	}
}

//======================================================================================================================
//													Bot Alt Class
//======================================================================================================================

Script "Samsara_BotAltClassHandler" (int playernum)
{
	str playername;
	switch(PlayerClass(playernum))
	{
		case 0:
			playername = GetUserCvarString(playernum,"name");
			playername = StrRight(playername,strlen(playername)-2);
			playername = StrLeft(playername,strlen(playername)-2);
			if(StrCmp(playername,"Doom 64 Guy") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_doommode",1);
			}
			if(StrCmp(playername,"Doomguy (Stronghold)") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_doommode",2);
			}
			break;
		case 3:
			playername = GetUserCvarString(playernum,"name");
			playername = StrRight(playername,strlen(playername)-2);
			playername = StrLeft(playername,strlen(playername)-2);
			if(StrCmp(playername,"B.J. Blazkowicz (Lost)") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_wolfmode",1);
			}
			if(StrCmp(playername,"B.J. Blazkowicz (Totenkopf)") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_wolfmode",2);
			}
			break;
		case 4:
			playername = GetUserCvarString(playernum,"name");
			playername = StrRight(playername,strlen(playername)-2);
			playername = StrLeft(playername,strlen(playername)-2);
			if(StrCmp(playername,"Daedolon") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_hexclass",1);
			}
			if(StrCmp(playername,"Baratus") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_hexclass",2);
			}
			break;
		case 5:
			playername = GetUserCvarString(playernum,"name");
			playername = StrRight(playername,strlen(playername)-5);
			playername = StrLeft(playername,strlen(playername)-2);
			if(StrCmp(playername,"Duke Nukem (Beach)") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_dukemode",1);
			}
			if(StrCmp(playername,"Duke Nukem (DN64)") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_dukemode",2);
			}
			break;
		case 8:
			playername = GetUserCvarString(playernum,"name");
			playername = StrRight(playername,strlen(playername)-8);
			playername = StrLeft(playername,strlen(playername)-2);
			if(StrCmp(playername,"Taradino Cassatt") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_rottmode",1);
			}
			if(StrCmp(playername,"Thi Barrett") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_rottmode",2);
			}
			if(StrCmp(playername,"Lorelei Ni") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_rottmode",3);
			}
			if(StrCmp(playername,"Doug Wendt") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_rottmode",4);
			}
			break;
		case 9:
			playername = GetUserCvarString(playernum,"name");
			playername = StrRight(playername,strlen(playername)-2);
			playername = StrLeft(playername,strlen(playername)-2);
			if(StrCmp(playername,"Blake Stone (Planet Strike)") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_bsaog",1);
			}
			break;
		case 12:
			playername = GetUserCvarString(playernum,"name");
			playername = StrRight(playername,strlen(playername)-2);
			playername = StrLeft(playername,strlen(playername)-2);
			if(StrCmp(playername,"Kamchak") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_eradmode",1);
			}
			if(StrCmp(playername,"Dan Blaze") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_eradmode",2);
			}
			if(StrCmp(playername,"Alliance Commando") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_eradmode",3);
			}
			break;
		case 16:
			playername = GetUserCvarString(playernum,"name");
			playername = StrRight(playername,strlen(playername)-2);
			playername = StrLeft(playername,strlen(playername)-2);
			if(StrCmp(playername,"Tobias Locke") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_ipogmode",1);
			}
			if(StrCmp(playername,"Xith") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_ipogmode",2);
			}
			if(StrCmp(playername,"Specimen 7") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_ipogmode",3);
			}
			if(StrCmp(playername,"Theola Nom") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_ipogmode",4);
			}
			break;
		case 19:
			playername = GetUserCvarString(playernum,"name");
			playername = StrRight(playername,strlen(playername)-2);
			playername = StrLeft(playername,strlen(playername)-2);
			if(StrCmp(playername,"Shephard") == 0)
			{
				SetUserCvar(playernum,"samsara_cl_shephardmode",1);
			}
			break;
		case 27:
			while(GetActorProperty(0,APROP_Health) > 0)
			{
				int randomweapon = random(0,5);
				switch(randomweapon)
				{
					case 0:
						SetWeapon("Catacomb_WavesQuickSpell");
						break;
					case 1:
						SetWeapon("Catacomb_XTerminatorsQuickSpell");
						break;
					case 2:
						SetWeapon("Catacomb_BurstsQuickSpell");
						break;
					case 3:
						SetWeapon("Catacomb_ZappersQuickSpell");
						break;
					case 4:
						SetWeapon("Catacomb_NukesQuickSpell");
						break;
					case 5:
						SetWeapon("Catacomb_BoltsQuickSpell");
						break;
				}
				Delay(17);
			}
			break;
	}
}

//======================================================================================================================
//													Lasers
//======================================================================================================================

Script "Samsara_Laser" (int type, int space, int height) clientside
{
	int t, i, k = 0, l, angle, pitch, x, y, z, tx, ty, tz, vx, vy, vz, mag, magI, horz;
	str segment;
	switch(type)
	{
		case 1:
			segment = "Hexen2ForceCubeMissileSegment1";
			break;
		case 2:
			segment = "Hexen2ForceCubeMissileSegment2";
			break;
		case 3:
			segment = "Hexen2ForceCubeMissileSegment3";
			break;
		case 4:
			segment = "Hexen2ForceCubeMissileSegment4";
			break;
		case 5:
			segment = "Hexen2ForceCubeMissileSegment5";
			break;
		case 6:
			i = space;
			segment = "Hexen2TempestStaffPoweredLightningSegment";
			break;
		case 7:
			segment = "Hexen2FamineBeamSegment";
			break;
		case 8:
			segment = "TentacleProjectileSegment";
			break;
		case 9:
			horz = -11;
			i = 28;
			segment = "LaserProjectileSegment";
			break;
		case 10:
			horz = -2;
			i = 16;
			segment = "LaserProjectileSegment";
			break;
		case 11:
			horz = 2;
			i = 16;
			segment = "LaserProjectileSegment";
			break;
		case 12:
			i = 16;
			segment = "TentacleProjectileSegment";
			break;
		case 13:
			horz = 24;
			i = 64;
			segment = "WidowBeamProjectileSegment";
			break;
		case 14:
			i = space;
			segment = "LGBeam";
			break;
		case 15:
			segment = "Hexen2MedusaGazeSegment1";
			break;
	}


	int newtid = UniqueTid();

	tx = GetActorX(0); ty = GetActorY(0); tz = GetActorZ(0);

	SetActivatorToTarget(0);

	int xoff = sin(GetActorAngle(0)) * horz;
	int yoff = cos(GetActorAngle(0)) * horz;

	x = GetActorX(0) + xoff;
	y = GetActorY(0) + yoff;
	z = GetActorZ(0) + height*1.0;

	int vectorx = tx - x;
	int vectory = ty - y;
	int vectorz = tz - z;
	angle = VectorAngle(vectorx, vectory);

	int length = magnitudeTwo(vectorx>>16,vectory>>16);
	pitch = VectorAngle(length<<16, vectorz);

	vx = tx-x; vy = ty-y; vz = tz-z; mag = magnitudeThree_f(vx, vy, vz);
	vx = FixedDiv(vx, mag); vy = FixedDiv(vy, mag); vz = FixedDiv(vz, mag);
	magI = ftoi(mag);
	for (i = i; i < magI; i += space)
	{
		SpawnForced(segment, x+(vx*i), y+(vy*i), z+(vz*i), newtid);
		SetActorPitch(newtid, pitch);
		SetActorAngle(newtid, angle);
		if(i % 1500 == 0)
			Delay(1);
	}
}

//======================================================================================================================
//													Inventory Reset
//======================================================================================================================

Script "Samsara_ResetInventory" (void)
{
	int pln = PlayerNumber();
	ClearInventory();
	TakeInventory("GotWeapon0", INTMAX);
	TakeInventory("GotWeapon1", INTMAX);
	TakeInventory("GotWeapon2", INTMAX);
	TakeInventory("GotWeapon3", INTMAX);
	TakeInventory("GotWeapon4", INTMAX);
	TakeInventory("GotWeapon5", INTMAX);
	TakeInventory("GotWeapon6", INTMAX);
	TakeInventory("GotWeapon7", INTMAX);
	TakeInventory("KillCountBar", INTMAX);
	TakeInventory("AllyCellPhone", INTMAX);
	TakeInventory("SamsaraSlotIGiven", INTMAX);
	TakeInventory("SamsaraSlotIIGiven", INTMAX);
	TakeInventory("SamsaraBackpackGiven", INTMAX);
	switch(PlayerClass(pln))
	{
		case 0:
			TakeInventory(" Chainsaw ", INTMAX);
			TakeInventory(" Shotgun ", INTMAX);
			TakeInventory("Super Shotgun", INTMAX);
			TakeInventory("Automatic Shotgun", INTMAX);
			TakeInventory(" Chaingun ", INTMAX);
            SetInventory("SamsaraDoom64ChaingunSoundChannelCount", 0);
			TakeInventory(" Flamer ", INTMAX);
			TakeInventory(" Minigun ", INTMAX);
			TakeInventory("Rocket Launcher", INTMAX);
			TakeInventory("Land Mine Layer", INTMAX);
			TakeInventory( " GrenadeLauncher ", INTMAX);
			TakeInventory("Plasma Rifle", INTMAX);
			TakeInventory("Stunner Rifle", INTMAX);
			TakeInventory(" RailGun ", INTMAX);
			TakeInventory("B.F.G. 9000", INTMAX);
			TakeInventory(" Unmaker ", INTMAX);
            SetInventory("SamsaraDoom64UnmakerSoundChannelCount", 0);
			TakeInventory("Pyro Cannon", INTMAX);
			TakeInventory(" BFG10K ", INTMAX);
			TakeInventory("PowerStrength", 1);
			TakeInventory("SamsaraDoom64UnmakerArtifact", INTMAX);
			TakeInventory("SamsaraDoomguyStrWeaponPowerItem", INTMAX);
			TakeInventory("DGStrHasAutoShotgun", INTMAX);
			TakeInventory("DGHasChaingun", INTMAX);
			TakeInventory("DGStrHasFlamethrower", INTMAX);
			TakeInventory("DGHasMinigun", INTMAX);
			TakeInventory("DGHasRocketLauncher", INTMAX);
			TakeInventory("DGStrHasLandMines", INTMAX);
			TakeInventory("DGHasGrenadeLauncher", INTMAX);
			TakeInventory("DGHasPlasmaRifle", INTMAX);
			TakeInventory("DGStrHasStunnerRifle", INTMAX);
			TakeInventory("DGHasRailGun", INTMAX);
			TakeInventory("DGHasBFG9000", INTMAX);
			TakeInventory("Doom64_IHaveUnmaker", INTMAX);
			TakeInventory("DGStrHasPyroCannon", INTMAX);
			TakeInventory("DGHasBFG10K", INTMAX);
			SetInventory("SamsaraDoom64StartingUnmakerArtifactsGiven", 0);
			TakeInventory("DGStrHasHomingRocketLauncher", INTMAX);
			TakeInventory("DGStrHasPlasmaRepeater", INTMAX);
			TakeInventory("DGStrHasWPK", INTMAX);

			GiveInventory(" Pistol ", 1);
			GiveInventory(" Fist ", 1);
			GiveInventory("DoomguyClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetInventory("DoomguyStrASGClip", 20);
			SetInventory("DoomguyRailgunClip", 4);
			SetInventory("SamsaraDoomguyStrPistolLoaded", 0);
			SetWeapon(" Pistol ");
			break;
		case 1:
			TakeInventory("Super Bootspork", INTMAX);
			TakeInventory("Large Zorcher", INTMAX);
			TakeInventory("Super Large Zorcher", INTMAX);
			TakeInventory("Rapid Zorcher", INTMAX);
			TakeInventory("Ultra Rapid Zorcher", INTMAX);
			TakeInventory("Zorch Propulsor", INTMAX);
			TakeInventory("Zorch Launcher", INTMAX);
			TakeInventory("Phasing Zorcher", INTMAX);
			TakeInventory("Gigazorcher 2100", INTMAX);
			TakeInventory("LAZ Device", INTMAX);
			TakeInventory("Liquid Zorcher", INTMAX);
			TakeInventory("Chain-Lightning Zorcher", INTMAX);

			GiveInventory("Mini-Zorcher", 1);
			GiveInventory(" Bootspoon ", 1);
			GiveInventory("ChexClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetInventory("ChexGigazorcherClip", 4);
			SetWeapon("Mini-Zorcher");
			break;
		case 2:
			TakeInventory("Gauntlets of the Necromancer", INTMAX);
			TakeInventory(" Firemace ", INTMAX);
			TakeInventory("Ethereal Crossbow", INTMAX);
			TakeInventory("Dragon Claw", INTMAX);
			TakeInventory("Phoenix Rod", INTMAX);
			TakeInventory("Hellstaff", INTMAX);
			TakeInventory("DSparilStaff", INTMAX);
			TakeInventory("DSparilStaffMinion", INTMAX);
			TakeInventory("Grim Ballista", INTMAX);
			TakeInventory("SamsaraCorvusArtiEgg", INTMAX);
			TakeInventory("PermaTimeBomb", INTMAX);
			TakeInventory("PermaRemoteBomb", INTMAX);
			TakeInventory("PermaProxyBomb", INTMAX);
			TakeInventory("PortQuartzFlask", INTMAX);
			TakeInventory("PortSuperHealth", INTMAX);
			TakeInventory("CorvusMegasphere", INTMAX);
			TakeInventory("PortGhostly", INTMAX);
			TakeInventory("PortRingInvuln", INTMAX);
			TakeInventory("PortTorch", INTMAX);
			TakeInventory("PortTome", INTMAX);

			GiveInventory("Elven Wand", 1);
			GiveInventory(" Staff ", 1);
			GiveInventory("CorvusClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("PermaTimeBomb", 1);
			GiveInventory("PermaRemoteBomb", 1);
			GiveInventory("PermaProxyBomb", 1);
			SetWeapon("Elven Wand");
			break;
		case 3:
			TakeInventory("BJSuperKnife", INTMAX);
			TakeInventory("Totenkopf_PistolDual", INTMAX);
			TakeInventory("Totenkopf_Mauser", INTMAX);
			TakeInventory("Totenkopf_MauserDual", INTMAX);
			TakeInventory("Machine Gun", INTMAX);
			TakeInventory("Totenkopf_STG44", INTMAX);
			TakeInventory("Totenkopf_STGFiredOnce", INTMAX);
			TakeInventory("  Chaingun  ", INTMAX);
			TakeInventory("Totenkopf_MP40Dual", INTMAX);
			TakeInventory(" Rocket Launcher ", INTMAX);
			TakeInventory(" Flamethrower ", INTMAX);
			TakeInventory("Spear of Destiny", INTMAX);
			TakeInventory("Mauser Rifle", INTMAX);
			TakeInventory("WolfExtraLife", INTMAX);
			TakeInventory("Totenkopf_Flamethrower", INTMAX);
			TakeInventory("Totenkopf_MG42", INTMAX);
			TakeInventory("Totenkopf_Sniper", INTMAX);
			TakeInventory("TotenkopfHealingOrbHealer", INTMAX);
			TakeInventory("TotenkopfHasHealingOrb", INTMAX);
			TakeInventory("TotenkopfPowerArmorPickup", INTMAX);
			TakeInventory("TotenkopfHasPowerArmor", INTMAX);

			GiveInventory("Luger", 1);
			GiveInventory("Knife", 1);
			GiveInventory("WolfenClass", 1);
			GiveInventory("CanWolfMovement", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Luger");
			break;
		case 4:
			TakeInventory("PortFlechette", INTMAX);
			TakeInventory("PortQuartzFlask2", INTMAX);
			TakeInventory("PortSuperHealth2", INTMAX);
			TakeInventory("PortMysticAmbit", INTMAX);
			TakeInventory("Serpent Staff", INTMAX);
			TakeInventory("Bloodscourge", INTMAX);
			TakeInventory("Hammer of Retribution", INTMAX);
			TakeInventory("Frost Shards", INTMAX);
			TakeInventory("Timon's Axe", INTMAX);
			TakeInventory("Firestorm", INTMAX);
			TakeInventory("Wraithverge", INTMAX);
			TakeInventory("PortGhostly2", INTMAX);
			TakeInventory("PortIconDefender", INTMAX);
			TakeInventory("PortTorch2", INTMAX);
			TakeInventory("PortKraterOfMight", INTMAX);

			GiveInventory("Sapphire Wand", 1);
			GiveInventory("Mace of Contrition", 1);
			GiveInventory("HexenClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Sapphire Wand");
			break;
		case 5:
			TakeInventory("Pipebombs", INTMAX);
			TakeInventory("Chaingun Cannon", INTMAX);
			TakeInventory("Golden Desert Eagle", INTMAX);
			TakeInventory("DukePortJetpack", INTMAX);
			TakeInventory("DukePetjack", INTMAX);
			TakeInventory("DukeBootserk", INTMAX);
			TakeInventory("DukePortNiVi", INTMAX);
			TakeInventory("DukeNightVision", INTMAX);
			TakeInventory("ItemHoloDuke", INTMAX);
			TakeInventory("Shotgun", INTMAX);
			TakeInventory("Explosive Shotgun", INTMAX);
			TakeInventory("Chaingun Cannon", INTMAX);
			TakeInventory("RPG", INTMAX);
			TakeInventory("Freezethrower", INTMAX);
			TakeInventory("Devastator Weapon", INTMAX);
			TakeInventory("DukeHasShrinker", INTMAX);
			TakeInventory("DukeHasExpander", INTMAX);
			TakeInventory("Duke64UsingDumDums", INTMAX);
			TakeInventory("Duke64UsingExplosiveShells", INTMAX);
			TakeInventory("Duke64UsingHeatSeeking", INTMAX);
			TakeInventory("Duke64UsingShrinker", INTMAX);

			GiveInventory("Glock 17", 1);
			GiveInventory("Mighty Boot", 1);
			GiveInventory("DukeClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Glock 17");

			if (!CheckInventory("DukeBallgag"))
			{
				LocalAmbientSound("duke/mpdeath",127);
				GiveInventory("DukeTauntCooldown",5);
				ACS_NamedExecuteAlways("DukeTauntCooldown",0,0);
			}
			break;
		case 6:
			TakeInventory("CanDualPistols", INTMAX);
			TakeInventory("KKV-7 SMG Flechette", INTMAX);
			TakeInventory("Tech.50 Pacifier", INTMAX);
			TakeInventory("WSTE-M5 Combat Shotgun", INTMAX);
			TakeInventory("CanDualShotties", INTMAX);
			TakeInventory("Fusion Pistol", INTMAX);
			TakeInventory("MA-75B Assault Rifle", INTMAX);
			TakeInventory("SPNKR-XP SSM Launcher", INTMAX);
			TakeInventory("TOZT-7 Napalm Unit", INTMAX);
			TakeInventory("ONI-71 Wave Motion Cannon", INTMAX);
			TakeInventory("Alien Weapon", INTMAX);
			TakeInventory(" Alien Weapon ", INTMAX);
			TakeInventory("Talon Ceramic Combat Blade", INTMAX);
			TakeInventory("SPNKR-25 Auto Cannon", INTMAX);

			GiveInventory(".44 Magnum Mega Class A1", 1);
			GiveInventory("Steel Knuckles", 1);
			GiveInventory("Shell", 20);
			GiveInventory("RocketAmmo", 10);
			GiveInventory("Cell", 50);
			GiveInventory("MarathonClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("MagnumBullet", 8);
			GiveInventory("MagnumBulletRight", 8);
			GiveInventory("SmgBullet", 32);
			GiveInventory("Tech50Ammo", 1);
			GiveInventory("WastemShell", 2);
			GiveInventory("WastemShellRight", 2);
			GiveInventory("FusionBullet", 20);
			GiveInventory("RifleBullet", 52);
			GiveInventory("GrenadeInClip", 7);
			GiveInventory("SpankerAmmo", 2);
			GiveInventory("NapalmInTank", 210);
			GiveInventory("Spanker2Ammo", 7);
			GiveInventory("WMCAmmo", 8);
			GiveInventory("MortarAmmo", 3);
			SetInventory("UnknownAmmo", 0);
			SetInventory("UnknownAmmo2", 0);
			GiveInventory("KnifeAmmo", 2);
			SetWeapon(".44 Magnum Mega Class A1");
			break;
		case 7:
            SetInventory("QSG_FiredOnce", 0);
			TakeInventory("Laser Cannon", INTMAX);
			TakeInventory("Nailgun", INTMAX);
			TakeInventory("Nailgun DOE", INTMAX);
			TakeInventory("QuadDamageItem", INTMAX);
			TakeInventory("Thunderbolt", INTMAX);
			TakeInventory("Thunderbolt DOE", INTMAX);
			TakeInventory("Rocket Powered Impaler", INTMAX);
			TakeInventory("Double Shotgun", INTMAX);
			TakeInventory("Grenade Launcher", INTMAX);
			TakeInventory("Grenade Launcher DOE", INTMAX);
			TakeInventory("  Rocket Launcher  ", INTMAX);
			TakeInventory("  Rocket Launcher DOE  ", INTMAX);
			TakeInventory("Super Nailgun", INTMAX);
			TakeInventory("Super Nailgun DOE", INTMAX);
			TakeInventory("Clip", INTMAX);
			TakeInventory("LavaNails", INTMAX);
			TakeInventory("MultiRocketAmmo", INTMAX);
			TakeInventory("PlasmaCell", INTMAX);

			GiveInventory("QuakeClass", 1);
			GiveInventory("Single Shotgun", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("Shell", 25);
			GiveInventory("Axe", 1);
			SetWeapon("Single Shotgun");
			break;
		case 8:
			TakeInventory("HeatSeeker", INTMAX);
			TakeInventory("Double Pistols", INTMAX);
			TakeInventory("Bazooka", INTMAX);
			TakeInventory("MP40", INTMAX);
			TakeInventory("RoTTM60", INTMAX);
			TakeInventory("Firebomb", INTMAX);
			TakeInventory("Doomstick", INTMAX);
			TakeInventory("DrunkMissiles", INTMAX);
			TakeInventory("FlameWall", INTMAX);
			TakeInventory("Split Missile", INTMAX);
			TakeInventory("Excalibat", INTMAX);
			TakeInventory("DarkStaff", INTMAX);
			TakeInventory("God Hand", INTMAX);
			TakeInventory("Doggie", INTMAX);
			TakeInventory("Clip", INTMAX);

			GiveInventory("RottClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("RPistol", 1);
			GiveInventory("RottKnife", 1);
			GiveInventory("DisplayMenu", 1);
			SetWeapon("RPistol");
			break;
		case 9:
			TakeInventory("BlakeRefill", INTMAX);
			TakeInventory("BlakeSuperAutoCharge", INTMAX);
			TakeInventory("Slow Fire Protector", INTMAX);
			TakeInventory("Rapid Assault Rifle", INTMAX);
			TakeInventory("Dual Neutron Disruptor", INTMAX);
			TakeInventory("Plasma Discharge Unit", INTMAX);
			TakeInventory("Gatling Fusion Devastator", INTMAX);
			TakeInventory("Anti-Plasma Cannon", INTMAX);
			TakeInventory("BlakeShield", INTMAX);
			TakeInventory("Advanced Auto Charge Pistol", INTMAX);

			GiveInventory("BlakeClass", 1);
			GiveInventory("Auto Charge Pistol", 1);
			GiveInventory("CanWolfMovement", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Auto Charge Pistol");
			break;
		case 10:
			TakeInventory("Dynamite", INTMAX);
			TakeInventory("Flaregun", INTMAX);
			TakeInventory("Sawedoff", INTMAX);
			TakeInventory("Tommygun", INTMAX);
			TakeInventory("BloodGreaseGun", INTMAX);
			TakeInventory("NapalmLauncher", INTMAX);
			TakeInventory("TeslaCannon", INTMAX);
			TakeInventory("BloodFlamethrower", INTMAX);
			TakeInventory("LifeLeech", INTMAX);
			TakeInventory("BloodNaturomDemonto", INTMAX);
			TakeInventory("GunsAkimboP", INTMAX);
			TakeInventory("GunsAkimboItem", INTMAX);
			TakeInventory("VoodooDoll", INTMAX);
			TakeInventory("SprayCan", INTMAX);
			TakeInventory("Flaregun2", INTMAX);

			GiveInventory("CalebClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory(" Revolver ", 1);
			GiveInventory("Pitchfork", 1);
			SetWeapon(" Revolver ");
			break;
		case 11:
			TakeInventory(" Sigil ", INTMAX);
			TakeInventory("StrifeSigilPiece", INTMAX);
			TakeInventory("StrifeBeaconItem5", INTMAX);
			TakeInventory("  Crossbow  ", INTMAX);
			TakeInventory("  Crossbow Poison  ", INTMAX);
			TakeInventory("Mini Missile Launcher", INTMAX);
			TakeInventory("Assault Gun", INTMAX);
			TakeInventory(" Grenade Launcher ", INTMAX);
			TakeInventory(" Grenade Launcher WP ", INTMAX);
			TakeInventory(" Grenade Launcher Gas ", INTMAX);
			TakeInventory("Flame Thrower", INTMAX);
			TakeInventory(" Mauler ", INTMAX);
			TakeInventory(" Mauler Torpedo ", INTMAX);
			TakeInventory("Sigil", INTMAX);
			TakeInventory("StrifeSigilPiecePreferred",INTMAX);
			TakeInventory("StrifePortMedikit",INTMAX);
			TakeInventory("StrifeStimpack2",INTMAX);
			TakeInventory("StrifeSurgeryKit2",INTMAX);
			TakeInventory("PortShadowArmor",INTMAX);
			TakeInventory("PortEnviSuit",INTMAX);
			TakeInventory("StrifeguyStartingUpgradesHasBeenGiven", INTMAX);

			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("StrifeClass", 1);
			GiveInventory("Punch Dagger", 1);
			GiveInventory(" Pistol ", 1);
			SetWeapon(" Pistol ");
			break;
		case 12:
			TakeInventory(" Arachnicator ", INTMAX);
			TakeInventory("Sonic Shock", INTMAX);
			TakeInventory("Pellet Bomb", INTMAX);
			TakeInventory("Dart Cannon", INTMAX);
			TakeInventory("	Missile Launcher	", INTMAX);
			TakeInventory("Napalm Charge", INTMAX);
			TakeInventory(" Plasma Ball ", INTMAX);
			TakeInventory(" Eradicator Enhancement Chip ", INTMAX);
			TakeInventory(" EvilBuddy ", INTMAX);

			GiveInventory("EradClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("Claw", 1);
			GiveInventory("Ripper Disc", 1);
			SetWeapon("Ripper Disc");
			break;
		case 13:
			TakeInventory("M24CAW", INTMAX);
			TakeInventory("M343Vulcan", INTMAX);
			TakeInventory("AssaultShotgun", INTMAX);
			TakeInventory("AlienDualBlaster", INTMAX);
			TakeInventory("AlienPlasmaRifle", INTMAX);
			TakeInventory("AlienAssaultCannon", INTMAX);
			TakeInventory("AlienDisintegrator", INTMAX);
			TakeInventory("SuperVulcan", INTMAX);
			TakeInventory("C7VisorActive",INTMAX);

			GiveInventory("Taser", 1);
			GiveInventory("CanWolfMovement", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("C7Class", 1);
			SetWeapon("Taser");
			break;
		case 14:
			TakeInventory("DirtShark", INTMAX);
			TakeInventory("ACR Combat Laser", INTMAX);
			TakeInventory("ACR ADD-ON", INTMAX);
			TakeInventory("Cyclops Particle Accelerator", INTMAX);
			TakeInventory("RMR Grenade Launcher", INTMAX);
			TakeInventory("RMR Railgun", INTMAX);
			TakeInventory(" RMR Plasma Cannon ", INTMAX);
			TakeInventory("Subestron Arm", INTMAX);
			TakeInventory("Estron Ball", INTMAX);
			TakeInventory("RMROxygenRecycler", INTMAX);
			TakeInventory("RMRJetPack", INTMAX);

			GiveInventory(" Laser Pistol ", 1);
			GiveInventory("RMRClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon(" Laser Pistol ");
			break;
		case 15:
			TakeInventory("Thermal Detonator", INTMAX);
			TakeInventory("Stormtrooper Rifle", INTMAX);
			TakeInventory("Fusion Cutter", INTMAX);
			TakeInventory("Imperial Repeater", INTMAX);
			TakeInventory("Mortar Gun", INTMAX);
			TakeInventory("Concussion Rifle", INTMAX);
			TakeInventory("Assault Cannon", INTMAX);
			TakeInventory("DFSuperCharge", INTMAX);
			TakeInventory("Stun Gauntlets", INTMAX);
			TakeInventory("I.M. Mines", INTMAX);
			TakeInventory("Czerka Adventurer", INTMAX);

			GiveInventory("Fist_2x5", 1);
			GiveInventory("Bryar Pistol", 1);
			GiveInventory("KatarnStarterShield",1);
			GiveInventory("KatarnClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Bryar Pistol");
			break;
		case 16:
			TakeInventory(" Toxic Mutant Gun ", INTMAX);
			TakeInventory(" Plasma Shotgun ", INTMAX);
			TakeInventory(" Aldus Flamethrower ", INTMAX);
			TakeInventory(" Fast Chaingun ", INTMAX);
			TakeInventory(" Fast Rocket Launcher ", INTMAX);
			TakeInventory(" Laser Cannon ", INTMAX);
			TakeInventory(" Super Plasma Annihilator ", INTMAX);
			TakeInventory(" Lizard Crossbow ", INTMAX);
			TakeInventory("PGSuperTazer", INTMAX);
			TakeInventory("PGUltraTazer", INTMAX);
			TakeInventory("IPOGGrenadeItem", INTMAX);
			TakeInventory("IPOGTimeBombItem", INTMAX);
			TakeInventory("IPOGProximityMineItem", INTMAX);
			TakeInventory("IPOGCloneItem", INTMAX);

			GiveInventory("POGreedClass", 1);
			GiveInventory(" Tazer ", 1);
			GiveInventory(" Aldus Pistol ", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon(" Aldus Pistol ");
			break;
		case 17:
			TakeInventory(" 18mm Auto ", INTMAX);
			TakeInventory(" Phase Rifle ", INTMAX);
			TakeInventory(" AM Blaster ", INTMAX);
			TakeInventory("Phase Repeater", INTMAX);
			TakeInventory(" Lock-on Cannon ", INTMAX);
			TakeInventory(" AM Cyclone ", INTMAX);
			TakeInventory(" Disruptor Zodiac ", INTMAX);
			TakeInventory(" Disruptor Plasmalance ", INTMAX);
			TakeInventory("DisruptorPSIEnergy", INTMAX);
			TakeInventory("DisruptorPSICooldown", INTMAX);
			TakeInventory("DisruptorEnergyBall", INTMAX);
			TakeInventory("DisruptorTeraBall", INTMAX);

			GiveInventory(" 18mm Semi ", 1);
			GiveInventory("Disruptor Fist", 1);
			GiveInventory("DisruptorClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("DisruptorDrain", 1);
			GiveInventory("DisruptorHealPSI", 1);
			GiveInventory("DisruptorPSIEnergy", 10);
			SetWeapon(" 18mm Semi ");
			break;
		case 18:
			TakeInventory("WTShieldTrigger", INTMAX);
			TakeInventory("WTShieldUsed", INTMAX);
			TakeInventory("WTWeaponActive", INTMAX);
			TakeInventory("WTShieldDisable", INTMAX);
			TakeInventory("WTShieldCounter", INTMAX);
			TakeInventory("WTSpellCounter", INTMAX);
			TakeInventory("WTCastingSpell", INTMAX);
			TakeInventory("WTHalberdHold", INTMAX);
			TakeInventory("WTBowUpgrade", INTMAX);
			TakeInventory("WTSwordUpgrade", INTMAX);
			TakeInventory("WTFistActive", INTMAX);
			TakeInventory("WTFistAttack", INTMAX);
			TakeInventory("Pike Axe", INTMAX);
			TakeInventory("Battle Axe", INTMAX);
			TakeInventory("Ice Halberd", INTMAX);
			TakeInventory("Fire Mace", INTMAX);
			TakeInventory("Broad Sword", INTMAX);
			TakeInventory("Frozen Two-Hand Sword", INTMAX);
			TakeInventory("WTHealthPhial", INTMAX);
			TakeInventory("WTInvisibilityPhial", INTMAX);
			TakeInventory("WTFireProofPhial", INTMAX);
			TakeInventory("WTLevel", INTMAX);
			SetInventory("WTExperience", 0);
			SetInventory("WTLevelHUD", 1);

			GiveInventory("Bow and Arrows", 1);
			GiveInventory("Witchaven_Dagger", 1);
			GiveInventory("Spellbook", 1);
			GiveInventory("WitchavenClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("GrondovalStarterArmor", 1);
			SetWeapon("Bow and Arrows");
			break;
		case 19:
			TakeInventory("HalfLifeMusicPlayingToken", 1);
			TakeInventory("HalfLifeOpposingForceSet", 1);
			TakeInventory("HLHEVIsTalking", 1);
			TakeInventory("HLHEVPickupID", 1);
			TakeInventory("HLHEVDamageType", 1);
			TakeInventory("HLSpeedTokens", 1);
			TakeInventory("Hornetgun", 1);
			TakeInventory("Assault Shotgun", 1);
			TakeInventory(".357 Python", 1);
			TakeInventory("HLDeagleLaserActivated", 1);
			TakeInventory("HLDeagleLaserMemory", 1);
			TakeInventory("MP5", 1);
			TakeInventory(" RPG ", 1);
			TakeInventory("SamsaraHalfLifeRPGLaserActivated", 1);
			TakeInventory("SamsaraHalfLifeRPGNotLoaded", 1);
			TakeInventory("Gauss Cannon", 1);
			SetInventory("HLSawSkipFire", 0);
			TakeInventory("E.G.O.N.", 1);
			TakeInventory("HL Squeaks", 1);
			TakeInventory("HL Crossbow", 1);
			TakeInventory("HLOPHasBarnacleLongJump", 1);
			TakeInventory("HLOPBarnacleReleaseTether", 1);
			TakeInventory("HLOPBarnacleLatchedTether", 1);
			TakeInventory("HLOPBarnacleTetherActive", 1);
			TakeInventory("HLOPBarnacle", 1);

			GiveInventory("9mm Pistol", 1);
			GiveInventory("Crowbar", 1);
			GiveInventory("HalfLifeClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("Clip", 30);
			GiveInventory("Shell", 15);
			GiveInventory("RocketAmmo", 5);
			GiveInventory("FlashLightAmmo", 4200);
			SetInventory("SamsaraFlashLightAmmoDisplay", CheckInventory("FlashLightAmmo") / 35);
			GiveInventory("HL9mmCounter", 17);
			GiveInventory("HornetGunAmmo", 8);
			GiveInventory("ShockRoachAmmo", 10);
			GiveInventory("HLShotgunCounter", 8);
			GiveInventory("HLPythonCounter", 6);
			GiveInventory("HLDeagleCounter", 7);
			GiveInventory("HLMP5Counter", 50);
			GiveInventory("HLRPGCounter", 1);
			GiveInventory("HLSporeCounter", 10);
			GiveInventory("HLSAWCounter", 100);
			GiveInventory("HLXBowAmmoCounter", 5);
			GiveInventory("HLSniperCounter", 5);
			GiveInventory("SamsaraHalfLifeRPGLaserMemory", 1);
			SetWeapon("9mm Pistol");
			break;
		case 20:
			TakeInventory("SWGasGrenade", 5);
			TakeInventory("HeatSeekingCard", 2);
			TakeInventory("HeatSeekerCharge", 5);

			GiveInventory("SWShuriken", 1);
			GiveInventory("SWKatana", 1);
			GiveInventory("SWFists", 1);
			GiveInventory("GuardMode1", 1);
			GiveInventory("SWClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetInventory("SWUziClip", 50);
			SetInventory("SWUziClipDual", 50);
			SetWeapon("SWShuriken");
			break;
		case 21:
			TakeInventory("CybermageMedkit", INTMAX);
			TakeInventory("usingmagicclip", INTMAX);
			TakeInventory("usingmagicshell", INTMAX);
			TakeInventory("usingmagicrocket", INTMAX);
			TakeInventory("usingmagiccell", INTMAX);
			TakeInventory("MagicMode1", INTMAX);
			TakeInventory("MagicMode2", INTMAX);
			TakeInventory("MagicMode3", INTMAX);
			TakeInventory("MagicMode4", INTMAX);
			TakeInventory("AllowMeDoSwitch1", INTMAX);
			TakeInventory("AllowMeDoSwitch2", INTMAX);
			TakeInventory("AllowMeDoSwitch3", INTMAX);
			TakeInventory("AllowMeDoSwitch4", INTMAX);
			TakeInventory("CMDarklightFoil", 1);
			TakeInventory("CMFusionGun", 1);
			TakeInventory("CMBlastRifle", 1);
			TakeInventory("CMSMG", 1);
			TakeInventory("CMRocketGun", 1);
			TakeInventory("CMHVBMG", 1);
			TakeInventory("CMPlasmaGun", 1);

			GiveInventory("CMLaserPistol", 1);
			GiveInventory("MagicFist", 1);
			GiveInventory("CMClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("usingmagicnull", 1);
			GiveInventory("MagicMode0", 1);
			SetWeapon("CMLaserPistol");
			break;
		case 22:
			TakeInventory("EyeOfSiaItem_EX",INTMAX);
			TakeInventory("DivineScarab_Ex",INTMAX);
			TakeInventory("LighterofGumercindo_EX",INTMAX);

			GiveInventory("PSMagnum", 1);
			SetInventory("PSMagnumReload", 6);
			SetInventory("PSShotgunReload", 8);
			SetInventory("PSM60Reload", 99);
			GiveInventory("PSMachete", 1);
			GiveInventory("JonClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("PSMagnum");
			break;
		case 23:
			TakeInventory("RRCowPie",INTMAX);
			TakeInventory("RRBubbaBeer",INTMAX);
			TakeInventory("RRCheapasswhiskey",INTMAX);
			TakeInventory("RRDrunkAmount",INTMAX);
			TakeInventory("RRFoodAmount",INTMAX);

			GiveInventory(" .454 Casull Pistol ", 1);
			SetInventory("LeonardPistolReload", 6);
			GiveInventory(" RR Crowbar ", 1);
			GiveInventory("RRClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon(" .454 Casull Pistol ");
			break;
		case 24:
			TakeInventory("Q2Silencer", INTMAX);
			TakeInventory("Q2EnvironmentSuit", INTMAX);
			TakeInventory("Q2Invulnerability", INTMAX);
			TakeInventory("Q2QuadDamage", INTMAX);
			TakeInventory("Q2DualFireDamage", INTMAX);
			TakeInventory("Q2DoubleDamage", INTMAX);
			TakeInventory("Q2Machinegun", INTMAX);
			TakeInventory("Q2Shotgun", INTMAX);
			TakeInventory("Q2SuperShotgun", INTMAX);
			TakeInventory("Q2Chaingun", INTMAX);
			TakeInventory("Q2ETFRifle", INTMAX);
			TakeInventory("Q2RocketLauncher", INTMAX);
			TakeInventory("Q2Phalanx", INTMAX);
			TakeInventory("Q2HyperBlaster", INTMAX);
			TakeInventory("Q2PlasmaBeam", INTMAX);
			TakeInventory("Q2BFG10K", INTMAX);
			TakeInventory("Q2Trap", INTMAX);
			TakeInventory("Q2Railgun", INTMAX);
			TakeInventory("Q2IonRipper", INTMAX);
			TakeInventory("Q2GrenadeLauncher", INTMAX);

			GiveInventory("Q2Blaster", 1);
			GiveInventory("BittermanClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Q2Blaster");
			break;
		case 25:
			TakeInventory("Hexen2Level", INTMAX);
			TakeInventory("Hexen2Experience", INTMAX);
			TakeInventory("Hexen2Intelligence", INTMAX);
			TakeInventory("Hexen2Wisdom", INTMAX);
			TakeInventory("Hexen2Dexterity", INTMAX);
			TakeInventory("Hexen2Strength", INTMAX);
			TakeInventory("Hexen2BlueManaAdd", INTMAX);
			TakeInventory("Hexen2GreenManaAdd", INTMAX);
			TakeInventory("Hexen2HealthAdd", INTMAX);
			TakeInventory("PortQuartzFlask3", INTMAX);
			TakeInventory("PortSuperHealth3", INTMAX);
			TakeInventory("PortGhostly2", INTMAX);
			TakeInventory("PortIconDefender2", INTMAX);
			TakeInventory("PortTorch3", INTMAX);
			TakeInventory("PortKraterOfMight2", INTMAX);
			TakeInventory("Hexen2TomeOfPower", INTMAX);
			TakeInventory("Hexen2ForceCube", INTMAX);

			GiveInventory("Hexen2Level", 1);
			GiveInventory("Hexen2Intelligence", 9);
			GiveInventory("Hexen2Wisdom", 11);
			GiveInventory("Hexen2Dexterity", 9);
			GiveInventory("Hexen2Strength", 11);
			GiveInventory("Hexen2BloodFire", 1);
			GiveInventory("Hexen2Sickle", 1);
			GiveInventory("Hexen2Class", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Hexen2BloodFire");
			break;
		case 26:
			TakeInventory("Goldeneye_GoldenGun", INTMAX);
			SetInventory("SamsaraGoldenEyeSniperRifleFiredOnce", 0);
			SetInventory("SamsaraGoldenEyeSniperRifleReloadedOnce", 0);
			TakeInventory("Goldeneye_TimedMines", INTMAX);
			TakeInventory("Goldeneye_ProximityMines", INTMAX);
			TakeInventory("Goldeneye_RemoteMines", INTMAX);

			GiveInventory("BondClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			GiveInventory("Goldeneye_PP7Silenced", 1);
			GiveInventory("Goldeneye_Slapper", 1);
			GiveInventory("Goldeneye_PP7Magazine", 7);
			GiveInventory("Goldeneye_PP7DualMagazine" ,7);
			GiveInventory("Goldeneye_KF7Magazine", 30);
			GiveInventory("Goldeneye_KF7DualMagazine", 30);
			GiveInventory("Goldeneye_AutoShotgunMagazine", 5);
			GiveInventory("Goldeneye_AutoShotgunDualMagazine", 5);
			GiveInventory("Goldeneye_AR33Magazine", 30);
			GiveInventory("Goldeneye_AR33DualMagazine", 30);
			GiveInventory("Goldeneye_RocketLauncherMagazine", 1);
			GiveInventory("Goldeneye_RocketLauncherDualMagazine", 1);
			GiveInventory("Goldeneye_RCP90Magazine", 80);
			GiveInventory("Goldeneye_RCP90DualMagazine", 80);
			GiveInventory("Goldeneye_GoldenGunMagazine", 1);
			GiveInventory("Goldeneye_GoldenGunDualMagazine", 1);
			GiveInventory("Goldeneye_SniperMagazine", 8);
			GiveInventory("Goldeneye_SniperDualMagazine", 8);
			GiveInventory("Goldeneye_D5KMagazine", 30);
			GiveInventory("Goldeneye_D5KDualMagazine", 30);
			GiveInventory("Goldeneye_TankMagazine", 1);
			SetWeapon("Goldeneye_PP7Silenced");
			break;
		case 27:
			TakeInventory("Catacomb_SmallHealthPotion", INTMAX);
			TakeInventory("Catacomb_LargeHealthPotion", INTMAX);
			TakeInventory("Catacomb_Waves", INTMAX);
			TakeInventory("Catacomb_XTerminators", INTMAX);
			TakeInventory("Catacomb_Bursts", INTMAX);
			TakeInventory("Catacomb_Zappers", INTMAX);
			TakeInventory("Catacomb_Nukes", INTMAX);
			TakeInventory("Catacomb_Bolts", INTMAX);
			TakeInventory("Catacomb_Hourglass", INTMAX);
			TakeInventory("Catacomb_HourglassCooldown", INTMAX);

			GiveInventory("Catacomb3D_MagicMissile", 1);
			GiveInventory("CatacombClass", 1);
			GiveInventory("CanWolfMovement", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Catacomb3D_MagicMissile");
			break;
		case 28:
			TakeInventory("Painkiller_SoulCatcher", INTMAX);
			TakeInventory("Painkiller_SoulKeeper", INTMAX);
			TakeInventory("Painkiller_SoulRedeemer", INTMAX);
			TakeInventory("Painkiller_DarkSoul", INTMAX);
			TakeInventory("Painkiller_Blessing", INTMAX);
			TakeInventory("Painkiller_Replenish", INTMAX);
			TakeInventory("Painkiller_Forgiveness", INTMAX);
			TakeInventory("Painkiller_Mercy", INTMAX);
			TakeInventory("Painkiller_LastBreath", INTMAX);
			TakeInventory("Painkiller_HealthStealer", INTMAX);
			TakeInventory("Painkiller_HealthRegeneration", INTMAX);
			TakeInventory("Painkiller_ArmorRegeneration", INTMAX);
			TakeInventory("Painkiller_Fear", INTMAX);
			TakeInventory("Painkiller_666Ammo", INTMAX);
			TakeInventory("Painkiller_Speed", INTMAX);
			TakeInventory("Painkiller_Dexterity", INTMAX);
			TakeInventory("Painkiller_Fury", INTMAX);
			TakeInventory("Painkiller_Rage", INTMAX);
			TakeInventory("Painkiller_Confusion", INTMAX);
			TakeInventory("Painkiller_Endurance", INTMAX);
			TakeInventory("Painkiller_IronWill", INTMAX);
			TakeInventory("Painkiller_Haste", INTMAX);
			TakeInventory("Painkiller_DoubleHaste", INTMAX);
			TakeInventory("Painkiller_TripleHaste", INTMAX);
			TakeInventory("Painkiller_TimeBonus", INTMAX);
			TakeInventory("Painkiller_DoubleTimeBonus", INTMAX);
			TakeInventory("Painkiller_WeaponModifier", INTMAX);
			TakeInventory("Painkiller_MagicGun", INTMAX);
			TakeInventory("Painkiller_TheSceptre", INTMAX);
			TakeInventory("Painkiller_DemonMorphCard", INTMAX);
			TakeInventory("Painkiller_Rebirth", INTMAX);
			TakeInventory("Painkiller_Stakegun", INTMAX);
			TakeInventory("Painkiller_Shotgun", INTMAX);
			TakeInventory("Painkiller_Boltgun", INTMAX);
			TakeInventory("Painkiller_Rifle", INTMAX);
			TakeInventory("Painkiller_RocketLauncher", INTMAX);
			TakeInventory("Painkiller_Electrodriver", INTMAX);
			TakeInventory("Painkiller_GoldAmount", 999999);
			TakeInventory("Clip", 50);

			GiveInventory("Shell", 20);
			GiveInventory("Cell", 25);
			GiveInventory("Painkiller_Painkiller", 1);
			GiveInventory("PainkillerClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Painkiller_Painkiller");
			break;
		case 29:
			TakeInventory("UDPistolUpgrade", INTMAX);
			TakeInventory("UnrealDoUpgradeRevert", INTMAX);
			TakeInventory("UnrealRevertDirection", INTMAX);
			TakeInventory("UDPistolUpgradePreferred", INTMAX);
			TakeInventory("Unreal_RazorJack", INTMAX);
			TakeInventory("Unreal_ASMDShockRifle", INTMAX);
			TakeInventory("Unreal_FlakCannon", INTMAX);
			TakeInventory("Unreal_Stinger", INTMAX);
			TakeInventory("Unreal_EightBall", INTMAX);
			TakeInventory("Unreal_Minigun", INTMAX);
			TakeInventory("Unreal_Redeemer", INTMAX);
			TakeInventory("Unreal_QuadShot", INTMAX);
			TakeInventory("Unreal_GESBioRifle", INTMAX);
			TakeInventory("Unreal_Rifle", INTMAX);
			TakeInventory("Unreal_Duster", INTMAX);

			GiveInventory("Unreal_DispersionPistol", 1);
			GiveInventory("Unreal_AutoMag", 1);
			GiveInventory("DPistolAmmo", 60);
			GiveInventory("UnrealAutomagClip", 20);
			GiveInventory("UnrealClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Unreal_AutoMag");
			break;
		case 30:
			TakeInventory("RTCW_LugerSilencerAttached", INTMAX);
			TakeInventory("RTCW_Grenade", INTMAX);
			TakeInventory("RTCW_MP40", INTMAX);
			TakeInventory("RTCW_Mauser", INTMAX);
			TakeInventory("RTCW_FG42", INTMAX);
			TakeInventory("RTCW_StG44", INTMAX);
			TakeInventory("RTCW_Panzerfaust", INTMAX);
			TakeInventory("RTCW_K43", INTMAX);
			SetInventory("RTCW_K43GrenadeModeSelected", 0);
			SetInventory("RTCW_M1GarandGrenadeModeSelected", 0);
			TakeInventory("RTCW_Venom", INTMAX);
			TakeInventory("RTCW_MG42", INTMAX);
			TakeInventory("RTCW_TeslaGun", INTMAX);
			TakeInventory("RTCW_Flamethrower", INTMAX);
			TakeInventory("RTCW_Sten", INTMAX);
			TakeInventory("RTCW_Winchester", INTMAX);
			TakeInventory("RTCW_HasAlliedCrate", INTMAX);
			TakeInventory("RTCW_Colt", INTMAX);
			TakeInventory("RTCW_ColtDualWield", INTMAX);
			SetInventory("RTCW_ColtFiredLeft", 0);
			SetInventory("SamsaraRTCWColtDualFireState", 0);
			TakeInventory("RTCW_Pineapple", INTMAX);
			TakeInventory("RTCW_Thompson", INTMAX);
			TakeInventory("RTCW_Snooper", INTMAX);
			TakeInventory("RTCW_BAR", INTMAX);
			TakeInventory("RTCW_M1Garand", INTMAX);
			TakeInventory("RTCW_Browning", INTMAX);

			GiveInventory("RTCW_Knife", 1);
			GiveInventory("RTCW_Luger", 1);
			GiveInventory("RTCW_LugerMagazine", 8);
			GiveInventory("RTCW_MP40Magazine", 32);
			GiveInventory("RTCW_MauserMagazine", 10);
			GiveInventory("RTCW_FG42Magazine", 20);
			GiveInventory("RTCW_StG44Magazine", 30);
			GiveInventory("RTCW_PanzerfaustMagazine", 1);
			GiveInventory("RTCW_K43Magazine", 10);
			GiveInventory("RTCW_K43Grenade", 1);
			GiveInventory("RTCW_VenomMagazine", 500);
			GiveInventory("RTCW_MG42Magazine", 150);
			GiveInventory("RTCW_StenMagazine", 32);
			GiveInventory("RTCW_ShotgunMagazine", 6);
			GiveInventory("RTCW_ColtMagazine", 8);
			GiveInventory("RTCW_ColtMagazine2", 8);
			GiveInventory("RTCW_ThompsonMagazine", 30);
			GiveInventory("RTCW_SnooperMagazine", 5);
			GiveInventory("RTCW_BARMagazine", 20);
			GiveInventory("RTCW_M1GarandMagazine", 8);
			GiveInventory("RTCW_M1GarandGrenade", 1);
			GiveInventory("RTCW_BrowningMagazine", 150);
			GiveInventory("RTCWClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("RTCW_Luger");
			break;
		case 31:
			SetInventory("SamsaraQuake3MachinegunFireAnim", 0);
			SetInventory("SamsaraQuake3MachinegunFiredOnce", 0);
			TakeInventory("Q3GrenadeLauncher", INTMAX);
			TakeInventory("Q3Shotgun", INTMAX);
			TakeInventory("Q3Nailgun", INTMAX);
			TakeInventory("Q3LightningGun", INTMAX);
			TakeInventory("Q3LightningGunConsumeAmmo", INTMAX);
			TakeInventory("Q3HeavyMachineGun", INTMAX);
			TakeInventory("SamsaraQuake3HeavyMachinegunSkipFlash", INTMAX);
			TakeInventory("Q3RocketLauncher", INTMAX);
			TakeInventory("Q3Plasmagun", INTMAX);
			SetInventory("SamsaraQuake3PlasmaGunFireAnim", 0);
			TakeInventory("Q3BFG10K", INTMAX);
			TakeInventory("Q3Chaingun", INTMAX);
			TakeInventory("Q3ChaingunConsumeAmmo", INTMAX);
			TakeInventory("Q3Railgun", INTMAX);
			TakeInventory("Q3ProximityLauncher", INTMAX);
			TakeInventory("Q3GrenadeLauncherAmmo", INTMAX);
			TakeInventory("Q3ChaingunAmmo", INTMAX);

			GiveInventory("Q3Gauntlet", 1);
			GiveInventory("Q3Machinegun", 1);
			GiveInventory("Q3Class", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("Q3Machinegun");
			break;
		case 32:
			TakeInventory("DescentSuperLaser", INTMAX);
			TakeInventory("DescentQuadLaser", INTMAX);
			TakeInventory("DescentSmartMissile", INTMAX);
			TakeInventory("DescentVulcan", INTMAX);
            SetInventory("SamsaraDescentVulcanFiredCount", 0);
			TakeInventory("DescentConcussionMissile", INTMAX);
			TakeInventory("DescentGauss", INTMAX);
			TakeInventory("DescentHomingMissile", INTMAX);
			TakeInventory("DescentSpreadFire", INTMAX);
			TakeInventory("DescentGuidedMissile", INTMAX);
			TakeInventory("DescentFusion", INTMAX);
            SetInventory("SamsaraDescentFusionSoundChannelCount", 0);
			TakeInventory("DescentMegaMissile", INTMAX);
			TakeInventory("DescentHelix", INTMAX);
            SetInventory("DescentHelixRotation", 0);
			TakeInventory("DescentMercuryMissile", INTMAX);
			TakeInventory("DescentOmega", INTMAX);
            SetInventory("SamsaraDescentOmegaSoundChannelCount", 0);
			TakeInventory("DescentShakerMissile", INTMAX);
			TakeInventory("DescentPlasma", INTMAX);
			TakeInventory("DescentPhoenix", INTMAX);
			TakeInventory("DescentLaserLevel", INTMAX);

			GiveInventory("DescentLaser", 1);
			GiveInventory("DescentWeapon", 1);
			GiveInventory("DescentWeaponPadUp", 1);
			GiveInventory("DescentWeaponPadDown", 1);
			GiveInventory("DescentClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetInventory("DescentPrimaryCounter", 0);
			SetInventory("DescentSecondaryCounter", 0);
            SetInventory("DescentPrimarySwitcher", 0);
            SetInventory("DescentMissileSwitcher", 0);
			SetWeapon("DescentLaser");
			break;
		case 33:
			TakeInventory("DeusEx_MiniCrossbow", INTMAX);
			TakeInventory("DeusEx_Shotgun", INTMAX);
			TakeInventory("DeusEx_AssaultShotgun", INTMAX);
			TakeInventory("DeusEx_AssaultRifle", INTMAX);
			TakeInventory("DeusEx_GEPGun", INTMAX);
			TakeInventory("DeusEx_FlameThrower", INTMAX);
			TakeInventory("DeusEx_MJ12PlasmaRifle", INTMAX);
			TakeInventory("DeusEx_LAW", INTMAX);
			TakeInventory("DeusEx_SniperRifle", INTMAX);
			TakeInventory("DeusEx_NanoSword", INTMAX);
			TakeInventory("DeusEx_StealthPistol", INTMAX);
			TakeInventory("DeusEx_LAM", INTMAX);
			TakeInventory("DeusEx_RiotProd", INTMAX);
			TakeInventory("DeusEx_GEPGunEquipped", INTMAX);
			TakeInventory("DeusEx_FlameThrowerEquipped", INTMAX);
			TakeInventory("DeusEx_PREquipped", INTMAX);
			TakeInventory("DeusEx_LAWEquipped", INTMAX);
			SetInventory("SamsaraDeusExMiniXBowAmmoType", 0);
			SetInventory("SamsaraDeusExShotgunAmmoType", 0);
			SetInventory("SamsaraDeusExAssaultShotgunAmmoType", 0);
			SetInventory("SamsaraDeusExAssaultRifleAmmoType", 0);
			SetInventory("SamsaraDeusExGEPGunAmmoType", 0);
			SetInventory("SamsaraDeusExPlasmaRifleAmmoType", 0);

			TakeInventory("DeusEx_LowTechSkill", 4);
			TakeInventory("DeusEx_PistolSkill", 4);
			TakeInventory("DeusEx_RifleSkill", 4);
			TakeInventory("DeusEx_HeavyWeaponSkill", 4);
			TakeInventory("DeusEx_MedicineSkill", 4);
			TakeInventory("DeusEx_EnviroSkill", 4);
			TakeInventory("DeusEx_PistolPoints", 99999);
			TakeInventory("DeusEx_RiflePoints", 99999);
			TakeInventory("DeusEx_HeavyWeaponPoints", 99999);
			TakeInventory("DeusEx_LowTechPoints", 99999);
			TakeInventory("DeusEx_MedicinePoints", 99999);
			TakeInventory("DeusEx_EnviroPoints", 99999);

			SetAmmoCapacity("DeusEx_GlockMagazine", 6);
			SetAmmoCapacity("DeusEx_MiniXBowMagazine", 8);
			SetAmmoCapacity("DeusEx_ShotgunMagazine", 5);
			SetAmmoCapacity("DeusEx_AssShotgunMagazine", 12);
			SetAmmoCapacity("DeusEx_AssaultGunMagazine", 30);
			SetAmmoCapacity("DeusEx_FlameThrowerMagazine", 100);
			SetAmmoCapacity("DeusEx_PlasmaRifleMagazine", 16);
			SetAmmoCapacity("DeusEx_SniperMagazine", 6);
			SetAmmoCapacity("DeusEx_StealthMagazine", 10);
			GiveInventory("DeusEx_GlockMagazine", 6);
			GiveInventory("DeusEx_MiniXBowMagazine", 8);
			GiveInventory("DeusEx_ShotgunMagazine", 5);
			GiveInventory("DeusEx_AssShotgunMagazine", 12);
			GiveInventory("DeusEx_AssaultGunMagazine", 30);
			GiveInventory("DeusEx_GEPGunMagazine", 1);
			GiveInventory("DeusEx_FlameThrowerMagazine", 100);
			GiveInventory("DeusEx_PlasmaRifleMagazine", 16);
			GiveInventory("DeusEx_SniperMagazine", 6);
			GiveInventory("DeusEx_StealthMagazine", 10);

			SetAmmoCapacity("DeusEx_GlockSpread", 120);
			SetAmmoCapacity("DeusEx_XBowSpread", 40);
			SetAmmoCapacity("DeusEx_SawedOffSpread", 90);
			SetAmmoCapacity("DeusEx_ShotgunSpread", 140);
			SetAmmoCapacity("DeusEx_AssaultGunSpread", 64);
			SetAmmoCapacity("DeusEx_PlasmaRifleSpread", 90);
			SetAmmoCapacity("DeusEx_StealthSpread", 115);
			TakeInventory("DeusEx_GlockSpread", 120);
			TakeInventory("DeusEx_XBowSpread", 40);
			TakeInventory("DeusEx_SawedOffSpread", 90);
			TakeInventory("DeusEx_ShotgunSpread", 140);
			TakeInventory("DeusEx_AssaultGunSpread", 64);
			TakeInventory("DeusEx_PlasmaRifleSpread", 90);
			TakeInventory("DeusEx_StealthSpread", 115);
			
			TakeInventory("DeusEx_Augmentation_CombatStrength", 4);
			TakeInventory("DeusEx_Augmentation_MicrofibralMuscle", 4);
			TakeInventory("DeusEx_Augmentation_SpeedEnhancement", 4);
			TakeInventory("DeusEx_Augmentation_RunSilent", 4);
			TakeInventory("DeusEx_Augmentation_BallisticProtection", 4);
			TakeInventory("DeusEx_Augmentation_EMPShield", 4);
			TakeInventory("DeusEx_Augmentation_Cloak", 4);
			TakeInventory("DeusEx_Augmentation_Repulsor", 4);
			TakeInventory("DeusEx_Augmentation_EnergyShield", 4);
			TakeInventory("DeusEx_Augmentation_EnvironmentalResistance", 4);
			TakeInventory("DeusEx_Augmentation_Regeneration", 4);
			TakeInventory("DeusEx_Augmentation_Maintenance", 4);
			TakeInventory("DeusEx_Augmentation_PowerRecirculator", 4);
			TakeInventory("DeusEx_Augmentation_RechargeableBattery", 4);
			TakeInventory("DeusEx_Augmentation_SpyDrone", 4);
			TakeInventory("DeusEx_Augmentation_AggressiveDefenseSystem", 4);
			TakeInventory("DeusEx_Augmentation_VisionEnhancement", 4);
			TakeInventory("DeusEx_Augmentation_Targeting", 4);
			TakeInventory("DeusEx_Augmentation_ArmsSlot",1);
			TakeInventory("DeusEx_Augmentation_LegsSlot",1);
			TakeInventory("DeusEx_Augmentation_Subdermal1Slot",1);
			TakeInventory("DeusEx_Augmentation_Subdermal2Slot",1);
			TakeInventory("DeusEx_Augmentation_Torso1Slot",1);
			TakeInventory("DeusEx_Augmentation_Torso2Slot",1);
			TakeInventory("DeusEx_Augmentation_Torso3Slot",1);
			TakeInventory("DeusEx_Augmentation_CranialSlot",1);
			TakeInventory("DeusEx_Augmentation_EyeSlot",1);
			
			GiveInventory("DeusEx_Augmentation_InfoLink",1);
			GiveInventory("DeusEx_Augmentation_IFF",1);
			GiveInventory("DeusEx_Augmentation_Light",1);

			GiveInventory("DeusEx_CombatKnife", 1);
			GiveInventory("DeusEx_10mmPistol", 1);
			GiveInventory("DeusExClass", 1);
			GiveInventory("IsSamsaraClass", 1);
			SetWeapon("DeusEx_10mmPistol");
			break;
	}
}

Script "Samsara_FillInventory" (void)
{
	int a, b;
	int pClass = PlayerClass(PlayerNumber());
	str weapon, ammo1, ammo2;
	for(a = 0; a < SLOTCOUNT; a++)
	{
		weapon = ClassWeapons[pClass][a][0];
		ammo1 = ClassWeapons[pClass][a][1];
		ammo2 = ClassWeapons[pClass][a][2];
		if(strlen(weapon) > 0) { for(b = 0; b < 256; b++) { GiveInventory(weapon,1); } }
		if(strlen(ammo1) > 0) { for(b = 0; b < 1024; b++) { GiveInventory(ammo1,1); } }
		if(strlen(ammo2) > 0) { for(b = 0; b < 1024; b++) { GiveInventory(ammo2,1); } }
	}
	for(a = 0; a < UNIQUECOUNT; a++)
	{
		weapon = ClassUniques[pClass][a*2];
		ammo1 = ClassUniques[pClass][(a*2)+1];
		if(strlen(weapon) > 0) { for(b = 0; b < 256; b++) { GiveInventory(weapon,1); } }
		if(strlen(ammo1) > 0) { for(b = 0; b < 1024; b++) { GiveInventory(ammo1,1); } }
	}

	SetInventory("SigilInventoryWeapon1",0);
	SetInventory("SigilInventoryWeapon2",0);
	SetInventory("SigilInventoryWeapon3",0);
	SetInventory("SigilInventoryWeapon4",0);
	SetInventory("SigilInventoryWeapon5",0);

	switch(pClass)
	{
		default: break;
		case 0:
			GiveInventory("SamsaraDoom64UnmakerArtifact",3);
			GiveInventory("DGStrHasAutoShotgun",1);
			GiveInventory("DGHasChaingun",1);
			GiveInventory("DGStrHasFlamethrower",1);
			GiveInventory("DGHasMinigun",1);
			GiveInventory("DGHasRocketLauncher",1);
			GiveInventory("DGStrHasLandMines",1);
			GiveInventory("DGHasGrenadeLauncher",1);
			GiveInventory("DGHasPlasmaRifle",1);
			GiveInventory("DGStrHasStunnerRifle",1);
			GiveInventory("DGHasRailGun",1);
			GiveInventory("DGHasBFG9000",1);
			GiveInventory("Doom64_IHaveUnmaker",1);
			GiveInventory("DGStrHasPyroCannon",1);
			GiveInventory("DGHasBFG10K",1);
			GiveInventory("DGStrHasHomingRocketLauncher",1);
			GiveInventory("DGStrHasPlasmaRepeater",1);
			GiveInventory("DGStrHasWPK",3);
			break;
		case 2:
			GiveInventory("PortQuartzFlask",16);
			GiveInventory("PortSuperHealth",5);
			GiveInventory("PortTorch",16);
			GiveInventory("PortGhostly",16);
			GiveInventory("PortRingInvuln",16);
			GiveInventory("CorvusMegasphere",16);
			TakeInventory("TomeOfPowerCooldown",65536);
			TakeInventory("LesserTomeCooldown",65536);
			break;
		case 3:
			GiveInventory("TotenkopfSecretCounter",30);
			GiveInventory("Wolfen_IHaveSlot2",1);
			GiveInventory("Totenkopf_IHaveDualPistols",1);
			GiveInventory("Totenkopf_IHaveDualMP40s",1);
			GiveInventory("Totenkopf_IHaveMauser",1);
			GiveInventory("Totenkopf_IHaveDualMausers",1);
			GiveInventory("Totenkopf_IHaveSTG44",1);
			GiveInventory("Totenkopf_IHaveFlameThrower",1);
			GiveInventory("Totenkopf_IHaveMG42",1);
			GiveInventory("Totenkopf_IHaveScope",1);
			break;
		case 4:
			GiveInventory("AllyCellphone",1);
			TakeInventory("FlechetteCooldown",65536);
			TakeInventory("DiscOfRepulsionCooldown",65536);
			GiveInventory("PortQuartzFlask2",16);
			GiveInventory("PortSuperHealth2",5);
			GiveInventory("PortKraterOfMight",3);
			GiveInventory("PortTorch2",16);
			GiveInventory("PortIconDefender",16);
			break;
		case 5:
			GiveInventory("DukePortNivi", 1);
			GiveInventory("DukeVisionFuel", 100);
			GiveInventory("ItemHoloDuke", 3);
			GiveInventory("DukeHasShrinker", 999);
			GiveInventory("DukeHasExpander", 999);
			break;
		case 6:
			GiveInventory("CanDualPistols",1);
			GiveInventory("CanDualShotties",1);
			break;
		case 7:
			SetInventory("QuakeQuadTimer", 0);
			SetInventory("SamsaraQuadDamageCooldownDisplay", 0);
			GiveInventory("QuadDamageItem", 1);
			if(!isLMS()) { GiveQuad(1050); }
			break;
		case 8:
			GiveInventory("AllyCellphone",1);
			break;
		case 10:
			GiveInventory("BeastVision",1);
			TakeInventory("ThrowPower",65536);
			TakeInventory("ThrowPowerBig",65536);
			break;
		case 11:
			TakeInventory("StrifeGrenadeLauncher2",1);
			GiveInventory("StrifeSigilPiece",5);
			GiveInventory("StrifeSigilPiecePreferred",5);
			GiveInventory("StrifePortMedikit",15);
			GiveInventory("StrifeStimpack2",15);
			GiveInventory("StrifeSurgeryKit2",5);
			GiveInventory("PortShadowArmor",2);
			//GiveInventory("PortEnviSuit",5);
			break;
		case 12:
			GiveInventory("AllyCellphone",1);
			break;
		case 16:
			GiveInventory("AllyCellphone",1);
			GiveInventory("Medtube",20);
			GiveInventory("IPOGReversoPill",1);
			break;
		case 17:
			TakeInventory("DisruptorEnergyBall", INTMAX);
			GiveInventory("DisruptorTeraBall",1);
			break;
		case 18:
			GiveInventory("WTHealthPhial",10);
			GiveInventory("WTInvisibilityPhial",10);
			GiveInventory("WTFireProofPhial",10);
			GiveInventory("WTStrengthPhial",10);
			GiveInventory("WTExperience",60000);
			break;
		case 19:
			GiveInventory("flashlightammo",4200);
			break;
		case 20:
			GiveInventory("SWNuke",1);
			GiveInventory("SuperHealth",1);
			GiveInventory("HeatSeekerCharge", 5);
			GiveInventory("HeatSeekingCard", 2);
			GiveInventory("SWGasGrenade", 5);
			GiveInventory("UziAmountCheck", 1);
			break;
		case 21:
			GiveInventory("CybermageMedkit",15);
			break;
		case 22:
			GiveInventory("EyeOfSiaItem_EX",3);
			GiveInventory("DivineScarab_Ex",2);
			GiveInventory("LighterofGumercindo_EX",6);
			break;
		case 23:
			GiveInventory("RRCowPie",6);
			GiveInventory("RRBubbaBeer",6);
			GiveInventory("RRCheapasswhiskey",100);
			GiveInventory("AllyCellphone",1);
			break;
		case 24:
			GiveInventory("Q2QuadDamage",1);
			GiveInventory("Q2DualFireDamage",2);
			GiveInventory("Q2DoubleDamage",2);
			GiveInventory("Q2Invulnerability",2);
			GiveInventory("Q2Silencer",2);
			break;
		case 25:
			GiveInventory("PortQuartzFlask3",16);
			GiveInventory("PortGhostly2",16);
			GiveInventory("PortTorch3",16);
			GiveInventory("PortIconDefender2",16);
			GiveInventory("PortSuperHealth3",5);
			GiveInventory("PortSuperHealth3",5);
			GiveInventory("PortKraterOfMight2",3);
			GiveInventory("Hexen2Experience",17343000);
			break;
		case 26:
			GiveInventory("Goldeneye_ThrowingKnivesDualToken",1);
			GiveInventory("Goldeneye_PP7DualToken",1);
			GiveInventory("Goldeneye_KF7DualToken",1);
			GiveInventory("Goldeneye_AutoShotgunDualToken",1);
			GiveInventory("Goldeneye_AR33DualToken",1);
			GiveInventory("Goldeneye_RocketLauncherDualToken",1);
			GiveInventory("Goldeneye_RCP90DualToken",1);
			GiveInventory("Goldeneye_LaserDualToken",1);
			GiveInventory("Goldeneye_GoldenGunDualToken",1);
			GiveInventory("Goldeneye_SniperDualToken",1);
			GiveInventory("Goldeneye_D5KDualToken",1);
			GiveInventory("SamsaraGoldenEyePermanentTankCannon", 1);
			GiveInventory("AllyCellphone",1);
			break;
		case 27:
			GiveInventory("Catacomb_SmallHealthPotion",99);
			GiveInventory("Catacomb_LargeHealthPotion",99);
			GiveInventory("Catacomb_Hourglass",1);
			TakeInventory("Catacomb_HourglassCooldown",180);
			break;
		case 28:
			GiveInventory("Painkiller_GoldAmount", 999999);
			break;
		case 29:
            if (CheckInventory("UDPistolUpgrade") < 4)
            {
                SetInventory("UDPistolUpgrade", 4);
				SetInventory("UDPistolUpgradePreferred", 4);
                GiveInventory("UnrealRevertDirection", 1);
            }
            break;
		case 32:
			PlaySound(0,"Descent/Cheater",CHAN_VOICE,1.0);
			GiveInventory("DescentQuadLaser", 1);
			GiveInventory("DescentLaserLevel", 5);
			if(CheckInventory("DescentPrimaryCounter")==0)
				GiveInventory("DescentPrimaryCounter",1);
			break;
		case 33:
			GiveInventory("DeusEx_LowTechSkill", 4);
			GiveInventory("DeusEx_PistolSkill", 4);
			GiveInventory("DeusEx_RifleSkill", 4);
			GiveInventory("DeusEx_HeavyWeaponSkill", 4);
			GiveInventory("DeusEx_MedicineSkill", 4);
			GiveInventory("DeusEx_EnviroSkill", 4);
			SetAmmoCapacity("DeusEx_GlockMagazine", 12);
			SetAmmoCapacity("DeusEx_MiniXBowMagazine", 14);
			SetAmmoCapacity("DeusEx_ShotgunMagazine", 8);
			SetAmmoCapacity("DeusEx_AssShotgunMagazine", 24);
			SetAmmoCapacity("DeusEx_AssaultGunMagazine", 70);
			SetAmmoCapacity("DeusEx_FlameThrowerMagazine", 200);
			SetAmmoCapacity("DeusEx_PlasmaRifleMagazine", 32);
			SetAmmoCapacity("DeusEx_SniperMagazine", 14);
			SetAmmoCapacity("DeusEx_StealthMagazine", 19);
			GiveInventory("DeusEx_GlockMagazine", 12);
			GiveInventory("DeusEx_MiniXBowMagazine", 14);
			GiveInventory("DeusEx_ShotgunMagazine", 8);
			GiveInventory("DeusEx_AssShotgunMagazine", 24);
			GiveInventory("DeusEx_AssaultGunMagazine", 70);
			GiveInventory("DeusEx_FlameThrowerMagazine", 200);
			GiveInventory("DeusEx_PlasmaRifleMagazine", 32);
			GiveInventory("DeusEx_SniperMagazine", 14);
			GiveInventory("DeusEx_StealthMagazine", 19);
			GiveInventory("DeusEx_Augmentation_CombatStrength",4);
			GiveInventory("DeusEx_Augmentation_MicrofibralMuscle",4);
			GiveInventory("DeusEx_Augmentation_SpeedEnhancement",4);
			GiveInventory("DeusEx_Augmentation_RunSilent",4);
			GiveInventory("DeusEx_Augmentation_BallisticProtection",4);
			GiveInventory("DeusEx_Augmentation_EMPShield",4);
			GiveInventory("DeusEx_Augmentation_Cloak",4);
			GiveInventory("DeusEx_Augmentation_Repulsor",4);
			GiveInventory("DeusEx_Augmentation_EnergyShield",4);
			GiveInventory("DeusEx_Augmentation_EnvironmentalResistance",4);
			GiveInventory("DeusEx_Augmentation_Regeneration",4);
			GiveInventory("DeusEx_Augmentation_Maintenance",4);
			GiveInventory("DeusEx_Augmentation_PowerRecirculator",4);
			GiveInventory("DeusEx_Augmentation_RechargeableBattery",4);
			GiveInventory("DeusEx_Augmentation_SpyDrone",4);
			GiveInventory("DeusEx_Augmentation_AggressiveDefenseSystem",4);
			GiveInventory("DeusEx_Augmentation_VisionEnhancement",4);
			GiveInventory("DeusEx_Augmentation_Targeting",4);
			GiveInventory("DeusEx_Augmentation_InfoLink",1);
			GiveInventory("DeusEx_Augmentation_IFF",1);
			GiveInventory("DeusEx_Augmentation_Light",1);
			if(!CheckInventory("DeusEx_Augmentation_ArmsSlot")) GiveInventory("DeusEx_Augmentation_ArmsSlot",1);
			if(!CheckInventory("DeusEx_Augmentation_LegsSlot")) GiveInventory("DeusEx_Augmentation_LegsSlot",1);
			if(!CheckInventory("DeusEx_Augmentation_Subdermal1Slot")) GiveInventory("DeusEx_Augmentation_Subdermal1Slot",1);
			if(!CheckInventory("DeusEx_Augmentation_Subdermal2Slot")) GiveInventory("DeusEx_Augmentation_Subdermal2Slot",1);
			if(!CheckInventory("DeusEx_Augmentation_Torso1Slot")) GiveInventory("DeusEx_Augmentation_Torso1Slot",1);
			if(!CheckInventory("DeusEx_Augmentation_Torso2Slot")) GiveInventory("DeusEx_Augmentation_Torso2Slot",1);
			if(!CheckInventory("DeusEx_Augmentation_Torso3Slot")) GiveInventory("DeusEx_Augmentation_Torso3Slot",1);
			if(!CheckInventory("DeusEx_Augmentation_CranialSlot")) GiveInventory("DeusEx_Augmentation_CranialSlot",1);
			if(!CheckInventory("DeusEx_Augmentation_EyeSlot")) GiveInventory("DeusEx_Augmentation_EyeSlot",1);
			SetAmmoCapacity("DeusEx_GlockSpread", 45);
			SetAmmoCapacity("DeusEx_XBowSpread", 25);
			SetAmmoCapacity("DeusEx_SawedOffSpread", 30);
			SetAmmoCapacity("DeusEx_ShotgunSpread", 0);
			SetAmmoCapacity("DeusEx_AssaultGunSpread", 0);
			SetAmmoCapacity("DeusEx_PlasmaRifleSpread", 42);
			SetAmmoCapacity("DeusEx_StealthSpread", 25);
			break;
	}
	GiveInventory("Samsara_ModeWeaponChange",1);
}

//======================================================================================================================
//							Map Inventory - For weapons to advanced for generic pickup code
//======================================================================================================================

Script "Samsara_MapInventory" (int item, int dropped)
{
	int weaponStay = GetCvar("sv_weaponstay");
	int maxDistance = 80;
	int invokerX = GetActorX(0)>>16;
	int invokerY = GetActorY(0)>>16;
	int invokerZ = GetActorZ(0)>>16;
	int inventoryX, inventoryY, inventoryZ, result;

	switch(item)
	{
		default: break;
		case 1:
			if(!CheckInventory("Totenkopf_IHaveMauser"))
			{
				GiveInventory("Totenkopf_MauserPickedUpX",invokerX+65536);
				GiveInventory("Totenkopf_MauserPickedUpY",invokerY+65536);
				GiveInventory("Totenkopf_MauserPickedUpZ",invokerZ+65536);
				GiveInventory("Samsara_ModeWeaponChange",1);
				GiveInventory("Totenkopf_IHaveMauser",1);
				GiveInventory("Clip",5);
				result = 1;
			}
			else if(!CheckInventory("Totenkopf_IHaveDualMausers"))
			{
				inventoryX = CheckInventory("Totenkopf_MauserPickedUpX")-65536;
				inventoryY = CheckInventory("Totenkopf_MauserPickedUpY")-65536;
				inventoryZ = CheckInventory("Totenkopf_MauserPickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("Totenkopf_MauserPickedUpX",131072);
					TakeInventory("Totenkopf_MauserPickedUpY",131072);
					TakeInventory("Totenkopf_MauserPickedUpZ",131072);
					GiveInventory("Totenkopf_MauserPickedUpX",invokerX+65536);
					GiveInventory("Totenkopf_MauserPickedUpY",invokerY+65536);
					GiveInventory("Totenkopf_MauserPickedUpZ",invokerZ+65536);
					GiveInventory("Totenkopf_IHaveDualMausers",1);
					GiveInventory("Samsara_ModeWeaponChange",1);
					GiveInventory("Clip",5);
					result = 1;
				}
			}
			else if(CheckInventory("Clip") < GetAmmoCapacity("Clip")) { if((!weaponStay || dropped)) { GiveInventory("Clip",5); result = 1; }}
			break;
		case 2:
			if(!CheckInventory("Machine Gun"))
			{
				if(CheckInventory("WolfenClassMode") == 2)
				{
					if(dropped)
					{
						GiveInventory("Shell",2);
						result = 1;
					}
					else
					{
						GiveInventory("Shell",5);
						result = 1;
					}
				}
				else
				{
					if(dropped)
					{
						GiveInventory("Clip",10);
						result = 1;
					}
					else
					{
						GiveInventory("Clip",20);
						result = 1;
					}
				}
			}
			else
			{
				if(CheckInventory("WolfenClassMode") == 2)
				{
					if(dropped)
					{
						if(CheckInventory("Shell") < GetAmmoCapacity("Shell")) { if((!weaponStay || dropped)) { GiveInventory("Shell",2); result = 1; }}
					}
					else
					{
						if(CheckInventory("Shell") < GetAmmoCapacity("Shell")) { if((!weaponStay || dropped)) { GiveInventory("Shell",5); result = 1; }}
					}
				}
				else
				{
					if(dropped)
					{
						if(CheckInventory("Clip") < GetAmmoCapacity("Clip")) { if((!weaponStay || dropped)) { GiveInventory("Clip",10); result = 1; }}
					}
					else
					{
						if(CheckInventory("Clip") < GetAmmoCapacity("Clip")) { if((!weaponStay || dropped)) { GiveInventory("Clip",20); result = 1; }}
					}
				}
			}
			break;
		case 3:
			if(!CheckInventory("Totenkopf_IHaveSTG44"))
			{
				GiveInventory("Totenkopf_IHaveSTG44", 1);
				GiveInventory("Samsara_ModeWeaponChange",1);

				if(CheckInventory("WolfenClassMode") == 2)
				{
					if(dropped)
					{
						GiveInventory("Shell",15);
						result = 1;
					}
					else
					{
						GiveInventory("Shell",30);
						result = 1;
					}
				}
				else
				{
					if(dropped)
					{
						GiveInventory("Clip",10);
						result = 1;
					}
					else
					{
						GiveInventory("Clip",20);
						result = 1;
					}
				}
			}
			else
			{
				if(CheckInventory("WolfenClassMode") == 2)
				{
					if(dropped)
					{
						if(CheckInventory("Shell") < GetAmmoCapacity("Shell")) { if((!weaponStay || dropped)) { GiveInventory("Shell",15); result = 1; }}
					}
					else
					{
						if(CheckInventory("Shell") < GetAmmoCapacity("Shell")) { if((!weaponStay || dropped)) { GiveInventory("Shell",30); result = 1; }}
					}
				}
				else
				{
					if(dropped)
					{
						if(CheckInventory("Clip") < GetAmmoCapacity("Clip")) { if((!weaponStay || dropped)) { GiveInventory("Clip",10); result = 1; }}
					}
					else
					{
						if(CheckInventory("Clip") < GetAmmoCapacity("Clip")) { if((!weaponStay || dropped)) { GiveInventory("Clip",20); result = 1; }}
					}
				}
			}
			break;
		case 4:
			if(!CheckInventory("  Chaingun  "))
			{
				GiveInventory("Totenkopf_MP40PickedUpX",invokerX+65536);
				GiveInventory("Totenkopf_MP40PickedUpY",invokerY+65536);
				GiveInventory("Totenkopf_MP40PickedUpZ",invokerZ+65536);
				GiveInventory("Samsara_ModeWeaponChange",1);
				result = 1;
			}
			else if(!CheckInventory("Totenkopf_IHaveDualMP40s"))
			{
				inventoryX = CheckInventory("Totenkopf_MP40PickedUpX")-65536;
				inventoryY = CheckInventory("Totenkopf_MP40PickedUpY")-65536;
				inventoryZ = CheckInventory("Totenkopf_MP40PickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("Totenkopf_MP40PickedUpX",131072);
					TakeInventory("Totenkopf_MP40PickedUpY",131072);
					TakeInventory("Totenkopf_MP40PickedUpZ",131072);
					GiveInventory("Totenkopf_MP40PickedUpX",invokerX+65536);
					GiveInventory("Totenkopf_MP40PickedUpY",invokerY+65536);
					GiveInventory("Totenkopf_MP40PickedUpZ",invokerZ+65536);
					GiveInventory("Totenkopf_IHaveDualMP40s",1);
					GiveInventory("Samsara_ModeWeaponChange",1);
					result = 1;
				}
			}
			break;
		case 5:
			if(!CheckInventory("HornetGun")) { result = 1; }

			if(result == 1)
			{
				ACS_NamedExecuteAlways("HL2685",0,11);
			}
			break;
		case 6:
			if(!CheckInventory("Assault Shotgun")) { result = 1; }

			if(result == 1)
			{
				ACS_NamedExecuteAlways("HL2685",0,13);
			}
			break;
		case 7:
			if(!CheckInventory(".357 Python")) { GiveInventory("HLDeagleCounter",7); result = 1; }

			if(result == 1)
			{
				ACS_NamedExecuteAlways("HL2685",0,12);
			}
			break;
		case 8:
			if(!CheckInventory("MP5")) { result = 1; }

			if(result == 1)
			{
				ACS_NamedExecuteAlways("HL2685",0,14);
			}
			if(random(0,2)==0) GiveInventory("RocketAmmo",3);
			break;
		case 9:
			if(!CheckInventory(" RPG ")) { GiveInventory("HLSporeCounter",10); result = 1; }

			if(result == 1)
			{
				ACS_NamedExecuteAlways("HL2685",0,15);
			}
			break;
		case 10:
			if(!CheckInventory("Gauss Cannon")) { result = 1; }

			if(result == 1)
			{
				ACS_NamedExecuteAlways("HL2685",0,16);
			}
			break;
		case 11:
			if(!CheckInventory("E.G.O.N.")) { result = 1; }

			if(result == 1)
			{
				ACS_NamedExecuteAlways("HL2685",0,17);
			}
			break;
		case 12:
			if(!CheckInventory("Goldeneye_ThrowingKnives"))
			{
				GiveInventory("Goldeneye_KnifePickedUpX",invokerX+65536);
				GiveInventory("Goldeneye_KnifePickedUpY",invokerY+65536);
				GiveInventory("Goldeneye_KnifePickedUpZ",invokerZ+65536);
				result = 1;
			}
			else if(!CheckInventory("Goldeneye_ThrowingKnivesDualToken"))
			{
				inventoryX = CheckInventory("Goldeneye_KnifePickedUpX")-65536;
				inventoryY = CheckInventory("Goldeneye_KnifePickedUpY")-65536;
				inventoryZ = CheckInventory("Goldeneye_KnifePickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("Goldeneye_KnifePickedUpX",131072);
					TakeInventory("Goldeneye_KnifePickedUpY",131072);
					TakeInventory("Goldeneye_KnifePickedUpZ",131072);
					GiveInventory("Goldeneye_KnifePickedUpX",invokerX+65536);
					GiveInventory("Goldeneye_KnifePickedUpY",invokerY+65536);
					GiveInventory("Goldeneye_KnifePickedUpZ",invokerZ+65536);
					GiveInventory("Goldeneye_ThrowingKnivesDualToken",1);
					result = 1;
				}
			}
			break;
		case 13:
			if(!CheckInventory("Goldeneye_KF7Soviet"))
			{
				GiveInventory("Goldeneye_KF7SovietPickedUpX",invokerX+65536);
				GiveInventory("Goldeneye_KF7SovietPickedUpY",invokerY+65536);
				GiveInventory("Goldeneye_KF7SovietPickedUpZ",invokerZ+65536);
				result = 1;
			}
			else if(!CheckInventory("Goldeneye_KF7DualToken"))
			{
				inventoryX = CheckInventory("Goldeneye_KF7SovietPickedUpX")-65536;
				inventoryY = CheckInventory("Goldeneye_KF7SovietPickedUpY")-65536;
				inventoryZ = CheckInventory("Goldeneye_KF7SovietPickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("Goldeneye_KF7SovietPickedUpX",131072);
					TakeInventory("Goldeneye_KF7SovietPickedUpY",131072);
					TakeInventory("Goldeneye_KF7SovietPickedUpZ",131072);
					GiveInventory("Goldeneye_KF7SovietPickedUpX",invokerX+65536);
					GiveInventory("Goldeneye_KF7SovietPickedUpY",invokerY+65536);
					GiveInventory("Goldeneye_KF7SovietPickedUpZ",invokerZ+65536);
					GiveInventory("Goldeneye_KF7DualToken",1);
					result = 1;
				}
			}
			break;
		case 14:
			if(!CheckInventory("Goldeneye_AutoShotgun"))
			{
				GiveInventory("Goldeneye_AutoShotgunPickedUpX",invokerX+65536);
				GiveInventory("Goldeneye_AutoShotgunPickedUpY",invokerY+65536);
				GiveInventory("Goldeneye_AutoShotgunPickedUpZ",invokerZ+65536);
				result = 1;
			}
			else if(!CheckInventory("Goldeneye_AutoShotgunDualToken"))
			{
				inventoryX = CheckInventory("Goldeneye_AutoShotgunPickedUpX")-65536;
				inventoryY = CheckInventory("Goldeneye_AutoShotgunPickedUpY")-65536;
				inventoryZ = CheckInventory("Goldeneye_AutoShotgunPickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("Goldeneye_AutoShotgunPickedUpX",131072);
					TakeInventory("Goldeneye_AutoShotgunPickedUpY",131072);
					TakeInventory("Goldeneye_AutoShotgunPickedUpZ",131072);
					GiveInventory("Goldeneye_AutoShotgunPickedUpX",invokerX+65536);
					GiveInventory("Goldeneye_AutoShotgunPickedUpY",invokerY+65536);
					GiveInventory("Goldeneye_AutoShotgunPickedUpZ",invokerZ+65536);
					GiveInventory("Goldeneye_AutoShotgunDualToken",1);
					result = 1;
				}
			}
			break;
		case 15:
			if(!CheckInventory("Goldeneye_AR33"))
			{
				GiveInventory("Goldeneye_AR33PickedUpX",invokerX+65536);
				GiveInventory("Goldeneye_AR33PickedUpY",invokerY+65536);
				GiveInventory("Goldeneye_AR33PickedUpZ",invokerZ+65536);
				result = 1;
			}
			else if(!CheckInventory("Goldeneye_AR33DualToken"))
			{
				inventoryX = CheckInventory("Goldeneye_AR33PickedUpX")-65536;
				inventoryY = CheckInventory("Goldeneye_AR33PickedUpY")-65536;
				inventoryZ = CheckInventory("Goldeneye_AR33PickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("Goldeneye_AR33PickedUpX",131072);
					TakeInventory("Goldeneye_AR33PickedUpY",131072);
					TakeInventory("Goldeneye_AR33PickedUpZ",131072);
					GiveInventory("Goldeneye_AR33PickedUpX",invokerX+65536);
					GiveInventory("Goldeneye_AR33PickedUpY",invokerY+65536);
					GiveInventory("Goldeneye_AR33PickedUpZ",invokerZ+65536);
					GiveInventory("Goldeneye_AR33DualToken",1);
					result = 1;
				}
			}
			break;
		case 16:
			if(!CheckInventory("Goldeneye_RocketLauncher"))
			{
				GiveInventory("Goldeneye_RocketLauncherPickedUpX",invokerX+65536);
				GiveInventory("Goldeneye_RocketLauncherPickedUpY",invokerY+65536);
				GiveInventory("Goldeneye_RocketLauncherPickedUpZ",invokerZ+65536);
				result = 1;
			}
			else if(!CheckInventory("Goldeneye_RocketLauncherDualToken"))
			{
				inventoryX = CheckInventory("Goldeneye_RocketLauncherPickedUpX")-65536;
				inventoryY = CheckInventory("Goldeneye_RocketLauncherPickedUpY")-65536;
				inventoryZ = CheckInventory("Goldeneye_RocketLauncherPickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("Goldeneye_RocketLauncherPickedUpX",131072);
					TakeInventory("Goldeneye_RocketLauncherPickedUpY",131072);
					TakeInventory("Goldeneye_RocketLauncherPickedUpZ",131072);
					GiveInventory("Goldeneye_RocketLauncherPickedUpX",invokerX+65536);
					GiveInventory("Goldeneye_RocketLauncherPickedUpY",invokerY+65536);
					GiveInventory("Goldeneye_RocketLauncherPickedUpZ",invokerZ+65536);
					GiveInventory("Goldeneye_RocketLauncherDualToken",1);
					result = 1;
				}
			}
			break;
		case 17:
			if(!CheckInventory("Goldeneye_RCP90"))
			{
				GiveInventory("Goldeneye_RCP90PickedUpX",invokerX+65536);
				GiveInventory("Goldeneye_RCP90PickedUpY",invokerY+65536);
				GiveInventory("Goldeneye_RCP90PickedUpZ",invokerZ+65536);
				result = 1;
			}
			else if(!CheckInventory("Goldeneye_RCP90DualToken"))
			{
				inventoryX = CheckInventory("Goldeneye_RCP90PickedUpX")-65536;
				inventoryY = CheckInventory("Goldeneye_RCP90PickedUpY")-65536;
				inventoryZ = CheckInventory("Goldeneye_RCP90PickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("Goldeneye_RCP90PickedUpX",131072);
					TakeInventory("Goldeneye_RCP90PickedUpY",131072);
					TakeInventory("Goldeneye_RCP90PickedUpZ",131072);
					GiveInventory("Goldeneye_RCP90PickedUpX",invokerX+65536);
					GiveInventory("Goldeneye_RCP90PickedUpY",invokerY+65536);
					GiveInventory("Goldeneye_RCP90PickedUpZ",invokerZ+65536);
					GiveInventory("Goldeneye_RCP90DualToken",1);
					result = 1;
				}
			}
			break;
		case 18:
			if(!CheckInventory("Goldeneye_Moonraker"))
			{
				GiveInventory("Goldeneye_LaserPickedUpX",invokerX+65536);
				GiveInventory("Goldeneye_LaserPickedUpY",invokerY+65536);
				GiveInventory("Goldeneye_LaserPickedUpZ",invokerZ+65536);
				GiveInventory("Goldeneye_GoldenGunRounds",3);
				result = 1;
			}
			else if(!CheckInventory("Goldeneye_LaserDualToken"))
			{
				inventoryX = CheckInventory("Goldeneye_LaserPickedUpX")-65536;
				inventoryY = CheckInventory("Goldeneye_LaserPickedUpY")-65536;
				inventoryZ = CheckInventory("Goldeneye_LaserPickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("Goldeneye_LaserPickedUpX",131072);
					TakeInventory("Goldeneye_LaserPickedUpY",131072);
					TakeInventory("Goldeneye_LaserPickedUpZ",131072);
					GiveInventory("Goldeneye_LaserPickedUpX",invokerX+65536);
					GiveInventory("Goldeneye_LaserPickedUpY",invokerY+65536);
					GiveInventory("Goldeneye_LaserPickedUpZ",invokerZ+65536);
					GiveInventory("Goldeneye_LaserDualToken",1);
					GiveInventory("Goldeneye_GoldenGunDualToken",1);
					GiveInventory("Goldeneye_GoldenGunRounds",3);
					result = 1;
				}
			}
            else if (CheckInventory("Goldeneye_GoldenGunRounds") < GetAmmoCapacity("Goldeneye_GoldenGunRounds") && CheckInventory("SamsaraExtraWeaponsAreEnabled"))
            {
                weaponStay = GetCVar("samsara_permault");

                if (!weaponStay || dropped)
                {
                    GiveInventory("Goldeneye_GoldenGunRounds", 3);
                    result = 1;
                }
            }
            break;
		case 19: GiveInventory("CanDualPistols",1); break;
		case 20:
			if(!CheckInventory("WSTE-M5 Combat Shotgun"))
			{
				GiveInventory("MarathonShotgunPickedUpX",invokerX+65536);
				GiveInventory("MarathonShotgunPickedUpY",invokerY+65536);
				GiveInventory("MarathonShotgunPickedUpZ",invokerZ+65536);
				result = 1;
			}
			else if(!CheckInventory("CanDualShotties"))
			{
				inventoryX = CheckInventory("MarathonShotgunPickedUpX")-65536;
				inventoryY = CheckInventory("MarathonShotgunPickedUpY")-65536;
				inventoryZ = CheckInventory("MarathonShotgunPickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("MarathonShotgunPickedUpX",131072);
					TakeInventory("MarathonShotgunPickedUpY",131072);
					TakeInventory("MarathonShotgunPickedUpZ",131072);
					GiveInventory("MarathonShotgunPickedUpX",invokerX+65536);
					GiveInventory("MarathonShotgunPickedUpY",invokerY+65536);
					GiveInventory("MarathonShotgunPickedUpZ",invokerZ+65536);
					GiveInventory("CanDualShotties",1);
					result = 1;
				}
			}
			break;
		case 21:
			if(!CheckInventory("SWUzi"))
			{
				GiveInventory("SWUziPickedUpX",invokerX+65536);
				GiveInventory("SWUziPickedUpY",invokerY+65536);
				GiveInventory("SWUziPickedUpZ",invokerZ+65536);
				result = 1;
			}
			else if(!CheckInventory("UziAmountCheck"))
			{
				inventoryX = CheckInventory("SWUziPickedUpX")-65536;
				inventoryY = CheckInventory("SWUziPickedUpY")-65536;
				inventoryZ = CheckInventory("SWUziPickedUpZ")-65536;
				if((abs(invokerX - inventoryX) > maxDistance || abs(invokerY - inventoryY) > maxDistance || abs(invokerZ - inventoryZ) > maxDistance) || dropped)
				{
					TakeInventory("SWUziPickedUpX",131072);
					TakeInventory("SWUziPickedUpY",131072);
					TakeInventory("SWUziPickedUpZ",131072);
					GiveInventory("SWUziPickedUpX",invokerX+65536);
					GiveInventory("SWUziPickedUpY",invokerY+65536);
					GiveInventory("SWUziPickedUpZ",invokerZ+65536);
					GiveInventory("UziAmountCheck",1);
					result = 1;
				}
			}
			break;
		case 23:
			if (GetCvar("samsara_permaquad") == 1)
			{
				if(CheckInventory("QuakeQuadTimer") <= 0)
				{
					if (isLMS())
					{
						GiveInventory("QuadDamageItem", 1);
					}
					else
					{
						GiveQuad(1050);
						GiveInventory("QuadDamageItem", 1);
					}

					result = 1;
				}
			}
			else
			{
				GiveQuad(1050);
				result = 1;
			}
			break;
		case 24:
            if (CheckInventory("SamsaraExtraWeaponsAreEnabled"))
            {
                if (!CheckInventory(" RMR Plasma Cannon "))
                {
                    GiveInventory("Cell", 24);
                    result = 1;
                } else if (CheckInventory("Cell") < GetAmmoCapacity("Cell")) { // turns out dropped does SetAmmoCapacity stuff darn
                    weaponStay = GetCVar("samsara_permault");

                    if (!weaponStay || dropped)
                    {
                        GiveInventory("Cell", 24);
                        result = 1;
                    }
                }
            }
            break;
		case 25:
			if(!CheckInventory("GotNuke"))
			{
				GiveInventory("GotNuke", 1);
				result = 1;
			}
			break;
		case 26:
			GiveInventory("DGHasChaingun", 1);
			GiveInventory("DGStrHasFlamethrower", 1);

			if(!CheckInventory(" Chaingun "))
			{
				if(dropped)
				{
					GiveInventory("Samsara_ModeWeaponChange",1);
					GiveInventory("Clip",10);
					GiveInventory("DoomguyStrGas",24);
					result = 1;
				}
				else
				{
					GiveInventory("Samsara_ModeWeaponChange",1);
					GiveInventory("Clip",20);
					GiveInventory("DoomguyStrGas",48);
					result = 1;
				}
			}
			else
			{
				if(CheckInventory("DoomClassMode") == 2 && CheckInventory("SamsaraExtraWeaponsAreEnabled"))
				{
					if(dropped)
					{
						if(CheckInventory("DoomguyStrGas") < GetAmmoCapacity("DoomguyStrGas")) { if((!weaponStay || dropped)) { GiveInventory("Clip",10); GiveInventory("DoomguyStrGas",24); result = 1; }}
						else if(CheckInventory("Clip") < GetAmmoCapacity("Clip")) { if((!weaponStay || dropped)) { GiveInventory("Clip",10); GiveInventory("DoomguyStrGas",24); result = 1; }}
					}
					else
					{
						if(CheckInventory("DoomguyStrGas") < GetAmmoCapacity("DoomguyStrGas")) { if((!weaponStay || dropped)) { GiveInventory("Clip",20); GiveInventory("DoomguyStrGas",48); result = 1; }}
						else if(CheckInventory("Clip") < GetAmmoCapacity("Clip")) { if((!weaponStay || dropped)) { GiveInventory("Clip",20); GiveInventory("DoomguyStrGas",48); result = 1; }}
					}
				}
				else
				{
					if(dropped)
					{
						if(CheckInventory("Clip") < GetAmmoCapacity("Clip")) { if((!weaponStay || dropped)) { GiveInventory("Clip",10); GiveInventory("DoomguyStrGas",24); result = 1; }}
					}
					else
					{
						if(CheckInventory("Clip") < GetAmmoCapacity("Clip")) { if((!weaponStay || dropped)) { GiveInventory("Clip",20); GiveInventory("DoomguyStrGas",48); result = 1; }}
					}
				}
			}
			break;
		case 27:
			GiveInventory("DGHasMinigun", 1);

			if(!CheckInventory(" Minigun "))
			{
				if(dropped)
				{
					GiveInventory("Samsara_ModeWeaponChange",1);
					GiveInventory("Clip",10);
					result = 1;
				}
				else
				{
					GiveInventory("Samsara_ModeWeaponChange",1);
					GiveInventory("Clip",20);
					result = 1;
				}
			}
			else
			{
				if(dropped)
				{
					if(CheckInventory("Clip") < GetAmmoCapacity("Clip")) { if((!weaponStay || dropped)) { GiveInventory("Clip",10); result = 1; }}
				}
				else
				{
					if(CheckInventory("Clip") < GetAmmoCapacity("Clip")) { if((!weaponStay || dropped)) { GiveInventory("Clip",20); result = 1; }}
				}
			}
			break;
		case 28:
			GiveInventory("DGHasRocketLauncher", 1);
			GiveInventory("DGStrHasLandMines", 1);

			if(!CheckInventory("Rocket Launcher"))
			{
				if(dropped)
				{
					GiveInventory("Samsara_ModeWeaponChange",1);
					GiveInventory("RocketAmmo",1);
					GiveInventory("DoomguyStrMines",2);
					result = 1;
				}
				else
				{
					GiveInventory("Samsara_ModeWeaponChange",1);
					GiveInventory("RocketAmmo",2);
					GiveInventory("DoomguyStrMines",5);
					result = 1;
				}
			}
			else
			{
				if(CheckInventory("DoomClassMode") == 2 && CheckInventory("SamsaraExtraWeaponsAreEnabled"))
				{
					if(dropped)
					{
						if(CheckInventory("DoomguyStrMines") < GetAmmoCapacity("DoomguyStrMines")) { if((!weaponStay || dropped)) { GiveInventory("RocketAmmo",1); GiveInventory("DoomguyStrMines",2); result = 1; }}
						else if(CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo")) { if((!weaponStay || dropped)) { GiveInventory("RocketAmmo",1); GiveInventory("DoomguyStrMines",2); result = 1; }}
					}
					else
					{
						if(CheckInventory("DoomguyStrMines") < GetAmmoCapacity("DoomguyStrMines")) { if((!weaponStay || dropped)) { GiveInventory("RocketAmmo",2); GiveInventory("DoomguyStrMines",5); result = 1; }}
						else if(CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo")) { if((!weaponStay || dropped)) { GiveInventory("RocketAmmo",2); GiveInventory("DoomguyStrMines",5); result = 1; }}
					}
				}
				else
				{
					if(dropped)
					{
						if(CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo")) { if((!weaponStay || dropped)) { GiveInventory("RocketAmmo",1); GiveInventory("DoomguyStrMines",2); result = 1; }}
					}
					else
					{
						if(CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo")) { if((!weaponStay || dropped)) { GiveInventory("RocketAmmo",2); GiveInventory("DoomguyStrMines",5); result = 1; }}
					}
				}
			}
			break;
		case 29:
			GiveInventory("DGHasGrenadeLauncher", 1);

			if(!CheckInventory(" GrenadeLauncher "))
			{
				if(dropped)
				{
					GiveInventory("Samsara_ModeWeaponChange",1);
					GiveInventory("RocketAmmo",1);
					result = 1;
				}
				else
				{
					GiveInventory("Samsara_ModeWeaponChange",1);
					GiveInventory("RocketAmmo",2);
					result = 1;
				}
			}
			else
			{
				if(dropped)
				{
					if(CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo")) { if((!weaponStay || dropped)) { GiveInventory("RocketAmmo",1); result = 1; }}
				}
				else
				{
					if(CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo")) { if((!weaponStay || dropped)) { GiveInventory("RocketAmmo",2); result = 1; }}
				}
			}
			break;
		case 30:
			GiveInventory("DGHasPlasmaRifle", 1);
			GiveInventory("DGStrHasStunnerRifle", 1);

			if(!CheckInventory("Plasma Rifle"))
			{
				if(CheckInventory("DoomClassMode") == 2 && CheckInventory("SamsaraExtraWeaponsAreEnabled"))
				{
					if(dropped)
					{
						GiveInventory("Samsara_ModeWeaponChange",1);
						GiveInventory("Cell",40); // plasma 20 + stunner 20
						result = 1;
					}
					else
					{
						GiveInventory("Samsara_ModeWeaponChange",1);
						GiveInventory("Cell",80); // plasma 40 + stunner 40
						result = 1;
					}
				}
				else
				{
					if(dropped)
					{
						GiveInventory("Samsara_ModeWeaponChange",1);
						GiveInventory("Cell",20);
						result = 1;
					}
					else
					{
						GiveInventory("Samsara_ModeWeaponChange",1);
						GiveInventory("Cell",40);
						result = 1;
					}
				}
			}
			else
			{
				if(CheckInventory("DoomClassMode") == 2 && CheckInventory("SamsaraExtraWeaponsAreEnabled"))
				{
					if(dropped)
					{
						if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",40); result = 1; }} // plasma 20 + stunner 20
					}
					else
					{
						if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",80); result = 1; }} // plasma 40 + stunner 40
					}
				}
				else
				{
					if(dropped)
					{
						if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",20); result = 1; }}
					}
					else
					{
						if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",40); result = 1; }}
					}
				}
			}
			break;
		case 31:
			GiveInventory("DGHasRailgun", 1);

			if(!CheckInventory(" RailGun "))
			{
				if(dropped)
				{
					GiveInventory("Samsara_ModeWeaponChange",1);
					GiveInventory("Cell",20);
					result = 1;
				}
				else
				{
					GiveInventory("Samsara_ModeWeaponChange",1);
					GiveInventory("Cell",40);
					result = 1;
				}
			}
			else
			{
				if(dropped)
				{
					if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",20); result = 1; }}
				}
				else
				{
					if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",40); result = 1; }}
				}
			}
			break;
		case 32:
			weaponStay = GetCvar("samsara_permault");
			GiveInventory("DGHasBFG9000", 1);
			GiveInventory("Doom64_IHaveUnmaker", 1);
			GiveInventory("DGStrHasPyroCannon", 1);

			if(!CheckInventory("B.F.G. 9000"))
			{
				if(CheckInventory("DoomClassMode") == 1)
				{
					if(dropped)
					{
						GiveInventory("Samsara_ModeWeaponChange",1);
						GiveInventory("Cell",40); // bfg 20 + unmaker 20
						GiveInventory("DoomguyStrGas",24);
						result = 1;
					}
					else
					{
						GiveInventory("Samsara_ModeWeaponChange",1);
						GiveInventory("Cell",80); // bfg 40 + unmaker 40
						GiveInventory("DoomguyStrGas",48);
						result = 1;
					}
				}
				else
				{
					if(dropped)
					{
						GiveInventory("Samsara_ModeWeaponChange",1);
						GiveInventory("Cell",20);
						GiveInventory("DoomguyStrGas",24);
						result = 1;
					}
					else
					{
						GiveInventory("Samsara_ModeWeaponChange",1);
						GiveInventory("Cell",40);
						GiveInventory("DoomguyStrGas",48);
						result = 1;
					}
				}
			}
			else
			{
				if(CheckInventory("DoomClassMode") == 2 && CheckInventory("SamsaraExtraWeaponsAreEnabled"))
				{
					if(dropped)
					{
						if(CheckInventory("DoomguyStrGas") < GetAmmoCapacity("DoomguyStrGas")) { if((!weaponStay || dropped)) { GiveInventory("Cell",20); GiveInventory("DoomguyStrGas",24); result = 1; }}
						else if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",20); GiveInventory("DoomguyStrGas",24); result = 1; }}
					}
					else
					{
						if(CheckInventory("DoomguyStrGas") < GetAmmoCapacity("DoomguyStrGas")) { if((!weaponStay || dropped)) { GiveInventory("Cell",40); GiveInventory("DoomguyStrGas",48); result = 1; }}
						else if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",40); GiveInventory("DoomguyStrGas",48); result = 1; }}
					}
				}
				else if(CheckInventory("DoomClassMode") == 1)
				{
					if(dropped)
					{
						if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",40); GiveInventory("DoomguyStrGas",24); result = 1; }} // bfg 20 + unmaker 20
					}
					else
					{
						if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",80); GiveInventory("DoomguyStrGas",48); result = 1; }} // bfg 40 + unmaker 40
					}
				}
				else
				{
					if(dropped)
					{
						if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",20); GiveInventory("DoomguyStrGas",24); result = 1; }}
					}
					else
					{
						if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",40); GiveInventory("DoomguyStrGas",48); result = 1; }}
					}
				}
			}
			break;
		case 33:
			weaponStay = GetCvar("samsara_permault");
			GiveInventory("DGHasBFG10K", 1);

			if(!CheckInventory(" BFG10K "))
			{
				if(CheckInventory("DoomClassMode") == 2)
				{
					if(dropped)
					{
						GiveInventory("Samsara_ModeWeaponChange",1);
						GiveInventory("Cell",30);
						result = 1;
					}
					else
					{
						GiveInventory("Samsara_ModeWeaponChange",1);
						GiveInventory("Cell",60);
						result = 1;
					}
				}
				else
				{
					if(dropped)
					{
						GiveInventory("Samsara_ModeWeaponChange",1);
						GiveInventory("Cell",20);
						result = 1;
					}
					else
					{
						GiveInventory("Samsara_ModeWeaponChange",1);
						GiveInventory("Cell",40);
						result = 1;
					}
				}
			}
			else
			{
				if(CheckInventory("DoomClassMode") == 2)
				{
					if(dropped)
					{
						if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",30); result = 1; }}
					}
					else
					{
						if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",60); result = 1; }}
					}
				}
				else
				{
					if(dropped)
					{
						if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",20); result = 1; }}
					}
					else
					{
						if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",40); result = 1; }}
					}
				}
			}
			break;
		case 34:
			weaponStay = GetCvar("samsara_permault");
			if(timer() - 2100 >= CheckInventory("Painkiller_TarotLastPickupTime"))
			{
				SetInventory("Painkiller_TarotLastPickupTime",timer());
				result = 1;
			}
			else if(!weaponStay || dropped) { result = 1; }
			break;
		case 35:
			GiveInventory("DGStrHasAutoShotgun", 1);

			if(!CheckInventory("Super Shotgun"))
			{
				if(CheckInventory("DoomClassMode") == 2 && CheckInventory("SamsaraExtraWeaponsAreEnabled"))
				{
					if(dropped)
					{
						GiveInventory("Samsara_ModeWeaponChange",1);
						GiveInventory("Shell",14); // ssg 4 + asg 10
						result = 1;
					}
					else
					{
						GiveInventory("Samsara_ModeWeaponChange",1);
						GiveInventory("Shell",28); // ssg 8 + asg 20
						result = 1;
					}
				}
				else
				{
					if(dropped)
					{
						GiveInventory("Samsara_ModeWeaponChange",1);
						GiveInventory("Shell",4);
						result = 1;
					}
					else
					{
						GiveInventory("Samsara_ModeWeaponChange",1);
						GiveInventory("Shell",8);
						result = 1;
					}
				}
			}
			else
			{
				if(CheckInventory("DoomClassMode") == 2 && CheckInventory("SamsaraExtraWeaponsAreEnabled"))
				{
					if(dropped)
					{
						if(CheckInventory("Shell") < GetAmmoCapacity("Shell")) { if((!weaponStay || dropped)) { GiveInventory("Shell",14); result = 1; }} // ssg 4 + asg 10
					}
					else
					{
						if(CheckInventory("Shell") < GetAmmoCapacity("Shell")) { if((!weaponStay || dropped)) { GiveInventory("Shell",28); result = 1; }} // ssg 8 + asg 20
					}
				}
				else
				{
					if(dropped)
					{
						if(CheckInventory("Shell") < GetAmmoCapacity("Shell")) { if((!weaponStay || dropped)) { GiveInventory("Shell",4); result = 1; }}
					}
					else
					{
						if(CheckInventory("Shell") < GetAmmoCapacity("Shell")) { if((!weaponStay || dropped)) { GiveInventory("Shell",8); result = 1; }}
					}
				}
			}
			break;
		case 36:
			if(!CheckInventory("Double Pistols")) { result = 1; }

			else if(CheckInventory("RottMissiles") < GetAmmoCapacity("RottMissiles"))
			{
				if(dropped)
				{
					GiveInventory("RottMissiles", 5);
					result = 1;
				}
				else
				{
					GiveInventory("RottMissiles", 10);
					result = 1;
				}
			}
			break;
		case 37:
			if(!CheckInventory("MP40")) { result = 1; }

			else if(CheckInventory("HSMissiles") < GetAmmoCapacity("HSMissiles"))
			{
				if(dropped)
				{
					GiveInventory("HSMissiles", 3);
					result = 1;
				}
				else
				{
					GiveInventory("HSMissiles", 6);
					result = 1;
				}
			}
			break;
		case 38:
			if(!CheckInventory("RoTTM60")) { result = 1; }

			else if(CheckInventory("DMissiles") < GetAmmoCapacity("DMissiles"))
			{
				if(dropped)
				{
					GiveInventory("DMissiles", 5);
					result = 1;
				}
				else
				{
					GiveInventory("DMissiles", 10);
					result = 1;
				}
			}
			break;
		case 39:
            if (!CheckInventory("DisruptorTeraBall"))
            {
                TakeInventory("DisruptorEnergyBall", 1);
                GiveInventory("DisruptorTeraBall", 1);
                result = 1;
            }
            break;
		case 40:
            if (!CheckInventory("MA-75B Assault Rifle"))
            {
                result = 1;
            }
			
			if(dropped)
			{
				if(CheckInventory("Clip") < GetAmmoCapacity("Clip")) { if((!weaponStay || dropped)) { GiveInventory("Clip",26); GiveInventory("RocketAmmo",4); result = 1; }}
				else if(CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo")) { if((!weaponStay || dropped)) { GiveInventory("Clip",26); GiveInventory("RocketAmmo",4); result = 1; }}
			}
			else
			{
				if(CheckInventory("Clip") < GetAmmoCapacity("Clip")) { if((!weaponStay || dropped)) { GiveInventory("Clip",52); GiveInventory("RocketAmmo",7); result = 1; }}
				else if(CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo")) { if((!weaponStay || dropped)) { GiveInventory("Clip",52); GiveInventory("RocketAmmo",7); result = 1; }}
			}
            break;
		case 41:
            if (!CheckInventory("ONI-71 Wave Motion Cannon"))
            {
                result = 1;
            }
			
			if(dropped)
			{
				if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",20); GiveInventory("RocketAmmo",8); result = 1; }}
				else if(CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo")) { if((!weaponStay || dropped)) { GiveInventory("Cell",20); GiveInventory("RocketAmmo",8); result = 1; }}
			}
			else
			{
				if(CheckInventory("Cell") < GetAmmoCapacity("Cell")) { if((!weaponStay || dropped)) { GiveInventory("Cell",40); GiveInventory("RocketAmmo",15); result = 1; }}
				else if(CheckInventory("RocketAmmo") < GetAmmoCapacity("RocketAmmo")) { if((!weaponStay || dropped)) { GiveInventory("Cell",40); GiveInventory("RocketAmmo",15); result = 1; }}
			}
            break;
	}
	SetResultValue(result);
	//PrintBold(s:"Distance X: ",d:abs(invokerX - inventoryX),s:", Distance Y: ",d:abs(invokerY - inventoryY),s:", Distance Z: ",d:abs(invokerZ - inventoryZ));
}

Script "Samsara_MapInventoryLogger" (int message) clientside
{
	str logmsg;
	switch(message)
	{
		default: break;
		case 2: logmsg = "STG44 Assault Rifle"; break;
	}
	Log(s:msgColors[GetCVar("msg0color")], s:logmsg);
}

//======================================================================================================================
//											Spawn Slots that respawn in the map
//======================================================================================================================

Script "Samsara_SpawnSlot" (int slot, int toss)
{
	int newTid = UniqueTid();
	str slotweapon;
	switch(slot)
	{
		case 1: slotweapon = "SamsaraSlotOnePickup"; break;
		case 2: slotweapon = "SamsaraSlotTwoPickup"; break;
		case 3: slotweapon = "SamsaraSlotThreePickup"; break;
		case 4: slotweapon = "SamsaraSlotFourPickup"; break;
		case 5: slotweapon = "SamsaraSlotFivePickup"; break;
		case 6: slotweapon = "SamsaraSlotSixPickup"; break;
		case 7: slotweapon = "SamsaraSlotSevenPickup"; break;
	}
	SpawnSpotFacingForced(slotweapon,0,newTid);
	SetActorProperty(newTid,APROP_Dropped,GetActorProperty(0,APROP_Dropped));
	if(toss) SetActorVelocity(newTid,random(-4.0,4.0),random(-4.0,4.0),0,0,0);
	Thing_ChangeTid(newTid,0);
}

//======================================================================================================================
//											Optional Skulltag pickups for slots
//======================================================================================================================

Script "Samsara_SpawnSlotSkulltag" (int slot, int toss)
{
	int newTid = UniqueTid();
	int skulltagSpawned = 0;
	str slotweapon;
	switch(slot)
	{
		case 1: slotweapon = "SamsaraSlotFourSkulltagPickup"; break;
		case 2: slotweapon = "SamsaraSlotFiveSkulltagPickup"; break;
		case 3: slotweapon = "SamsaraSlotSixSkulltagPickup"; break;
		case 4: slotweapon = "SamsaraSlotSevenSkulltagPickup"; break;
	}

	if(random(1,100) <= (GetCvar("samsara_skulltagspawn")))
	{
		skulltagSpawned = 1;
		SpawnSpotFacingForced(slotweapon,0,newTid);
		SetActorFlag(newTid, "DROPPED", false);
	}

	if (skulltagSpawned)
	{
		if (GetCvar("samsara_skulltagreplace"))
		{
			Thing_Remove(0);
		}
		else
		{
			SetActorProperty(newTid,APROP_Dropped,GetActorProperty(0,APROP_Dropped));
			SetActorFlag(newTid, "NEVERRESPAWN", true);
			if(toss) SetActorVelocity(newTid,random(-4.0,4.0),random(-4.0,4.0),0,0,0);
		}

		Thing_ChangeTid(newTid,0);
	}
}

//======================================================================================================================
//													Player Shrinker
//======================================================================================================================

Script "Samsara_PlayerShrinker" (int condition)
{
	if(!condition)
	{
		if(CheckInventory("ShrunkPlayer"))
			terminate;

		int shrinktimer;
		int activatorstid = ActivatorTid();
		int usertid = UniqueTid();
		int dummytid = UniqueTid();
		int ScaleX = GetActorProperty(0,APROP_ScaleX);
		int ScaleY = GetActorProperty(0,APROP_ScaleY);
		int shrunkenscalex = FixedMul(ScaleX,0.2);
		int shrunkenscaley = FixedMul(ScaleY,0.2);
		int viewheight = GetActorProperty(0,APROP_ViewHeight);
		GiveInventory("ShrunkPlayer",1);
		SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
		for(int a = 0; a < 10; a++)
		{
			SetActorProperty(0,APROP_ViewHeight,FixedMul(viewheight,1.0-(a*0.08)));
			Delay(2);
		}
		Delay(1);
		SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
		int pln = PlayerNumber();

		//Translation helper, because the flag isn't valid
		SpawnSpotForced("TranslationDummy",0,dummytid,0);
		Thing_SetTranslation(dummytid, -1);
		Thing_ChangeTid(0, usertid);
		SetActivator(dummytid, AAPTR_Default);
		MorphActor(usertid,strparam(s:PlayerActors[PlayerClass(pln)],s:"_Shrink"),"Zombieman3",525,MRF_FULLHEALTH|MRF_UNDOBYTOMEOFPOWER|MRF_LOSEACTUALWEAPON|MRF_NEWTIDBEHAVIOUR,"ShrinkFlash","ShrinkFlash");
		Thing_SetTranslation(usertid, -1);
		SetActivator(usertid, AAPTR_Default);
		Thing_ChangeTid(usertid, activatorstid);
		Thing_Remove(dummytid);

		SetActorProperty(0,APROP_ScaleX,shrunkenscalex);
		SetActorProperty(0,APROP_ScaleY,shrunkenscaley);

		while(shrinktimer <= 420)
		{
			if((ClassifyActor(0) & ACTOR_DEAD))
				terminate;

			Delay(1);

			shrinktimer++;
		}
		TakeInventory("ShrunkPlayer",1);
		int newtid = UniqueTid();
		if(!Spawn(PlayerActors[PlayerClass(pln)],GetActorX(0),GetActorY(0),GetActorZ(0),newtid))
		{
			Thing_Damage2(0,500000000000,"Explosive");
		}
		else
		{
			Thing_Remove(newtid);
		}
		if((ClassifyActor(0) & ACTOR_DEAD))
			terminate;

		SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
		for(a = 0; a < 10; a++)
		{
			SetActorProperty(0,APROP_ScaleX,shrunkenscalex+(FixedMul(ScaleX,0.1)*a));
			SetActorProperty(0,APROP_ScaleY,shrunkenscaley+(FixedMul(ScaleY,0.1)*a));
			SetActorProperty(0,APROP_ViewHeight,FixedMul(viewheight,0.28+(a*0.08)));
			Delay(2);
		}
		UnMorphActor(0,1);
		SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
		SetActorProperty(0,APROP_ViewHeight,viewheight);
		SetActorProperty(0,APROP_ScaleX,ScaleX);
		SetActorProperty(0,APROP_ScaleY,ScaleY);
	}
	else
	{
		SetResultValue(ClassifyActor(0) & ACTOR_PLAYER);
	}
}

//======================================================================================================================
//								Cvar GZDoom checker - Somewhat redundant over IsThisZandro
//======================================================================================================================

Script "Samsara_GZDoomChecker" (void)
{
	if(GetCvar("samsara_runninginzdoom"))
		SetResultValue(1);

	else
		SetResultValue(0);
}

//======================================================================================================================
//												Taunt Button for GZDoom
//======================================================================================================================

script "TauntButton" (void) NET CLIENTSIDE
{
    if (!GetCVar("samsara_runninginzdoom") && GetCVar("samsara_runninginzandro")) { ConsoleCommand("taunt"); }
    else
    {
        if (!isDead(0) && GameType() != GAME_TITLE_MAP) { PlaySound(0, "*taunt", CHAN_VOICE); }
    }
}

//======================================================================================================================
//Resonate. This creates the effect of a counter going up or down at an erratic rate, like Marathon's alien weapons.
//======================================================================================================================
script "SamsaraResonate" (int which, int frequency) clientside //608
{
	if (which < 0 || which >= RESCOUNT) { Log(s:"\caERROR\c- (minor): Attempted to resonate with invalid index (", d:which, s:")"); terminate; }

	int pln = PlayerNumber();
	int locktime = Timer();

	int item = ResonantItems[which];
	int low= ResonantAmounts[which][0];
	int high = ResonantAmounts[which][1];

	if (high <= -1) { high = GetAmmoCapacity(item); }

	if (frequency == 0) { Log(s:"\caERROR\c-: Attempted to resonate item \"", s:item, s:"\" with frequency of 0"); terminate; }
	frequency = abs(frequency);

	int resPosition = random(low, high);
	int resNextPos = resPosition;
	int resAmplitude = 0;
	int resIndex = 0;
	int resTimer;
	int resonance;

	ResonantTimes[pln][which] = locktime;

	while (ResonantTimes[pln][which] == locktime)
	{
		if (abs(resPosition - resNextPos) <= 2) { resPosition = resNextPos; }
		else { resPosition += (resNextPos - resPosition) / 3; }

		if (resAmplitude == 0) { resTimer = 0; }

		if (resTimer == 0)
		{
			resAmplitude += random(1.0, 20.0);
			resTimer = random(1, 70);
			resNextPos = random(low, high);
		}

		resonance = FixedMul(resAmplitude, sin(itof(resIndex) / frequency)) + itof(resPosition);
		resAmplitude = max(0, resAmplitude - 0.5);

		TakeInventory(item, 0x7FFFFFFF);
		GiveInventory(item, ftoi(resonance));

		Delay(1);
		resTimer--;
		resIndex++;
		resIndex %= (frequency * 100);
	}
}

//======================================================================================================================
//														Other
//======================================================================================================================

Script "Samsara_PlayerFreezeTranslation" (void)
{
	//SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
	CreateTranslation(7680, 0:255=%[0.078,0.062,0.140]:[1.16,1.16,1.348]);
	Thing_SetTranslation(0,7680);
}

Script "ExtraDeathFX" (int mode) // Samsara Extra Death Special Effects -- 2530
{
	Switch(mode)
	{
		Case 1:
			SetActorProperty(0, APROP_RenderStyle, STYLE_TRANSLUCENTSTENCIL);
			SetActorProperty(0, APROP_StencilColor, 0x000000);
			break;
		Case 2:
			SetActorProperty(0, APROP_RenderStyle, STYLE_OptFuzzy);
			ThrustThingZ(0,5,0,0);
			break;
	}
}

str itemTypeCvars[3] = { "samsara_replace_computermap", "samsara_replace_lightamplifier", "samsara_replace_blursphere" };
str itemReplacementNames[26] = { "Medikit", "Soulsphere", "GreenArmor", "BlueArmor", "Megasphere", "Clipbox", "Shellbox",
"RocketBox", "CellPack", "Backpack", "AllMap", "Berserk", "BlurSphere", "InvulnerabilitySphere", "Infrared", "Chainsaw",
"Shotgun", "SuperShotgun", "Chaingun", "Minigun", "RocketLauncher", "GrenadeLauncher", "PlasmaRifle", "RailGun", "BFG9000", "BFG10K" };

Script "Samsara_SwitchableObject" (int type)
{
	int value = GetCvar(itemTypeCvars[type]);
	if(value == 0 || (type == 0 && value == 11) || (type == 1 && value == 15) || (type == 2 && value == 13))
		terminate;
	else
	{
		int itemTid = UniqueTid();
		SpawnForced(itemReplacementNames[value-1],GetActorX(0),GetActorY(0),GetActorZ(0),itemTid);
		SetActorProperty(itemTid,APROP_Dropped,GetActorProperty(0,APROP_Dropped));
		Thing_Remove(0);
		Thing_ChangeTid(itemTid,0);
	}
}

Script "SamsaraBossDeathToggler" (void)
{
	if(GetCvar("samsara_mixerloaded"))
		GiveInventory("Samsara_KillMaster", 1);
	else
		GiveInventory("Samsara_BossDeath", 1);
}

script "SamsaraBerserkFistSwitchHack" (void) { SetWeapon(" Fist "); } // A_SelectWeapon somehow doesn't work for whatever reason

script "SamsaraForcePlayerAttackState" (int flash)
{
	if (!isDead(0))
	{
		if (flash) { SetActorState(0, "Melee"); }
		else { SetActorState(0, "Missile"); }
	}
}

Script "SamsaraBloodGeneratorOffsets" (void)
{
	int missilex = GetActorX(0);
	int missiley = GetActorY(0);
	int missilez = GetActorZ(0);
	int missileAngle = GetActorAngle(0);
	SetActivator(0,AAPTR_Tracer);

	int enemyx = GetActorX(0);
	int enemyy = GetActorY(0);
	int enemyz = GetActorZ(0);
	int currentangle = GetActorAngle(0);
	int vang = VectorAngle(enemyx - missilex, enemyy - missiley);
	int angle = vang % 1.0;
	TakeInventory("SamsaraBloodGeneratorBleedAngle",999999);
	TakeInventory("SamsaraBloodGeneratorAngle",999999);
	TakeInventory("SamsaraBloodGeneratorZ",999999);
	GiveInventory("SamsaraBloodGeneratorAngle",angle+65536);
	GiveInventory("SamsaraBloodGeneratorBleedAngle",missileAngle+65536);
	GiveInventory("SamsaraBloodGeneratorZ",(missilez - enemyz)>>16 + 65536);
}

Script "SamsaraBloodGeneratorReturn" (int mode)
{
	int result;
	switch(mode)
	{
		case 1:
			result = ((CheckInventory("SamsaraBloodGeneratorAngle") - 65536)/182)+180;
			break;
		case 2:
			result = CheckInventory("SamsaraBloodGeneratorZ");
			break;
		case 3:
			result = ((CheckInventory("SamsaraBloodGeneratorBleedAngle") - 65536)/182);
			break;
	}
	SetResultValue(result);
}

Script "SamsaraProjectileMovementPitch" (void)
{
	SetResultValue(VectorAngle(VectorLength(GetActorVelX(0),GetActorVelY(0)),GetActorVelZ(0)));
}

script "SamsaraPresetSelection" (void)
{
	switch(GetCvar("samsara_presetvalue"))
	{
		case 0: // Vanilla

		// General Options
		SetCVar("samsara_jumpmod", 0);
		SetCVar("samsara_armormode", 0);
		SetCVar("samsara_speedmod", 0);
		SetCVar("samsara_nohealth", false);
		SetCVar("samsara_nohealthcap", false);
		SetCVar("samsara_nomonologues", true);
		SetCVar("samsara_experiencegain", 2);
		SetCVar("samsara_dukesoundboard", false);
		SetCVar("samsara_microwavepop", 0);
		SetCVar("samsara_unmakerartifacts", 0);
		SetCVar("samsara_strifeupgrades", 0);
		SetCVar("samsara_mp_startingGold", 0);
		SetCVar("samsara_deusexstartingskills", 0);
		SetCVar("samsara_randomcharacters", 0);
		SetCVar("samsara_misccharacterspawnmode", 1);
		SetCVar("samsara_notimefreeze", false);
		SetCVar("samsara_merrychristmas", false);
		SetCVar("samsara_merrychristmasdecorations", false);

		// LMS Options
		SetCVar("samsara_lmsrules", 0);
		SetCVar("samsara_lmslife", 0);
		SetCVar("samsara_lmsult", 0);
		SetCVar("samsara_lmsuniques", 0);
		SetCVar("samsara_lmsskulltag", 0);

		// Turkey Puncher Options
		SetCVar("samsara_superturboturkeypuncher3000", 0);
		SetCVar("samsara_superturboturkeyfrequency", 35);
		SetCVar("samsara_superturboturkeylimit", 0);

		// Party Mode Options
		SetCVar("samsara_peoplediewhentheyarekilled", 0);
		SetCVar("samsara_permaweaponlevel2", 0);

		// Weapon Options
		SetCVar("samsara_permault", 0);
		SetCVar("samsara_extraweapons", 0);
		SetCVar("samsara_uniquestart", 0);
		SetCVar("samsara_chainsawstart", 0);
		SetCVar("samsara_shotgunstart", 0);
		SetCVar("samsara_backpackstart", 0);
		SetCVar("samsara_reloadmode", 1);
		SetCVar("samsara_bottomlessmagazines", 0);
		SetCVar("samsara_noinventorycooldown", 0);
		SetCVar("samsara_pistolammo", 0);
		SetCVar("samsara_pistolstart", 0);
		SetCVar("samsara_slotmode", 0);
		SetCVar("samsara_instagibspread", 0);

		// Ammo Options
		SetCVar("samsara_max_clip", 200);
		SetCVar("samsara_max_shell", 50);
		SetCVar("samsara_max_rocket", 50);
		SetCVar("samsara_max_cell", 300);
		SetCVar("samsara_noammocap", 0);

		// Pickup Spawn Options
		SetCVar("samsara_noinvuln", 0);
		SetCVar("samsara_nounique", 0);
		SetCVar("samsara_noult", 0);
		SetCVar("samsara_skulltagspawn", 0);
		SetCVar("samsara_skulltagreplace", 1);

		// Item Options
		SetCVar("samsara_randomitems", 0);
		SetCVar("samsara_replace_computermap", 0);
		SetCVar("samsara_replace_blursphere", 0);
		SetCVar("samsara_replace_lightamplifier", 0);

		// Random Character Spawn Options
		SetCVar("samsara_misccharspawn_duke3d", 0);
		SetCVar("samsara_misccharspawn_rott", 0);
		SetCVar("samsara_misccharspawn_blood", 0);
		SetCVar("samsara_misccharspawn_strife", 0);
		SetCVar("samsara_misccharspawn_rmr", 0);
		SetCVar("samsara_misccharspawn_halflife", 0);
		SetCVar("samsara_misccharspawn_sw", 0);
		SetCVar("samsara_misccharspawn_ps", 0);
		SetCVar("samsara_misccharspawn_rr", 0);
		SetCVar("samsara_misccharspawn_quake2", 0);
		SetCVar("samsara_misccharspawn_hexen2", 0);

		// Class-Based Ability Options
		SetCVar("samsara_doomguybalance", 0);
		SetCVar("samsara_classiclaz", 0);
		SetCVar("samsara_banmorphovum", 0);
		SetCVar("samsara_fullradiusdmg", 0);
		SetCVar("samsara_permaquad", 0);
		SetCVar("samsara_permakimbo", 0);
		SetCVar("samsara_nodemonmorph", 0);
		SetCVar("samsara_notarotcardlimit", 0);
		SetCVar("samsara_nopainkillercorpseremoval", 0);
		SetCVar("samsara_descentflight", 1);
		SetCVar("samsara_deusexmovementpenalty", 1);

		// Serverside Ability Options
		SetCVar("samsara_banjetpack", 1);
		SetCVar("samsara_banwolfmove", 0);
		SetCVar("samsara_banallies", 1);
		SetCVar("samsara_nocustomgravity", 1);
		SetCVar("samsara_forcerecoil", 0);

		// Character Ban Options
		SetCVar("samsara_bandoomguy", false);
		SetCVar("samsara_banchex", false);
		SetCVar("samsara_bancorvus", false);
		SetCVar("samsara_banbj", false);
		SetCVar("samsara_banparias", false);
		SetCVar("samsara_banduke", false);
		SetCVar("samsara_banso", false);
		SetCVar("samsara_banranger", false);
		SetCVar("samsara_banfreely", false);
		SetCVar("samsara_banblake", false);
		SetCVar("samsara_bancaleb", false);
		SetCVar("samsara_banstrifeguy", false);
		SetCVar("samsara_baneleena", false);
		SetCVar("samsara_banspaceseal", false);
		SetCVar("samsara_banrebelmooncommando", false);
		SetCVar("samsara_bankatarn", false);
		SetCVar("samsara_banmooman", false);
		SetCVar("samsara_bandisruptor", false);
		SetCVar("samsara_bangrondoval", false);
		SetCVar("samsara_banfreeman", false);
		SetCVar("samsara_banwang", false);
		SetCVar("samsara_bancm", false);
		SetCVar("samsara_banjon", false);
		SetCVar("samsara_banrr", false);
		SetCVar("samsara_banq2", false);
		SetCVar("samsara_bandemoness", false);
		SetCVar("samsara_banbond", false);
		SetCVar("samsara_banpetton", false);
		SetCVar("samsara_bandaniel", false);
		SetCVar("samsara_banprisoner", false);
		SetCVar("samsara_banrtcw", false);
		SetCVar("samsara_bansarge", false);
		SetCVar("samsara_banpyrogx", false);
		SetCVar("samsara_banjcdenton", false);

		// Character Multiplier Options
		SetCVar("samsara_generaldamage", 0);
		SetCVar("samsara_generaldefense", 0);
		SetCVar("samsara_doomguydamage", 0);
		SetCVar("samsara_doomguydefense", 0);
		SetCVar("samsara_chexdamage", 0);
		SetCVar("samsara_chexdefense", 0);
		SetCVar("samsara_corvusdamage", 0);
		SetCVar("samsara_corvusdefense", 0);
		SetCVar("samsara_bjdamage", 0);
		SetCVar("samsara_bjdefense", 0);
		SetCVar("samsara_pariasdamage", 0);
		SetCVar("samsara_pariasdefense", 0);
		SetCVar("samsara_dukedamage", 0);
		SetCVar("samsara_dukedefense", 0);
		SetCVar("samsara_sodamage", 0);
		SetCVar("samsara_sodefense", 0);
		SetCVar("samsara_rangerdamage", 0);
		SetCVar("samsara_rangerdefense", 0);
		SetCVar("samsara_freelydamage", 0);
		SetCVar("samsara_freelydefense", 0);
		SetCVar("samsara_blakedamage", 0);
		SetCVar("samsara_blakedefense", 0);
		SetCVar("samsara_calebdamage", 0);
		SetCVar("samsara_calebdefense", 0);
		SetCVar("samsara_strifeguydamage", 0);
		SetCVar("samsara_strifeguydefense", 0);
		SetCVar("samsara_eleenadamage", 0);
		SetCVar("samsara_eleenadefense", 0);
		SetCVar("samsara_spacesealdamage", 0);
		SetCVar("samsara_spacesealdefense", 0);
		SetCVar("samsara_rebelmooncommandodamage", 0);
		SetCVar("samsara_rebelmooncommandodefense", 0);
		SetCVar("samsara_katarndamage", 0);
		SetCVar("samsara_katarndefense", 0);
		SetCVar("samsara_moomandamage", 0);
		SetCVar("samsara_moomandefense", 0);
		SetCVar("samsara_disruptordamage", 0);
		SetCVar("samsara_disruptordefense", 0);
		SetCVar("samsara_grondovaldamage", 0);
		SetCVar("samsara_grondovaldefense", 0);
		SetCVar("samsara_freemandamage", 0);
		SetCVar("samsara_freemandefense", 0);
		SetCVar("samsara_wangdamage", 0);
		SetCVar("samsara_wangdefense", 0);
		SetCVar("samsara_cmdamage", 0);
		SetCVar("samsara_cmdefense", 0);
		SetCVar("samsara_jondamage", 0);
		SetCVar("samsara_jondefense", 0);
		SetCVar("samsara_rrdamage", 0);
		SetCVar("samsara_rrdefense", 0);
		SetCVar("samsara_q2damage", 0);
		SetCVar("samsara_q2defense", 0);
		SetCVar("samsara_demonessdamage", 0);
		SetCVar("samsara_demonessdefense", 0);
		SetCVar("samsara_bonddamage", 0);
		SetCVar("samsara_bonddefense", 0);
		SetCVar("samsara_pettondamage", 0);
		SetCVar("samsara_pettondefense", 0);
		SetCVar("samsara_danieldamage", 0);
		SetCVar("samsara_danieldefense", 0);
		SetCVar("samsara_prisonerdamage", 0);
		SetCVar("samsara_prisonerdefense", 0);
		SetCVar("samsara_rtcwdamage", 0);
		SetCVar("samsara_rtcwdefense", 0);
		SetCVar("samsara_sargedamage", 0);
		SetCVar("samsara_sargedefense", 0);
		SetCVar("samsara_pyrogxdamage", 0);
		SetCVar("samsara_pyrogxdefense", 0);
		SetCVar("samsara_jcdentondamage", 0);
		SetCVar("samsara_jcdentondefense", 0);
		break;

		case 1: // Samsara

		// General Options
		SetCVar("samsara_jumpmod", 0);
		SetCVar("samsara_armormode", 0);
		SetCVar("samsara_speedmod", 0);
		SetCVar("samsara_nohealth", false);
		SetCVar("samsara_nohealthcap", false);
		SetCVar("samsara_nomonologues", true);
		SetCVar("samsara_experiencegain", 2);
		SetCVar("samsara_dukesoundboard", false);
		SetCVar("samsara_microwavepop", 0);
		SetCVar("samsara_unmakerartifacts", 0);
		SetCVar("samsara_strifeupgrades", 0);
		SetCVar("samsara_mp_startingGold", 0);
		SetCVar("samsara_deusexstartingskills", 0);
		SetCVar("samsara_randomcharacters", 0);
		SetCVar("samsara_misccharacterspawnmode", 1);
		SetCVar("samsara_notimefreeze", false);
		SetCVar("samsara_merrychristmas", false);
		SetCVar("samsara_merrychristmasdecorations", false);

		// LMS Options
		SetCVar("samsara_lmsrules", 0);
		SetCVar("samsara_lmslife", 0);
		SetCVar("samsara_lmsult", 0);
		SetCVar("samsara_lmsuniques", 0);
		SetCVar("samsara_lmsskulltag", 0);

		// Turkey Puncher Options
		SetCVar("samsara_superturboturkeypuncher3000", 0);
		SetCVar("samsara_superturboturkeyfrequency", 35);
		SetCVar("samsara_superturboturkeylimit", 0);

		// Party Mode Options
		SetCVar("samsara_peoplediewhentheyarekilled", 0);
		SetCVar("samsara_permaweaponlevel2", 0);

		// Weapon Options
		SetCVar("samsara_permault", 0);
		SetCVar("samsara_extraweapons", 0);
		SetCVar("samsara_uniquestart", 0);
		SetCVar("samsara_chainsawstart", 0);
		SetCVar("samsara_shotgunstart", 0);
		SetCVar("samsara_backpackstart", 0);
		SetCVar("samsara_reloadmode", 1);
		SetCVar("samsara_bottomlessmagazines", 0);
		SetCVar("samsara_noinventorycooldown", 0);
		SetCVar("samsara_pistolammo", 0);
		SetCVar("samsara_pistolstart", 0);
		SetCVar("samsara_slotmode", 8);
		SetCVar("samsara_instagibspread", 0);

		// Ammo Options
		SetCVar("samsara_max_clip", 200);
		SetCVar("samsara_max_shell", 100);
		SetCVar("samsara_max_rocket", 50);
		SetCVar("samsara_max_cell", 300);
		SetCVar("samsara_noammocap", 0);

		// Pickup Spawn Options
		SetCVar("samsara_noinvuln", 0);
		SetCVar("samsara_nounique", 0);
		SetCVar("samsara_noult", 0);
		SetCVar("samsara_skulltagspawn", 0);
		SetCVar("samsara_skulltagreplace", 1);

		// Item Options
		SetCVar("samsara_randomitems", 0);
		SetCVar("samsara_replace_computermap", 18);
		SetCVar("samsara_replace_blursphere", 0);
		SetCVar("samsara_replace_lightamplifier", 0);

		// Random Character Spawn Options
		SetCVar("samsara_misccharspawn_duke3d", 0);
		SetCVar("samsara_misccharspawn_rott", 0);
		SetCVar("samsara_misccharspawn_blood", 0);
		SetCVar("samsara_misccharspawn_strife", 0);
		SetCVar("samsara_misccharspawn_rmr", 0);
		SetCVar("samsara_misccharspawn_halflife", 0);
		SetCVar("samsara_misccharspawn_sw", 0);
		SetCVar("samsara_misccharspawn_ps", 0);
		SetCVar("samsara_misccharspawn_rr", 0);
		SetCVar("samsara_misccharspawn_quake2", 0);
		SetCVar("samsara_misccharspawn_hexen2", 0);

		// Class-Based Ability Options
		SetCVar("samsara_doomguybalance", 0);
		SetCVar("samsara_classiclaz", 0);
		SetCVar("samsara_banmorphovum", 0);
		SetCVar("samsara_fullradiusdmg", 0);
		SetCVar("samsara_permaquad", 0);
		SetCVar("samsara_permakimbo", 0);
		SetCVar("samsara_nodemonmorph", 0);
		SetCVar("samsara_notarotcardlimit", 0);
		SetCVar("samsara_nopainkillercorpseremoval", 0);
		SetCVar("samsara_descentflight", 1);
		SetCVar("samsara_deusexmovementpenalty", 0);

		// Serverside Ability Options
		SetCVar("samsara_banjetpack", 0);
		SetCVar("samsara_banwolfmove", 0);
		SetCVar("samsara_banallies", 1);
		SetCVar("samsara_nocustomgravity", 0);
		SetCVar("samsara_forcerecoil", 0);

		// Character Ban Options
		SetCVar("samsara_bandoomguy", false);
		SetCVar("samsara_banchex", false);
		SetCVar("samsara_bancorvus", false);
		SetCVar("samsara_banbj", false);
		SetCVar("samsara_banparias", false);
		SetCVar("samsara_banduke", false);
		SetCVar("samsara_banso", false);
		SetCVar("samsara_banranger", false);
		SetCVar("samsara_banfreely", false);
		SetCVar("samsara_banblake", false);
		SetCVar("samsara_bancaleb", false);
		SetCVar("samsara_banstrifeguy", false);
		SetCVar("samsara_baneleena", false);
		SetCVar("samsara_banspaceseal", false);
		SetCVar("samsara_banrebelmooncommando", false);
		SetCVar("samsara_bankatarn", false);
		SetCVar("samsara_banmooman", false);
		SetCVar("samsara_bandisruptor", false);
		SetCVar("samsara_bangrondoval", false);
		SetCVar("samsara_banfreeman", false);
		SetCVar("samsara_banwang", false);
		SetCVar("samsara_bancm", false);
		SetCVar("samsara_banjon", false);
		SetCVar("samsara_banrr", false);
		SetCVar("samsara_banq2", false);
		SetCVar("samsara_bandemoness", false);
		SetCVar("samsara_banbond", false);
		SetCVar("samsara_banpetton", false);
		SetCVar("samsara_bandaniel", false);
		SetCVar("samsara_banprisoner", false);
		SetCVar("samsara_banrtcw", false);
		SetCVar("samsara_bansarge", false);
		SetCVar("samsara_banpyrogx", false);
		SetCVar("samsara_banjcdenton", false);

		// Character Multiplier Options
		SetCVar("samsara_generaldamage", 0);
		SetCVar("samsara_generaldefense", 0);
		SetCVar("samsara_doomguydamage", 0);
		SetCVar("samsara_doomguydefense", 0);
		SetCVar("samsara_chexdamage", 0);
		SetCVar("samsara_chexdefense", 0);
		SetCVar("samsara_corvusdamage", 0);
		SetCVar("samsara_corvusdefense", 0);
		SetCVar("samsara_bjdamage", 0);
		SetCVar("samsara_bjdefense", 0);
		SetCVar("samsara_pariasdamage", 0);
		SetCVar("samsara_pariasdefense", 0);
		SetCVar("samsara_dukedamage", 0);
		SetCVar("samsara_dukedefense", 0);
		SetCVar("samsara_sodamage", 0);
		SetCVar("samsara_sodefense", 0);
		SetCVar("samsara_rangerdamage", 0);
		SetCVar("samsara_rangerdefense", 0);
		SetCVar("samsara_freelydamage", 0);
		SetCVar("samsara_freelydefense", 0);
		SetCVar("samsara_blakedamage", 0);
		SetCVar("samsara_blakedefense", 0);
		SetCVar("samsara_calebdamage", 0);
		SetCVar("samsara_calebdefense", 0);
		SetCVar("samsara_strifeguydamage", 0);
		SetCVar("samsara_strifeguydefense", 0);
		SetCVar("samsara_eleenadamage", 0);
		SetCVar("samsara_eleenadefense", 0);
		SetCVar("samsara_spacesealdamage", 0);
		SetCVar("samsara_spacesealdefense", 0);
		SetCVar("samsara_rebelmooncommandodamage", 0);
		SetCVar("samsara_rebelmooncommandodefense", 0);
		SetCVar("samsara_katarndamage", 0);
		SetCVar("samsara_katarndefense", 0);
		SetCVar("samsara_moomandamage", 0);
		SetCVar("samsara_moomandefense", 0);
		SetCVar("samsara_disruptordamage", 0);
		SetCVar("samsara_disruptordefense", 0);
		SetCVar("samsara_grondovaldamage", 0);
		SetCVar("samsara_grondovaldefense", 0);
		SetCVar("samsara_freemandamage", 0);
		SetCVar("samsara_freemandefense", 0);
		SetCVar("samsara_wangdamage", 0);
		SetCVar("samsara_wangdefense", 0);
		SetCVar("samsara_cmdamage", 0);
		SetCVar("samsara_cmdefense", 0);
		SetCVar("samsara_jondamage", 0);
		SetCVar("samsara_jondefense", 0);
		SetCVar("samsara_rrdamage", 0);
		SetCVar("samsara_rrdefense", 0);
		SetCVar("samsara_q2damage", 0);
		SetCVar("samsara_q2defense", 0);
		SetCVar("samsara_demonessdamage", 0);
		SetCVar("samsara_demonessdefense", 0);
		SetCVar("samsara_bonddamage", 0);
		SetCVar("samsara_bonddefense", 0);
		SetCVar("samsara_pettondamage", 0);
		SetCVar("samsara_pettondefense", 0);
		SetCVar("samsara_danieldamage", 0);
		SetCVar("samsara_danieldefense", 0);
		SetCVar("samsara_prisonerdamage", 0);
		SetCVar("samsara_prisonerdefense", 0);
		SetCVar("samsara_rtcwdamage", 0);
		SetCVar("samsara_rtcwdefense", 0);
		SetCVar("samsara_sargedamage", 0);
		SetCVar("samsara_sargedefense", 0);
		SetCVar("samsara_pyrogxdamage", 0);
		SetCVar("samsara_pyrogxdefense", 0);
		SetCVar("samsara_jcdentondamage", 0);
		SetCVar("samsara_jcdentondefense", 0);
		break;

		case 2: // Samsara Reincarnation

		// General Options
		SetCVar("samsara_jumpmod", 0);
		SetCVar("samsara_armormode", 0);
		SetCVar("samsara_speedmod", 0);
		SetCVar("samsara_nohealth", false);
		SetCVar("samsara_nohealthcap", false);
		SetCVar("samsara_nomonologues", true);
		SetCVar("samsara_experiencegain", 2);
		SetCVar("samsara_dukesoundboard", false);
		SetCVar("samsara_microwavepop", 0);
		SetCVar("samsara_unmakerartifacts", 0);
		SetCVar("samsara_strifeupgrades", 0);
		SetCVar("samsara_mp_startingGold", 1500);
		SetCVar("samsara_deusexstartingskills", 0);
		SetCVar("samsara_randomcharacters", 2);
		SetCVar("samsara_misccharacterspawnmode", 0);
		SetCVar("samsara_notimefreeze", false);
		SetCVar("samsara_merrychristmas", false);
		SetCVar("samsara_merrychristmasdecorations", false);

		// LMS Options
		SetCVar("samsara_lmsrules", 0);
		SetCVar("samsara_lmslife", 0);
		SetCVar("samsara_lmsult", 0);
		SetCVar("samsara_lmsuniques", 0);
		SetCVar("samsara_lmsskulltag", 0);

		// Turkey Puncher Options
		SetCVar("samsara_superturboturkeypuncher3000", 0);
		SetCVar("samsara_superturboturkeyfrequency", 35);
		SetCVar("samsara_superturboturkeylimit", 0);

		// Party Mode Options
		SetCVar("samsara_peoplediewhentheyarekilled", 0);
		SetCVar("samsara_permaweaponlevel2", 0);

		// Weapon Options
		SetCVar("samsara_permault", 0);
		SetCVar("samsara_extraweapons", 1);
		SetCVar("samsara_uniquestart", 0);
		SetCVar("samsara_chainsawstart", 0);
		SetCVar("samsara_shotgunstart", 0);
		SetCVar("samsara_backpackstart", 0);
		SetCVar("samsara_reloadmode", 2);
		SetCVar("samsara_bottomlessmagazines", 0);
		SetCVar("samsara_noinventorycooldown", 0);
		SetCVar("samsara_pistolammo", 0);
		SetCVar("samsara_pistolstart", 0);
		SetCVar("samsara_slotmode", 8);
		SetCVar("samsara_instagibspread", 0);

		// Ammo Options
		SetCVar("samsara_max_clip", 200);
		SetCVar("samsara_max_shell", 100);
		SetCVar("samsara_max_rocket", 50);
		SetCVar("samsara_max_cell", 300);
		SetCVar("samsara_noammocap", 0);

		// Pickup Spawn Options
		SetCVar("samsara_noinvuln", 0);
		SetCVar("samsara_nounique", 0);
		SetCVar("samsara_noult", 0);
		SetCVar("samsara_skulltagspawn", 1);
		SetCVar("samsara_skulltagreplace", 1);

		// Item Options
		SetCVar("samsara_randomitems", 0);
		SetCVar("samsara_replace_computermap", 0);
		SetCVar("samsara_replace_blursphere", 0);
		SetCVar("samsara_replace_lightamplifier", 0);

		// Random Character Spawn Options
		SetCVar("samsara_misccharspawn_duke3d", 1);
		SetCVar("samsara_misccharspawn_rott", 1);
		SetCVar("samsara_misccharspawn_blood", 1);
		SetCVar("samsara_misccharspawn_strife", 1);
		SetCVar("samsara_misccharspawn_rmr", 1);
		SetCVar("samsara_misccharspawn_halflife", 1);
		SetCVar("samsara_misccharspawn_sw", 1);
		SetCVar("samsara_misccharspawn_ps", 1);
		SetCVar("samsara_misccharspawn_rr", 1);
		SetCVar("samsara_misccharspawn_quake2", 1);
		SetCVar("samsara_misccharspawn_hexen2", 1);

		// Class-Based Ability Options
		SetCVar("samsara_doomguybalance", 1);
		SetCVar("samsara_classiclaz", 0);
		SetCVar("samsara_banmorphovum", 1);
		SetCVar("samsara_fullradiusdmg", 1);
		SetCVar("samsara_permaquad", 1);
		SetCVar("samsara_permakimbo", 0);
		SetCVar("samsara_nodemonmorph", 0);
		SetCVar("samsara_notarotcardlimit", 0);
		SetCVar("samsara_nopainkillercorpseremoval", 0);
		SetCVar("samsara_descentflight", 1);
		SetCVar("samsara_deusexmovementpenalty", 0);

		// Serverside Ability Options
		SetCVar("samsara_banjetpack", 0);
		SetCVar("samsara_banwolfmove", 0);
		SetCVar("samsara_banallies", 0);
		SetCVar("samsara_nocustomgravity", 0);
		SetCVar("samsara_forcerecoil", 0);

		// Character Ban Options
		SetCVar("samsara_bandoomguy", false);
		SetCVar("samsara_banchex", false);
		SetCVar("samsara_bancorvus", false);
		SetCVar("samsara_banbj", false);
		SetCVar("samsara_banparias", false);
		SetCVar("samsara_banduke", false);
		SetCVar("samsara_banso", false);
		SetCVar("samsara_banranger", false);
		SetCVar("samsara_banfreely", false);
		SetCVar("samsara_banblake", false);
		SetCVar("samsara_bancaleb", false);
		SetCVar("samsara_banstrifeguy", false);
		SetCVar("samsara_baneleena", false);
		SetCVar("samsara_banspaceseal", false);
		SetCVar("samsara_banrebelmooncommando", false);
		SetCVar("samsara_bankatarn", false);
		SetCVar("samsara_banmooman", false);
		SetCVar("samsara_bandisruptor", false);
		SetCVar("samsara_bangrondoval", false);
		SetCVar("samsara_banfreeman", false);
		SetCVar("samsara_banwang", false);
		SetCVar("samsara_bancm", false);
		SetCVar("samsara_banjon", false);
		SetCVar("samsara_banrr", false);
		SetCVar("samsara_banq2", false);
		SetCVar("samsara_bandemoness", false);
		SetCVar("samsara_banbond", false);
		SetCVar("samsara_banpetton", false);
		SetCVar("samsara_bandaniel", false);
		SetCVar("samsara_banprisoner", false);
		SetCVar("samsara_banrtcw", false);
		SetCVar("samsara_bansarge", false);
		SetCVar("samsara_banpyrogx", false);
		SetCVar("samsara_banjcdenton", false);

		// Character Multiplier Options
		SetCVar("samsara_generaldamage", 0);
		SetCVar("samsara_generaldefense", 0);
		SetCVar("samsara_doomguydamage", 0);
		SetCVar("samsara_doomguydefense", 0);
		SetCVar("samsara_chexdamage", 0);
		SetCVar("samsara_chexdefense", 0);
		SetCVar("samsara_corvusdamage", 0);
		SetCVar("samsara_corvusdefense", 0);
		SetCVar("samsara_bjdamage", 0);
		SetCVar("samsara_bjdefense", 0);
		SetCVar("samsara_pariasdamage", 0);
		SetCVar("samsara_pariasdefense", 0);
		SetCVar("samsara_dukedamage", 0);
		SetCVar("samsara_dukedefense", 0);
		SetCVar("samsara_sodamage", 0);
		SetCVar("samsara_sodefense", 0);
		SetCVar("samsara_rangerdamage", 0);
		SetCVar("samsara_rangerdefense", 0);
		SetCVar("samsara_freelydamage", 0);
		SetCVar("samsara_freelydefense", 0);
		SetCVar("samsara_blakedamage", 0);
		SetCVar("samsara_blakedefense", 0);
		SetCVar("samsara_calebdamage", 0);
		SetCVar("samsara_calebdefense", 0);
		SetCVar("samsara_strifeguydamage", 0);
		SetCVar("samsara_strifeguydefense", 0);
		SetCVar("samsara_eleenadamage", 0);
		SetCVar("samsara_eleenadefense", 0);
		SetCVar("samsara_spacesealdamage", 0);
		SetCVar("samsara_spacesealdefense", 0);
		SetCVar("samsara_rebelmooncommandodamage", 0);
		SetCVar("samsara_rebelmooncommandodefense", 0);
		SetCVar("samsara_katarndamage", 0);
		SetCVar("samsara_katarndefense", 0);
		SetCVar("samsara_moomandamage", 0);
		SetCVar("samsara_moomandefense", 0);
		SetCVar("samsara_disruptordamage", 0);
		SetCVar("samsara_disruptordefense", 0);
		SetCVar("samsara_grondovaldamage", 0);
		SetCVar("samsara_grondovaldefense", 0);
		SetCVar("samsara_freemandamage", 0);
		SetCVar("samsara_freemandefense", 0);
		SetCVar("samsara_wangdamage", 0);
		SetCVar("samsara_wangdefense", 0);
		SetCVar("samsara_cmdamage", 0);
		SetCVar("samsara_cmdefense", 0);
		SetCVar("samsara_jondamage", 0);
		SetCVar("samsara_jondefense", 0);
		SetCVar("samsara_rrdamage", 0);
		SetCVar("samsara_rrdefense", 0);
		SetCVar("samsara_q2damage", 0);
		SetCVar("samsara_q2defense", 0);
		SetCVar("samsara_demonessdamage", 0);
		SetCVar("samsara_demonessdefense", 0);
		SetCVar("samsara_bonddamage", 0);
		SetCVar("samsara_bonddefense", 0);
		SetCVar("samsara_pettondamage", 0);
		SetCVar("samsara_pettondefense", 0);
		SetCVar("samsara_danieldamage", 0);
		SetCVar("samsara_danieldefense", 0);
		SetCVar("samsara_prisonerdamage", 0);
		SetCVar("samsara_prisonerdefense", 0);
		SetCVar("samsara_rtcwdamage", 0);
		SetCVar("samsara_rtcwdefense", 0);
		SetCVar("samsara_sargedamage", 0);
		SetCVar("samsara_sargedefense", 0);
		SetCVar("samsara_pyrogxdamage", 0);
		SetCVar("samsara_pyrogxdefense", 0);
		SetCVar("samsara_jcdentondamage", 0);
		SetCVar("samsara_jcdentondefense", 0);
		break;

		// Secret presets
		case 100: // cubebert's Settings

		// General Options
		SetCVar("samsara_jumpmod", 0);
		SetCVar("samsara_armormode", 0);
		SetCVar("samsara_speedmod", 0);
		SetCVar("samsara_nohealth", false);
		SetCVar("samsara_nohealthcap", false);
		SetCVar("samsara_nomonologues", true);
		SetCVar("samsara_experiencegain", 1);
		SetCVar("samsara_dukesoundboard", false);
		SetCVar("samsara_microwavepop", 0);
		SetCVar("samsara_unmakerartifacts", 0);
		SetCVar("samsara_strifeupgrades", 5);
		SetCVar("samsara_mp_startingGold", 2000);
		SetCVar("samsara_deusexstartingskills", 1);
		SetCVar("samsara_randomcharacters", 0);
		SetCVar("samsara_misccharacterspawnmode", 1);
		SetCVar("samsara_notimefreeze", false);
		SetCVar("samsara_merrychristmas", false);
		SetCVar("samsara_merrychristmasdecorations", false);

		// LMS Options
		SetCVar("samsara_lmsrules", 0);
		SetCVar("samsara_lmslife", 2);
		SetCVar("samsara_lmsult", 1);
		SetCVar("samsara_lmsuniques", 1);
		SetCVar("samsara_lmsskulltag", 1);

		// Turkey Puncher Options
		SetCVar("samsara_superturboturkeypuncher3000", 0);
		SetCVar("samsara_superturboturkeyfrequency", 35);
		SetCVar("samsara_superturboturkeylimit", 0);

		// Party Mode Options
		SetCVar("samsara_peoplediewhentheyarekilled", 0);
		SetCVar("samsara_permaweaponlevel2", 0);

		// Weapon Options
		SetCVar("samsara_permault", 0);
		SetCVar("samsara_extraweapons", 1);
		SetCVar("samsara_uniquestart", 0);
		SetCVar("samsara_chainsawstart", 0);
		SetCVar("samsara_shotgunstart", 0);
		SetCVar("samsara_backpackstart", 0);
		SetCVar("samsara_reloadmode", 1);
		SetCVar("samsara_bottomlessmagazines", 0);
		SetCVar("samsara_noinventorycooldown", 1);
		SetCVar("samsara_pistolammo", 0);
		SetCVar("samsara_pistolstart", 0);
		SetCVar("samsara_slotmode", 0);
		SetCVar("samsara_instagibspread", 0);

		// Ammo Options
		SetCVar("samsara_max_clip", 200);
		SetCVar("samsara_max_shell", 100);
		SetCVar("samsara_max_rocket", 50);
		SetCVar("samsara_max_cell", 300);
		SetCVar("samsara_noammocap", 0);

		// Pickup Spawn Options
		SetCVar("samsara_noinvuln", 0);
		SetCVar("samsara_nounique", 0);
		SetCVar("samsara_noult", 0);
		SetCVar("samsara_skulltagspawn", 1);
		SetCVar("samsara_skulltagreplace", 0);

		// Item Options
		SetCVar("samsara_randomitems", 0);
		SetCVar("samsara_replace_computermap", 18);
		SetCVar("samsara_replace_blursphere", 0);
		SetCVar("samsara_replace_lightamplifier", 0);

		// Random Character Spawn Options
		SetCVar("samsara_misccharspawn_duke3d", 0);
		SetCVar("samsara_misccharspawn_rott", 0);
		SetCVar("samsara_misccharspawn_blood", 0);
		SetCVar("samsara_misccharspawn_strife", 0);
		SetCVar("samsara_misccharspawn_rmr", 0);
		SetCVar("samsara_misccharspawn_halflife", 0);
		SetCVar("samsara_misccharspawn_sw", 0);
		SetCVar("samsara_misccharspawn_ps", 0);
		SetCVar("samsara_misccharspawn_rr", 0);
		SetCVar("samsara_misccharspawn_quake2", 0);
		SetCVar("samsara_misccharspawn_hexen2", 0);

		// Class-Based Ability Options
		SetCVar("samsara_doomguybalance", 1);
		SetCVar("samsara_classiclaz", 0);
		SetCVar("samsara_banmorphovum", 0);
		SetCVar("samsara_fullradiusdmg", 1);
		SetCVar("samsara_permaquad", 0);
		SetCVar("samsara_permakimbo", 1);
		SetCVar("samsara_nodemonmorph", 0);
		SetCVar("samsara_notarotcardlimit", 0);
		SetCVar("samsara_nopainkillercorpseremoval", 1);
		SetCVar("samsara_descentflight", 1);
		SetCVar("samsara_deusexmovementpenalty", 1);

		// Serverside Ability Options
		SetCVar("samsara_banjetpack", 0);
		SetCVar("samsara_banwolfmove", 0);
		SetCVar("samsara_banallies", 1);
		SetCVar("samsara_nocustomgravity", 0);
		SetCVar("samsara_forcerecoil", 0);

		// Character Ban Options
		SetCVar("samsara_bandoomguy", false);
		SetCVar("samsara_banchex", false);
		SetCVar("samsara_bancorvus", false);
		SetCVar("samsara_banbj", false);
		SetCVar("samsara_banparias", false);
		SetCVar("samsara_banduke", false);
		SetCVar("samsara_banso", false);
		SetCVar("samsara_banranger", false);
		SetCVar("samsara_banfreely", false);
		SetCVar("samsara_banblake", false);
		SetCVar("samsara_bancaleb", false);
		SetCVar("samsara_banstrifeguy", false);
		SetCVar("samsara_baneleena", false);
		SetCVar("samsara_banspaceseal", false);
		SetCVar("samsara_banrebelmooncommando", false);
		SetCVar("samsara_bankatarn", false);
		SetCVar("samsara_banmooman", false);
		SetCVar("samsara_bandisruptor", false);
		SetCVar("samsara_bangrondoval", false);
		SetCVar("samsara_banfreeman", false);
		SetCVar("samsara_banwang", false);
		SetCVar("samsara_bancm", false);
		SetCVar("samsara_banjon", false);
		SetCVar("samsara_banrr", false);
		SetCVar("samsara_banq2", false);
		SetCVar("samsara_bandemoness", false);
		SetCVar("samsara_banbond", false);
		SetCVar("samsara_banpetton", false);
		SetCVar("samsara_bandaniel", false);
		SetCVar("samsara_banprisoner", false);
		SetCVar("samsara_banrtcw", false);
		SetCVar("samsara_bansarge", false);
		SetCVar("samsara_banpyrogx", false);
		SetCVar("samsara_banjcdenton", false);

		// Character Multiplier Options
		SetCVar("samsara_generaldamage", 0);
		SetCVar("samsara_generaldefense", 0);
		SetCVar("samsara_doomguydamage", 0);
		SetCVar("samsara_doomguydefense", 0);
		SetCVar("samsara_chexdamage", 0);
		SetCVar("samsara_chexdefense", 0);
		SetCVar("samsara_corvusdamage", 0);
		SetCVar("samsara_corvusdefense", 0);
		SetCVar("samsara_bjdamage", 0);
		SetCVar("samsara_bjdefense", 0);
		SetCVar("samsara_pariasdamage", 0);
		SetCVar("samsara_pariasdefense", 0);
		SetCVar("samsara_dukedamage", 0);
		SetCVar("samsara_dukedefense", 0);
		SetCVar("samsara_sodamage", 0);
		SetCVar("samsara_sodefense", 0);
		SetCVar("samsara_rangerdamage", 0);
		SetCVar("samsara_rangerdefense", 0);
		SetCVar("samsara_freelydamage", 0);
		SetCVar("samsara_freelydefense", 0);
		SetCVar("samsara_blakedamage", 0);
		SetCVar("samsara_blakedefense", 0);
		SetCVar("samsara_calebdamage", 0);
		SetCVar("samsara_calebdefense", 0);
		SetCVar("samsara_strifeguydamage", 0);
		SetCVar("samsara_strifeguydefense", 0);
		SetCVar("samsara_eleenadamage", 0);
		SetCVar("samsara_eleenadefense", 0);
		SetCVar("samsara_spacesealdamage", 0);
		SetCVar("samsara_spacesealdefense", 0);
		SetCVar("samsara_rebelmooncommandodamage", 0);
		SetCVar("samsara_rebelmooncommandodefense", 0);
		SetCVar("samsara_katarndamage", 0);
		SetCVar("samsara_katarndefense", 0);
		SetCVar("samsara_moomandamage", 0);
		SetCVar("samsara_moomandefense", 0);
		SetCVar("samsara_disruptordamage", 0);
		SetCVar("samsara_disruptordefense", 0);
		SetCVar("samsara_grondovaldamage", 0);
		SetCVar("samsara_grondovaldefense", 0);
		SetCVar("samsara_freemandamage", 0);
		SetCVar("samsara_freemandefense", 0);
		SetCVar("samsara_wangdamage", 0);
		SetCVar("samsara_wangdefense", 0);
		SetCVar("samsara_cmdamage", 0);
		SetCVar("samsara_cmdefense", 0);
		SetCVar("samsara_jondamage", 0);
		SetCVar("samsara_jondefense", 0);
		SetCVar("samsara_rrdamage", 0);
		SetCVar("samsara_rrdefense", 0);
		SetCVar("samsara_q2damage", 0);
		SetCVar("samsara_q2defense", 0);
		SetCVar("samsara_demonessdamage", 0);
		SetCVar("samsara_demonessdefense", 0);
		SetCVar("samsara_bonddamage", 0);
		SetCVar("samsara_bonddefense", 0);
		SetCVar("samsara_pettondamage", 0);
		SetCVar("samsara_pettondefense", 0);
		SetCVar("samsara_danieldamage", 0);
		SetCVar("samsara_danieldefense", 0);
		SetCVar("samsara_prisonerdamage", 0);
		SetCVar("samsara_prisonerdefense", 0);
		SetCVar("samsara_rtcwdamage", 0);
		SetCVar("samsara_rtcwdefense", 0);
		SetCVar("samsara_sargedamage", 0);
		SetCVar("samsara_sargedefense", 0);
		SetCVar("samsara_pyrogxdamage", 0);
		SetCVar("samsara_pyrogxdefense", 0);
		SetCVar("samsara_jcdentondamage", 0);
		SetCVar("samsara_jcdentondefense", 0);
		break;

		case 101: // Meleemario's Settings

		// General Options
		SetCVar("samsara_jumpmod", 0);
		SetCVar("samsara_armormode", 1);
		SetCVar("samsara_speedmod", 0);
		SetCVar("samsara_nohealth", false);
		SetCVar("samsara_nohealthcap", false);
		SetCVar("samsara_nomonologues", true);
		SetCVar("samsara_experiencegain", 8);
		SetCVar("samsara_dukesoundboard", false);
		SetCVar("samsara_microwavepop", 0);
		SetCVar("samsara_unmakerartifacts", 3);
		SetCVar("samsara_strifeupgrades", 3);
		SetCVar("samsara_mp_startingGold", 5000);
		SetCVar("samsara_deusexstartingskills", 0);
		SetCVar("samsara_randomcharacters", 25);
		SetCVar("samsara_misccharacterspawnmode", 0);
		SetCVar("samsara_notimefreeze", true);
		SetCVar("samsara_merrychristmas", false);
		SetCVar("samsara_merrychristmasdecorations", true);

		// LMS Options
		SetCVar("samsara_lmsrules", 0);
		SetCVar("samsara_lmslife", 0);
		SetCVar("samsara_lmsult", 0);
		SetCVar("samsara_lmsuniques", 0);
		SetCVar("samsara_lmsskulltag", 0);

		// Turkey Puncher Options
		SetCVar("samsara_superturboturkeypuncher3000", 0);
		SetCVar("samsara_superturboturkeyfrequency", 35);
		SetCVar("samsara_superturboturkeylimit", 0);

		// Party Mode Options
		SetCVar("samsara_peoplediewhentheyarekilled", 0);
		SetCVar("samsara_permaweaponlevel2", 0);

		// Weapon Options
		SetCVar("samsara_permault", 1);
		SetCVar("samsara_extraweapons", 1);
		SetCVar("samsara_uniquestart", 0);
		SetCVar("samsara_chainsawstart", 0);
		SetCVar("samsara_shotgunstart", 0);
		SetCVar("samsara_backpackstart", 0);
		SetCVar("samsara_reloadmode", 1);
		SetCVar("samsara_bottomlessmagazines", 0);
		SetCVar("samsara_noinventorycooldown", 1);
		SetCVar("samsara_pistolammo", 0);
		SetCVar("samsara_pistolstart", 0);
		SetCVar("samsara_slotmode", 0);
		SetCVar("samsara_instagibspread", 0);

		// Ammo Options
		SetCVar("samsara_max_clip", 200);
		SetCVar("samsara_max_shell", 100);
		SetCVar("samsara_max_rocket", 50);
		SetCVar("samsara_max_cell", 300);
		SetCVar("samsara_noammocap", 1);

		// Pickup Spawn Options
		SetCVar("samsara_noinvuln", 0);
		SetCVar("samsara_nounique", 0);
		SetCVar("samsara_noult", 0);
		SetCVar("samsara_skulltagspawn", 25);
		SetCVar("samsara_skulltagreplace", 1);

		// Item Options
		SetCVar("samsara_randomitems", 80);
		SetCVar("samsara_replace_computermap", 0);
		SetCVar("samsara_replace_blursphere", 0);
		SetCVar("samsara_replace_lightamplifier", 0);

		// Random Character Spawn Options
		SetCVar("samsara_misccharspawn_duke3d", 1);
		SetCVar("samsara_misccharspawn_rott", 1);
		SetCVar("samsara_misccharspawn_blood", 1);
		SetCVar("samsara_misccharspawn_strife", 1);
		SetCVar("samsara_misccharspawn_rmr", 1);
		SetCVar("samsara_misccharspawn_halflife", 1);
		SetCVar("samsara_misccharspawn_sw", 1);
		SetCVar("samsara_misccharspawn_ps", 1);
		SetCVar("samsara_misccharspawn_rr", 1);
		SetCVar("samsara_misccharspawn_quake2", 1);
		SetCVar("samsara_misccharspawn_hexen2", 1);

		// Class-Based Ability Options
		SetCVar("samsara_doomguybalance", 1);
		SetCVar("samsara_classiclaz", 0);
		SetCVar("samsara_banmorphovum", 0);
		SetCVar("samsara_fullradiusdmg", 1);
		SetCVar("samsara_permaquad", 1);
		SetCVar("samsara_permakimbo", 0);
		SetCVar("samsara_nodemonmorph", 0);
		SetCVar("samsara_notarotcardlimit", 0);
		SetCVar("samsara_nopainkillercorpseremoval", 0);
		SetCVar("samsara_descentflight", 1);
		SetCVar("samsara_deusexmovementpenalty", 1);

		// Serverside Ability Options
		SetCVar("samsara_banjetpack", 0);
		SetCVar("samsara_banwolfmove", 0);
		SetCVar("samsara_banallies", 0);
		SetCVar("samsara_nocustomgravity", 1);
		SetCVar("samsara_forcerecoil", 0);

		// Character Ban Options
		SetCVar("samsara_bandoomguy", false);
		SetCVar("samsara_banchex", false);
		SetCVar("samsara_bancorvus", false);
		SetCVar("samsara_banbj", false);
		SetCVar("samsara_banparias", false);
		SetCVar("samsara_banduke", false);
		SetCVar("samsara_banso", false);
		SetCVar("samsara_banranger", false);
		SetCVar("samsara_banfreely", false);
		SetCVar("samsara_banblake", false);
		SetCVar("samsara_bancaleb", false);
		SetCVar("samsara_banstrifeguy", false);
		SetCVar("samsara_baneleena", false);
		SetCVar("samsara_banspaceseal", false);
		SetCVar("samsara_banrebelmooncommando", false);
		SetCVar("samsara_bankatarn", false);
		SetCVar("samsara_banmooman", false);
		SetCVar("samsara_bandisruptor", false);
		SetCVar("samsara_bangrondoval", false);
		SetCVar("samsara_banfreeman", false);
		SetCVar("samsara_banwang", false);
		SetCVar("samsara_bancm", false);
		SetCVar("samsara_banjon", false);
		SetCVar("samsara_banrr", false);
		SetCVar("samsara_banq2", false);
		SetCVar("samsara_bandemoness", false);
		SetCVar("samsara_banbond", false);
		SetCVar("samsara_banpetton", false);
		SetCVar("samsara_bandaniel", false);
		SetCVar("samsara_banprisoner", false);
		SetCVar("samsara_banrtcw", false);
		SetCVar("samsara_bansarge", false);
		SetCVar("samsara_banpyrogx", false);
		SetCVar("samsara_banjcdenton", false);

		// Character Multiplier Options
		SetCVar("samsara_generaldamage", 0);
		SetCVar("samsara_generaldefense", 0);
		SetCVar("samsara_doomguydamage", 0);
		SetCVar("samsara_doomguydefense", 0);
		SetCVar("samsara_chexdamage", 0);
		SetCVar("samsara_chexdefense", 0);
		SetCVar("samsara_corvusdamage", 0);
		SetCVar("samsara_corvusdefense", 0);
		SetCVar("samsara_bjdamage", 0);
		SetCVar("samsara_bjdefense", 0);
		SetCVar("samsara_pariasdamage", 0);
		SetCVar("samsara_pariasdefense", 0);
		SetCVar("samsara_dukedamage", 0);
		SetCVar("samsara_dukedefense", 0);
		SetCVar("samsara_sodamage", 0);
		SetCVar("samsara_sodefense", 0);
		SetCVar("samsara_rangerdamage", 0);
		SetCVar("samsara_rangerdefense", 0);
		SetCVar("samsara_freelydamage", 0);
		SetCVar("samsara_freelydefense", 0);
		SetCVar("samsara_blakedamage", 0);
		SetCVar("samsara_blakedefense", 0);
		SetCVar("samsara_calebdamage", 0);
		SetCVar("samsara_calebdefense", 0);
		SetCVar("samsara_strifeguydamage", 0);
		SetCVar("samsara_strifeguydefense", 0);
		SetCVar("samsara_eleenadamage", 0);
		SetCVar("samsara_eleenadefense", 0);
		SetCVar("samsara_spacesealdamage", 0);
		SetCVar("samsara_spacesealdefense", 0);
		SetCVar("samsara_rebelmooncommandodamage", 0);
		SetCVar("samsara_rebelmooncommandodefense", 0);
		SetCVar("samsara_katarndamage", 0);
		SetCVar("samsara_katarndefense", 0);
		SetCVar("samsara_moomandamage", 0);
		SetCVar("samsara_moomandefense", 0);
		SetCVar("samsara_disruptordamage", 0);
		SetCVar("samsara_disruptordefense", 0);
		SetCVar("samsara_grondovaldamage", 0);
		SetCVar("samsara_grondovaldefense", 0);
		SetCVar("samsara_freemandamage", 0);
		SetCVar("samsara_freemandefense", 0);
		SetCVar("samsara_wangdamage", 0);
		SetCVar("samsara_wangdefense", 0);
		SetCVar("samsara_cmdamage", 0);
		SetCVar("samsara_cmdefense", 0);
		SetCVar("samsara_jondamage", 0);
		SetCVar("samsara_jondefense", 0);
		SetCVar("samsara_rrdamage", 0);
		SetCVar("samsara_rrdefense", 0);
		SetCVar("samsara_q2damage", 0);
		SetCVar("samsara_q2defense", 0);
		SetCVar("samsara_demonessdamage", 0);
		SetCVar("samsara_demonessdefense", 0);
		SetCVar("samsara_bonddamage", 0);
		SetCVar("samsara_bonddefense", 0);
		SetCVar("samsara_pettondamage", 0);
		SetCVar("samsara_pettondefense", 0);
		SetCVar("samsara_danieldamage", 0);
		SetCVar("samsara_danieldefense", 0);
		SetCVar("samsara_prisonerdamage", 0);
		SetCVar("samsara_prisonerdefense", 0);
		SetCVar("samsara_rtcwdamage", 0);
		SetCVar("samsara_rtcwdefense", 0);
		SetCVar("samsara_sargedamage", 0);
		SetCVar("samsara_sargedefense", 0);
		SetCVar("samsara_pyrogxdamage", 0);
		SetCVar("samsara_pyrogxdefense", 0);
		SetCVar("samsara_jcdentondamage", 0);
		SetCVar("samsara_jcdentondefense", 0);
		break;
	}
}

script "SamsaraReactionTimeChecker" (void) { SetResultValue(GetActorProperty(0, APROP_ReactionTime)); }

Script "DisableVoodooDoll" (void)
{
	if(ClassifyActor(0) & ACTOR_VOODOODOLL)
		SetActorState(0,"DisableVoodooDoll",true);
}
