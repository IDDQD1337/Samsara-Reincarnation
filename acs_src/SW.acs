#library "SW"
#include "zcommon.acs"
#include "commonfuncs.h"

#define PTID_START 2000
#define MAGIC_CIRCLE_BASE 3000
#define RAILINITTID 9000

function int sqrt_z(int number)
{
	if(number <= 3)
	{
		if(number > 0)
		{
			return 1;
		}
		return 0;
	}
	
	int oldAns = number >> 1,                     
	    newAns = (oldAns + number / oldAns) >> 1; 
	
	while(newAns < oldAns)
	{
		oldAns = newAns;
		newAns = (oldAns + number / oldAns) >> 1;
	}

	return oldAns;
}

function int DecideUziReload(int uzi_t) {
	int res = 0;
	int hasbackpack = 0;
	if(GetAmmoCapacity("Clip") == 400)
		hasbackpack = 1;
	if(!uzi_t) { // single uzi
		if(CheckInventory("Clip") && !(CheckInventory("Clip") % 50)) { // below if statements fix causing a reload when walking over ammo bug
			if((hasbackpack && CheckInventory("Clip") == 400) || (!hasbackpack && CheckInventory("Clip") == 200))
				res = 0;
			else
				res = 1;
		}
	}
	else {
		if(CheckInventory("Clip") && !(CheckInventory("Clip") % 100)) {
			if((hasbackpack && CheckInventory("Clip") == 400) || (!hasbackpack && CheckInventory("Clip") == 200))
				res = 0;
			else
				res = 1;
		}	
	}
	return res;
}

Script 710 (void) // TID change hack for Wang Clone
{
	Thing_ChangeTID(3000, 3000+PlayerNumber());
}


Script 711 (void) // Remove wang if one exists
{
	Thing_Damage(3000+PlayerNumber(), 999, MOD_EXIT);
}

Script 713 (int DoubleReloading) {
    if(DecideUziReload(1) && !CheckInventory("ReloadSignal"))
		DoubleReloading = 1;
	SetResultValue(DoubleReloading);
}

script 719 (void)
{
    while (CheckInventory("LoWangTauntCooldown") > 0)
    {
        Delay(35);
        TakeInventory("LoWangTauntCooldown", 1);
    }
}

Script 720 (int type) NET
{
	if(CheckInventory("LoWangBallgag"))
	{
		TakeInventory("LoWangBallgag", 1);
		Print(s:"Ballgag Off");
	}
	else
	{
		GiveInventory("LoWangBallGag", 1);
		Print(s:"Ballgag On");
	}
}

Script 740 (int Reloading) {
    if(DecideUziReload(0) && !CheckInventory("ReloadSignal"))
		Reloading = 1;
	SetResultValue(Reloading);
}

script 741 (int ButtonPress) {
    ButtonPress = 0;
    int FireButton1 = GetPlayerInput(-1, INPUT_BUTTONS);
    if (FireButton1 & BT_ATTACK)
	    ButtonPress = 1;
   
    SetResultValue(ButtonPress);
}

// Decides mode switch for Missile Launcher
// Missilemode 1 = heat seeker, 2 = nuke
Script 742 (void) {
	int res = CheckInventory("MissileMode");
	
	res = (res + 1) % 3;
	
	if(res == 1) {
		if(!CheckInventory("HeatSeekerCharge")) { // if we don't have any heatseeker, don't change mode to this
			if(!CheckInventory("GotNuke")) // if we have no nukes at all also don't bother
				res = -1;
			else
				res = 2;
		} // else res can be kept as 1
	}
	else if(res == 2) {
		if(!CheckInventory("GotNuke")) // if I don't have nuke just switch over to normal mode
			res = 0;
	}
	
	TakeInventory("MissileMode", 3);
	if(res != -1)
		GiveInventory("MissileMode", res);
	SetResultValue(res);
}

Script 743 (void) {
	int res = 0;
	if(CheckInventory("HeatSeekerCharge") || CheckInventory("GotNuke"))
		res = 1;
	SetResultValue(res);
}

Script 744 (int density) {
	Thing_ChangeTID(0, RAILINITTID);
	SetactivatorToTarget(RAILINITTID);
	int ptid = ActivatorTID();
	int newtid = ptid + RAILINITTID;
	Thing_ChangeTID(RAILINITTID, newtid);
	
    int plX; int plY;  int plZ;
    int grX; int grY;  int grZ;
    int vX;  int vY;   int vZ;
    int nX;  int nY;   int nZ;
    int bX;  int bY;   int bZ;
    int magnitude;
    int pointCount;
    int pointOffset;
    plX = GetActorX(ptid); grX = GetActorX(newtid);
    plY = GetActorY(ptid); grY  = GetActorY(newtid);
    plZ = GetActorZ(ptid)+32.0; grZ  = GetActorZ(newtid);
	int faceangle = VectorAngle(grX - plX, grY - plY);
    vX   = grX - plX;       vY   = grY - plY;       vZ   = grZ - plZ;

    magnitude = magnitudeThree(vX >> 16, vY >> 16, vZ >> 16);

    pointCount  = magnitude / density;
    pointOffset = magnitude - (pointCount * density);

    if (magnitude != 0)
    {
        nX = vX / magnitude; nY = vY / magnitude; nZ = vZ / magnitude;

        int i; int j;
        for (i = 1; i < pointCount; i++)
        {
            j = (i * density) + pointOffset;

            bX = (nX * j) + plX;
            bY = (nY * j) + plY;
            bZ = (nZ * j) + plZ;

            Spawn("SWRailTrail", bX, bY, bZ, 0, faceangle >> 8);
        }
    }
}

script 745 (int actor_num, int radius) {
     int angle = GetUserVariable(0, "user_angle") * 360; 
     Thing_ChangeTID(0, MAGIC_CIRCLE_BASE);
	 SetActivatorToTarget(0);
	 int owner = ActivatorTID();
	 // the below arrangement ensures each and every fireball gets a unique TID relative to the owner's tid
	 int newtid =  MAGIC_CIRCLE_BASE + ((owner % 100) + 1) * 12 + actor_num;
	 Thing_ChangeTID(MAGIC_CIRCLE_BASE, newtid);
	 
	 int cx = radius * cos(angle) + GetActorX(owner);
	 int cy = radius * sin(angle) + GetActorY(owner);
	 int cz = GetActorZ(owner) + 32.125;
	 
	 SetActorPosition(newtid, cx, cy, cz, 0);
}

Script 746 (void) {
	int res = 0;
	SetActivatorToTarget(0);
    if(GetActorProperty(0, APROP_HEALTH) <= 0 || !CheckInventory("MagicCircleCounter")) {
		res = 1;
		TakeInventory("MagicCircleCounter", 50);
	}
	SetResultValue(res);
}

// CRUCIAL SCRIPT!!!!
Script 747 ENTER {
	If(CheckInventory("SWClass") == true)
	{
	Thing_ChangeTID(0, PTID_START + PlayerNumber());
	TakeInventory("MagicCircleCounter", 50);
	TakeInventory("MagicCircleSpawner", 999);	
	}
}

Script 748 (int mode) {
	if(!mode)
		SetActorProperty(0, APROP_SPEED, 6.0);
	else {
		GiveInventory("SWFistYell", mode);
		if(CheckInventory("SWFistYell") >= 18) {
			GiveInventory("LoWangFrustratedTaunt", 1);
			TakeInventory("SWFistYell", 12);
		}
	}
}

str FortuneCookieText[22] = { "Fortune Say: Sorry, you no win this time, try again.",
                              "Fortune Say: Baseball wrong. Man with 4 balls cannot walk.",
							  "Fortune Say: No man is island, except Lo Wang.",
							  "Fortune Say: You should kill all business associates.",
							  "Fortune Say: You should not scratch yourself there.",
							  "Fortune Say: Man who stand on toilet, high on pot.",
							  "Fortune Say: Man who buy drowned cat pay for wet pussy.",
							  "Fortune Say: Don't you know you the scum of society?!",
							  "Fortune Say: Man trapped in pantry has ass in jam.",
							  "Fortune Say: You never going to score.",
							  "Fortune Say: You try harder get along. Be a nice man.",
							  "Fortune Say: 26-31-43-82-16-29",
							  "Fortune Say: Your chi attracts many chicks.",
							  "Fortune Say: Man who fart in church sit in own pew.",
							  "Fortune Say: It is better to have loved and lost than to have loved and got syphilis",
							  "Fortune Say: There is much death in future.",
							  "Fortune Say: (c)1997, 3DRealms fortune cookie company.",
							  "Fortune Say: Courtesy is contagious. So is Gonorrhea",
							  "Fortune Say: Having sex is like playing bridge, If you don't have a good partner, you better have a good hand.",
							  "Fortune Say: Laugh and the world laughs with you. Cry and the world laughs at you.",
							  "Fortune Say: No one ever died from a broken heart. But a heart sliced from their chest while they looked on screaming? Not gonna lie. That's killed a couple people.",
							  "Fortune Say: ERROR 404 - FORTUNE NOT FOUND"
                              };

Script 8432 (void) ClientSide
{
        int cookietext = random(0, 21);
	    SetFont("SWCOOKIE");
		SetHudSize(640, 480, 1);
	    HudMessage(s:FortuneCookieText[cookietext]; HUDMSG_FADEOUT, 0, CR_UNTRANSLATED, 320.4, 360.0, 5.0, 1.0);
		SetHudSize(0, 0, 0);
		SetFont("SMALLFONT");
}

Script "StickyLocation" (int swicheroo)
{
	int currentx = GetActorX(0);
	int currenty = GetActorY(0);
	int currentz = GetActorZ(0);
	SetActivator(0, AAPTR_Tracer);
	int monsterx = GetActorX(0);
	int monstery = GetActorY(0);
	int monsterz = GetActorZ(0);
	
	Switch(swicheroo)
	{
		Case 0:
			SetResultValue(0);
			break;
	
		Case 1:
			if(GetActorProperty(0,APROP_Radius) < 20)
				SetResultValue(5);
			
			else
				SetResultValue(GetActorProperty(0,APROP_Radius) - 10);
			
			break;
			
		Case 2:
			SetResultValue((monsterz - currentz) >> 16);
			break;

		Case 3:
			int currentangle = GetActorAngle (0);
			int vang = VectorAngle(monsterx - currentx, monstery - currenty);
			int angle = ((vang - currentangle) % 1.0) / 182; //haha, lazy
			SetResultValue(angle);
			break;
			
		Case 4:
			if(GetActorProperty(0, APROP_Health) <= 0)
				SetResultValue(1);
				
			else
				SetResultValue(0);
	}
}	

// creating this for real infinite ammo
Script "SW_FireRocketLauncher" (int mode)
{
	if(!GetCvar("sv_infiniteammo"))
	{
		if(mode == 1)
		{
			TakeInventory("RocketAmmo", 30);
			TakeInventory("GotNuke", 1);
			TakeInventory("SWNuke", 1);
		}
		else
			TakeInventory("HeatSeekerCharge", 1);
	}
	SetResultValue(1);
}