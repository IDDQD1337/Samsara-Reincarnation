Script "Samsara_Shrinker" (int use, int value)
{
	int activator, result, newActivatorTid;
	if(use == 1)
	{
		if(CheckInventory("ShrunkToken") == 0)
		{
			int oldTID, target;
			oldTID = ActivatorTID();
			target = UniqueTID();
			Thing_ChangeTID(0, target);
			SetActivator(0, AAPTR_Master);
			int health = GetActorProperty(0, APROP_Health);
			SetActivator(target);
			Thing_ChangeTID(target, oldTID);
			GiveInventory("ShrunkToken", 1);
			SetActorProperty(0, APROP_Health, 1);
			for(int c = 0; c < 385; c++)
			{
				if(GetActorProperty(0, APROP_Health) <= 0 || CheckInventory("SquishToken"))
				{
					terminate;
				}
				if(c == 384)
				{
					TakeInventory("ShrunkToken", 1);
					GiveInventory("ShrunkHealthTokens", health);
					SetActorState(0, "Grow", true);
					terminate;
				}
				Delay(1);
			}
		}
	}
	else if(use == 2)
	{
		//if(strright(GetActorClass(0),7) == "_Shrink") { SetResultValue(0); terminate; }	
		activator = ActivatorTid();
		newActivatorTid = UniqueTid();
		int oldMonsterTid = UniqueTid();
		Thing_ChangeTid(0,newActivatorTid);
		SetActivator(0,AAPTR_Master);
		SetActorProperty(newActivatorTid,APROP_Health,CheckInventory("ShrunkHealthTokens"));
		SetActivator(0,AAPTR_Master);
		Thing_ChangeTid(0,oldMonsterTid);
		SetActivator(0,AAPTR_Master);
		GiveActorInventory(oldMonsterTid,"RemoveMe",1);
		SetPointerExt(AAPTR_Master,0,newActivatorTid);
		SetActivator(newActivatorTid,AAPTR_Default);
		Thing_ChangeTid(newActivatorTid,activator);
		SetActivator(0,AAPTR_Master);
	}
	else if(use == 3)
	{
		SetActivatorToTarget(0);
		
		if(ClassifyActor(0) != 34)
			SetResultValue(0);
			
		else
			SetResultValue(1);
	}
}

Script "Samsara_Shrinker_Stomp" (void)
{
	int index;
	str weapon = GetWeapon();
	GiveInventory("Duke3D_MightyStomp", 1);
	GiveInventory("DukeKicking", 1);
	SetWeapon("Duke3D_MightyStomp");
	Delay(20);
	TakeInventory("DukeKicking", 1);
	TakeInventory("DukeStomp", 1);
	SetWeapon(weapon);
	terminate;
}

Script "Samsara_Expander" (int use)
{
	if(use == 0)
	{
		SetActivator(0, AAPTR_Tracer);
		Thing_Damage2(0,15,"ExpanderDMG");
	}
	else if(use == 1)
	{
		SetResultValue(CheckInventory("ExpanderGrowthX"));
	}
	else if(use == 2)
	{
		SetResultValue(CheckInventory("ExpanderGrowthY"));
	}
	else if(use == 3)
	{
		SetResultValue(CheckInventory("ExpanderDoubleX"));
	}
	else if(use == 4)
	{
		SetActivator(0, AAPTR_Master);
		int height = GetActorProperty(0, APROP_Height) * 4;
		int radius = GetActorProperty(0, APROP_Radius);
		int health = GetActorProperty(0, APROP_SpawnHealth);
		int damage = FixedMul((height + radius) / 2,FixedMul(1.75,FixedDiv(health+1000,1000))); 
		SetResultValue(damage>>16);
	}
}

int placementmatrices[8][2] = 
{
	{ 64, 0 },
	{ 0, 64 },
	{ 64, 64 },
	{ 64, -64 },
	{ -64, 0 },
	{ 0, -64 },
	{ -64, -64 },
	{ -64, 64 }
};

Script "Duke3DEnemyMinionSpawner" (void)
{
	int draw = random(1,28);
	int matrice = random(0,7);
	int newmatrice, newestmatrice; // I'm in a rush, okay?
	int mixerloaded = GetCVar("samsara_mixerloaded");
	
	if (!mixerloaded)
		terminate;
		
	if(draw < 16)
	{
		Spawn("DukeNukemTeleport", GetActorX(0) + 1.0*placementmatrices[matrice][0], GetActorY(0) + 1.0*placementmatrices[matrice][1], GetActorZ(0) + 24.0, 0, GetActorAngle(0));
		
		Spawn("Zombieman", GetActorX(0) + 1.0*placementmatrices[matrice][0], GetActorY(0) + 1.0*placementmatrices[matrice][1], GetActorZ(0), 0, GetActorAngle(0));	
	}
	else if(draw < 24)
	{
		newmatrice = random(0,7);
		if(newmatrice == matrice)
			{
				if(newmatrice == 7)
					newmatrice = 0;
				else
					newmatrice = matrice-1;
			}
			
		Spawn("DukeNukemTeleport", GetActorX(0) + 1.0*placementmatrices[matrice][0], GetActorY(0) + 1.0*placementmatrices[matrice][1], GetActorZ(0) + 24.0, 0, GetActorAngle(0));
		Spawn("DukeNukemTeleport", GetActorX(0) + 1.0*placementmatrices[newmatrice][0], GetActorY(0) + 1.0*placementmatrices[newmatrice][1], GetActorZ(0) + 24.0, 0, GetActorAngle(0));

		Spawn("Zombieman", GetActorX(0) + 1.0*placementmatrices[matrice][0], GetActorY(0) + 1.0*placementmatrices[matrice][1], GetActorZ(0), 0, GetActorAngle(0));
		Spawn("Zombieman", GetActorX(0) + 1.0*placementmatrices[newmatrice][0], GetActorY(0) + 1.0*placementmatrices[newmatrice][1], GetActorZ(0), 0, GetActorAngle(0));
	}
	else if(draw <= 28)
	{
		newmatrice = random(0,7);
		if(newestmatrice == matrice || newestmatrice == newmatrice)
		{
			if(newmatrice == 7 && matrice == 0)
				newestmatrice = 3;
			else if(newmatrice == 0 && matrice == 7)
				newestmatrice = 3;
			else if(newmatrice+1 == matrice && newmatrice != 0)
				newestmatrice = newmatrice-1;
			else if(matrice+1 == newmatrice && matrice != 0)
				newestmatrice = matrice-1;
			else if(newmatrice+1 == matrice && newmatrice == 0)
				newestmatrice = 7;
			else if(matrice+1 == newmatrice && matrice == 0)
				newestmatrice = 7;
		}
			
		Spawn("DukeNukemTeleport", GetActorX(0) + 1.0*placementmatrices[matrice][0], GetActorY(0) + 1.0*placementmatrices[matrice][1], GetActorZ(0) + 24.0, 0, GetActorAngle(0));
		Spawn("DukeNukemTeleport", GetActorX(0) + 1.0*placementmatrices[newmatrice][0], GetActorY(0) + 1.0*placementmatrices[newmatrice][1], GetActorZ(0) + 24.0, 0, GetActorAngle(0));
		Spawn("DukeNukemTeleport", GetActorX(0) + 1.0*placementmatrices[newestmatrice][0], GetActorY(0) + 1.0*placementmatrices[newestmatrice][1], GetActorZ(0) + 24.0, 0, GetActorAngle(0));
		
		Spawn("Zombieman", GetActorX(0) + 1.0*placementmatrices[matrice][0], GetActorY(0) + 1.0*placementmatrices[matrice][1], GetActorZ(0), 0, GetActorAngle(0));
		Spawn("Zombieman", GetActorX(0) + 1.0*placementmatrices[newmatrice][0], GetActorY(0) + 1.0*placementmatrices[newmatrice][1], GetActorZ(0), 0, GetActorAngle(0));
		Spawn("Zombieman", GetActorX(0) + 1.0*placementmatrices[newestmatrice][0], GetActorY(0) + 1.0*placementmatrices[newestmatrice][1], GetActorZ(0), 0, GetActorAngle(0));
	}
}

script "DukeResourceDrain" (int dukeshit) //214
{
    switch(dukeshit)
    {
      case 1:
        if (CheckInventory("DukeFlying") == 1)
        {
			if(CheckInventory("DukeJPMotor") < 1)
			{
				GiveInventory("DukeJPMotor",1);
				PlaySound(0,"duke/jetpackidle",CHAN_BODY,1.0,true,ATTN_NORM);
			}
            
			if (CheckInventory("DukeJetpackFuel") > 0 || CheckInventory("SamsaraHasInfiniteInventory"))
            {
                delay(15);
				if (CheckInventory("SamsaraHasInfiniteInventory"))
				{
					restart;
				}
				else
                TakeInventory("DukeJetpackFuel",1);
                restart;
            }
            else
            {
                TakeInventory("DukeFlying",1);
                TakeInventory("DukePetJack",1);
				TakeInventory("DukeJPMotor",1);
				GiveInventory("DukeJetPackIdleRemover",1);
            }
        }
		else
		{
			if(CheckInventory("DukeJPMotor") > 0)
			{
				TakeInventory("DukeJPMotor",1);
				GiveInventory("DukeJetPackIdleRemover",1);
			}
		}
        break;
        
      case 2:
        if (CheckInventory("DukeVision") == 1)
        {
            if (CheckInventory("DukeVisionFuel") > 0 || CheckInventory("SamsaraHasInfiniteInventory"))
            {
                delay(10);
				if (CheckInventory("SamsaraHasInfiniteInventory"))
				{
					restart;
				}
				else
                TakeInventory("DukeVisionFuel",1);
                restart;
            }
            else
            {
                TakeInventory("DukeVision",1);
                TakeInventory("PowerLightAmp",1);
            }
        }
        break;

      case 3:
        if (CheckInventory("DukeSteroidsActive") == 1)
        {
            if (CheckInventory("DukeSteroidsFuel") > 0 || CheckInventory("SamsaraHasInfiniteInventory"))
            {
                delay(4);
				if (CheckInventory("SamsaraHasInfiniteInventory") || !CheckInventory("DukeSteroidsActive"))
				{
					restart;
				}
				else
                TakeInventory("DukeSteroidsFuel",1);
                restart;
            }
            else
            {
                TakeInventory("DukeSteroidsActive",1);
                TakeInventory("DukeSteroidsSpawnRemove",1);
                TakeInventory("DukeSteroidsSpeed",1);
                TakeInventory("DukeSteroidsDamage",1);
            }
        }
        break;
    }
}

script "DukeSteroidsSoundLoop" (void)
{
    int soundtimer = 0;

    while (CheckInventory("DukeSteroidsActive"))
    {
        if (soundtimer >= 9)
        {
            LocalAmbientSound("duke/steroidsactive", 127);
            soundtimer = 0;
        }

        soundtimer++;

        Delay(1);
    }
}

script "DukeTauntCooldown" (void)  //205
{
    while (CheckInventory("DukeTauntCooldown") > 0)
    {
        Delay(35);
        TakeInventory("DukeTauntCooldown", 1);
    }
}

script "HolodukeCooldown" (void) //207
{
    if (CheckInventory("HolodukeCooldown") > 0)
    {
        delay(35);
        TakeInventory("HolodukeCooldown",1);
        restart;
    }
}

Script "DukeEnforcerSpit" (void) CLIENTSIDE //4110
{
	int i;
	int spatOnNum;
	
	for(i = 0; i < 17; i++)
	{
		spatOnNum = strparam(s:"SPATON", d:i);
		SetHudSize(214,200,0);SetFont(spatOnNum);HudMessage(s:"A";HUDMSG_PLAIN,100+PlayerNumber(),0,107.0,100.0,1.0);
		Delay(3);
	}
	
	spatOnNum = strparam(s:"SPATON", d:i);
	
	SetHudSize(214,200,0);SetFont(spatOnNum);HudMessage(s:"A";HUDMSG_PLAIN,100+PlayerNumber(),0,107.0,100.0,0.3);
	Delay(3);
	
	SetHudSize(214,200,0);HudMessage(s:"";HUDMSG_PLAIN,100+PlayerNumber(),0,107.0,100.0,0.1);	
	Delay(2);	
}
