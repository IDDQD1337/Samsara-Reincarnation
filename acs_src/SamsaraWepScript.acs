script "Doom64_UnMaker" (int class, int slot, int dropped)
{
    int givingBFG, givingUnmaker;

    int giveartifacts = isInvasion() || !(isCoop() || isSinglePlayer());

    int stay = GetCVar("sv_weaponstay") && !dropped;
    int ultStay = GetCVar("sams_permault") && !dropped;

    switch (slot)
    {
      case SLOT_BFG9000:
	    if (!CheckInventory("B.F.G. 9000")
         || (!ultStay && (GetAmmoCapacity("Cell") > CheckInventory("Cell"))))
        {
            givingBFG = 1;
        }
		
        if (givingBFG)
        {
            GiveInventory("B.F.G. 9000", 1);
        }

        if (!CheckInventory("Doom64_IHaveUnmaker")
         || (!ultStay && (GetAmmoCapacity("Cell") > CheckInventory("Cell"))))
        {
            givingUnmaker = 1;
        }

        if (givingUnmaker)
        {
            GiveInventory("Doom64_IHaveUnmaker", 1);
			GiveInventory("Samsara_ModeWeaponChange", 1);
        }

        if (giveartifacts)
        {
            GiveInventory("Doom64UnmakerArtifact", 1);
        }

        SetResultValue(givingBFG || givingUnmaker || giveartifacts);
        break;
    }
}

script "Marathon_Shotgun" (int class, int slot, int dropped)
{
    int giveboth    = isInvasion() || !(isCoop() || isSinglePlayer());
    int hasShotty   = CheckInventory("WSTE-M5 Combat Shotgun");
    int hasBoth     = CheckInventory("CanDualShotties");
    int limited     = CheckInventory("LevelLimiter");
    int limit       = GetCVar("sv_itemrespawn") || GetCVar("sv_weaponstay");
    int ammoFull    = CheckInventory("Shell") >= (GetAmmoCapacity("Shell") / ((dropped*3)+1));
    int i;
    // The above line is because of the quadupling of ammo capacity with dropped pickups
    // It's a really gross hack. I hate it. But it works.
    
    switch (slot)
    {
      case 1:
        GiveInventory("CanDualPistols", 1);
        GiveInventory("KKV-7 SMG Flechette", 1);
        break;
        
      case 3:
        if (limited && !dropped)
        {
            SetResultValue(0);
            terminate;
        }

        if ((dropped && hasShotty && ammoFull) ||
            (!dropped && (hasBoth || (hasShotty && limited)) && ammoFull))
        {
            SetResultValue(0);
            terminate;
        }
        
        GiveInventory("Shell", 8 / (!!dropped+1));
        GiveInventory("WSTE-M5 Combat Shotgun", 1);
        
        if (giveboth || (hasShotty && !dropped))
        {
            GiveInventory("CanDualShotties", 1);
        }
        
        if (limit && !dropped)
        {
            GiveInventory("LevelLimiter", 1);
        }
        SetResultValue(1);
        break;

      default:
        GiveInventory(ClassWeapons[class][slot][S_WEP], 1);

        if (ClassWeapons[class][slot][S_AMMO1] != "")
        {
            i = ammoCount(ClassWeapons[class][slot][S_AMMO1]);
            GiveInventory(ClassWeapons[class][slot][S_AMMO1], i*2);
        }

        if (ClassWeapons[class][slot][S_AMMO2] != "")
        {
            i = ammoCount(ClassWeapons[class][slot][S_AMMO2]);
            GiveInventory(ClassWeapons[class][slot][S_AMMO2], i*2);
        }

        SetResultValue(1);
        break;
    }
}

script "Quake_Quad" (int class, int slot, int dropped) //606
{
    int givingQuad, givingLG;

    int stay = GetCVar("sv_weaponstay") && !dropped;
    int ultStay = GetCVar("sams_permault") && !dropped;

    int doquad = 1;

    if (GetCVar("sams_permault") && CheckInventory("QuakeQuadTimer") > 0)//CheckQuad() > 0)
    {
        doquad = 0;
    }

    switch (slot)
    {
      case SLOT_BFG9000:
        if (doquad)
        {
            if (isLMS())
            {
                if (GetCvar("sams_permaquad") == 1)
                { GiveInventory("QuadDamageItem", 1); }
            }
            else
            {
                GiveQuad(1050);
    
                if (GetCvar("sams_permaquad") == 1)//if (isCoop() || isSinglePlayer())
                { GiveInventory("QuadDamageItem", 1); }
			
            }
            givingQuad = 1;
        }

        if (!CheckInventory("Thunderbolt")
         || (!ultStay && (GetAmmoCapacity("Cell") > CheckInventory("Cell"))))
        {
            givingLG = 1;
        }

        if (givingLG)
        {
            GiveInventory("Thunderbolt", 1);
        }

        SetResultValue(givingQuad || givingLG);
        break;
    }
}

script "RMR_Subestron" (int class, int slot, int dropped)
{
    int givingRMRPlasmaCannon, givingSubestronArm;

    int stay = GetCVar("sv_weaponstay") && !dropped;
    int ultStay = GetCVar("sams_permault") && !dropped;

    switch (slot)
    {
      case SLOT_BFG9000:
	    if (!CheckInventory(" RMR Plasma Cannon ")
         || (!ultStay && (GetAmmoCapacity("Cell") > CheckInventory("Cell"))))
        {
            givingRMRPlasmaCannon = 1;
        }
		
        if (givingRMRPlasmaCannon)
        {
            GiveInventory(" RMR Plasma Cannon ", 1);
        }

        if (!CheckInventory("Subestron Arm")
         || (!ultStay && (GetAmmoCapacity("Cell") > CheckInventory("Cell"))))
        {
            givingSubestronArm = 1;
        }

        if (givingSubestronArm)
        {
            GiveInventory("Subestron Arm", 1);
        }

        SetResultValue(givingRMRPlasmaCannon || givingSubestronArm);
        break;
    }
}

script "SW_WangHead" (int class, int slot, int dropped)
{
    int givingSWGuardianHead, givingSWNuke;

    int stay = GetCVar("sv_weaponstay") && !dropped;
    int ultStay = GetCVar("sams_permault") && !dropped;

    switch (slot)
    {
      case SLOT_BFG9000:
	    if (!CheckInventory("SWGuardianHead")
         || (!ultStay && (GetAmmoCapacity("Cell") > CheckInventory("Cell"))))
        {
            givingSWGuardianHead = 1;
        }
		
        if (givingSWGuardianHead)
        {
            GiveInventory("SWGuardianHead", 1);
        }

        if (!CheckInventory("SWNuke")       
		 || (!ultStay))
		{
            givingSWNuke = 1;
        }
		
        if (givingSWNuke)
        {
            GiveInventory("SWNuke", 1);
        }

        SetResultValue(givingSWGuardianHead || givingSWNuke);
        break;
    }
}