Script "DescentEnter" (void)
{
	if(!CheckInventory("DescentClass"))
		terminate;
	
	ACS_NamedExecuteWithResult("DescentMovement");
	ACS_NamedExecuteWithResult("DescentActions");
	ACS_NamedExecuteWithResult("DescentHUD");
}

Script "DescentActions" (void)
{
	int buttons;
	while(CheckInventory("DescentClass"))
	{
		buttons = GetPlayerInput(-1, INPUT_BUTTONS);
		
		if(buttons & BT_ATTACK) 
			GiveInventory("DescentPrimaryTrigger",1);
		else
			TakeInventory("DescentPrimaryTrigger",1);
		if(buttons & BT_ALTATTACK) 
			GiveInventory("DescentSecondaryTrigger",1);
		else
			TakeInventory("DescentSecondaryTrigger",1);
							
		Delay(1);
	}
}

Script "DescentMovement" (void)
{	
	Delay(1);
	int GZDoom = GetCvar("samsara_zscriptready");

	//Variables related to thrust horizontally
	int horizontalThrust = 0;
	int horizontalThrustX = 0;
	int horizontalThrustY = 0;

	//Variables related to vertical bobbing
	int verticalOscillate = 0;
	int verticalOscillateThreshold = 15;
	int verticalToggle = 1;
	int verticalBob = 1.0;
	int verticalThrust = 0;

	//Math - need angle, pitch, and roll
	int angle, pitch, roll;
	int sineAngle, cosineAngle, sinePitch, cosinePitch, sineRoll, cosineRoll;

	//Variables related to input and movement
	int moveSpeed = 11;
	int turnSpeed = 240;
	int maxTurn = 1680;
	int moveX, moveY, moveZ;
	int forward, side, vertical, buttons, mouseYaw, mousePitch, tilting;
	int invertedMouse = GetCvar("invertmouse");
	int sensitivityX = GZDoom ? GetCvar("m_yaw") : GetCvar("m_sensitivity");
	int sensitivityY = GZDoom ? GetCvar("m_pitch") : GetCvar("m_sensitivity");
	int mouseFinalYaw, mouseFinalPitch;

	//Camera tilting - GZDoom Only
	int turnRoll, tiltRoll;

	//Final position variables
	int velX, velY, velZ;

	//Other Stuff
	int deathCamTid, deathDirX, deathDirY, deathDirZ, deathCamDelay;
	int gimbalLock = 1;
	int gimbalDelay, rollBack, rolling, thirdPerson;

	bool isCoopGame = isCoop();

	if(PlayerIsBot(PlayerNumber())) { GiveInventory("DescentBotTrigger",1); }

	While(!PlayerIsBot(PlayerNumber()) && CheckInventory("DescentClass"))
	{
		if(ClassifyActor(0) & ACTOR_ALIVE)
		{
			int descentFlight = GetCvar("samsara_descentflight") && !isNetworkGame();
			if(!descentFlight)
				GiveInventory("DescentGravityGiver",1);
			else
				GiveInventory("DescentGravityTaker",1);
				
			if(GZDoom)
				GiveInventory("DescentThirdPersonChecker",1);
			else
			{
				if(GetPlayerChaseCam(PlayerNumber()))
					GiveInventory("DescentThirdPerson",1);
				else
					TakeInventory("DescentThirdPerson",1);
			}

			if(!CheckInventory("DescentGuidedController"))
			{
				if(descentFlight)
					SetPlayerProperty(0,1,PROP_FROZEN);
				else
					SetPlayerProperty(0,0,PROP_FROZEN);

				SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
				buttons = GetPlayerInput(-1, INPUT_BUTTONS);
				forward = GetPlayerInput(-1, INPUT_FORWARDMOVE);
				side = -GetPlayerInput(-1, INPUT_SIDEMOVE) * gimbalLock;
				vertical = GetPlayerInput(-1, INPUT_UPMOVE);
				rollBack = buttons & BT_Strafe;

				forward = forward != 0 ? sign(forward) * 1.0 : 0;
				side = side != 0 ? sign(side) * 1.0 : 0;
				vertical = vertical != 0 ? sign(vertical) * 1.0 : 0;

				if(buttons & BT_Jump)	vertical += 65536;
				if(buttons & BT_Crouch)	vertical -= 65536;
				mouseYaw = GetPlayerInput(-1, INPUT_YAW);
				mousePitch = GetPlayerInput(-1, INPUT_PITCH);
				tilting = buttons & BT_STRAFE;
			}
			else
			{
				SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
				SetPlayerProperty(0,0,PROP_FROZEN);
				buttons = 0;
				forward = 0;
				side = 0;
				vertical = 0;
				mouseYaw = 0;
				mousePitch = 0;
			}

			forward -= CheckInventory("DescentRecoil")*0.1;
			if(CheckInventory("DescentRecoil") > 0) { TakeInventory("DescentRecoil",1); }

			angle = GetActorAngle(0);
			pitch = GetActorPitch(0);
			roll = GetActorRoll(0) - tiltRoll;

			angle += FixedMul(mouseYaw,sensitivityX+1.0) * gimbalLock;
			pitch -= FixedMul((invertedMouse ? -mousePitch : mousePitch),sensitivityY+2.0) * gimbalLock;

			if(rollBack || CheckInventory("DescentRollToken")) { TakeInventory("DescentRollToken",1); rolling = -gimbalLock; }
			if(rolling != 0)
			{
				tiltRoll = 0;
				if(gimbalLock < 0)
				{
					if(abs(roll) > 0.05)
					{
						if(abs(roll) - 0.5 >= 0.5)
							roll -= 0.025;
						else
							roll += 0.025;
					}
					else
					{
						roll = 0;
						rolling = 0;
						gimbalLock *= -1;
					}
				}
				else
				{
					if(abs(roll - 0.5) > 0.05)
					{
						if(abs(roll - 0.5) - 0.5 >= 0.5)
							roll -= 0.025;
						else
							roll += 0.025;
					}
					else
					{
						roll = 0.5;
						rolling = 0;
						gimbalLock *= -1;
					}
				}
			}
			else
			{
				//Handle roll. This stuff is GZDoom only
				if(mouseYaw < 0 && tiltRoll < maxTurn)
					tiltroll += turnSpeed;
				else if(mouseYaw > 0 && tiltRoll > -maxTurn)
					tiltroll -= turnSpeed;
				else if(mouseYaw == 0)
				{
					if(abs(tiltRoll) > turnSpeed)
					{
						if(tiltRoll > 0)
							tiltRoll -= turnSpeed;
						else
							tiltRoll += turnSpeed;
					}
				}
			}

			// Clamp Pitch
			if(pitch < -0.5)			pitch += 1.0;
			else if(pitch > 0.5)		pitch -= 1.0;

			/*PrintBold(s:"Angle is: ",d:angle/182,
					s:"\nPitch is: ",d:pitch/182,
					s:"\nRoll is: ",d:roll/182);*/
					
			//Facing a vertical axis? Flip it

			if((pitch > 0.25 || pitch < -0.25) && GZDoom)
			{
				gimbalLock *= -1;
				if(angle <= 0.5)
				{
					angle += 0.5;
					if(roll >= 0.5)
						roll -= 0.5;
					else if(roll < 0.5)
						roll += 0.5;
				}
				else if(angle > 0.5) 	
				{
					angle -= 0.5;
					if(roll >= 0.5)
						roll += 0.5;
					else if(roll < 0.5)
						roll -= 0.5;
				}
			}

			//Set the rotation to the new ones
			if(descentFlight)
			{
				SetActorAngle(0,angle);
				SetActorPitch(0,pitch);
				SetActorRoll(0,roll + tiltRoll);
			}
		
			//Now we calculate what movement looks like
			sineAngle = sin(angle);
			cosineAngle = cos(angle);
			sinePitch = sin(-pitch);
			cosinePitch = cos(-pitch);
			sineRoll = sin(roll);
			cosineRoll = cos(roll);

			verticalThrust = FixedMul((verticalBob*verticalToggle),cosinePitch);
			horizontalThrust = FixedMul((verticalBob*verticalToggle),-sinePitch);
			horizontalThrustX = FixedMul(horizontalThrust,cosineAngle);
			horizontalThrustY = FixedMul(horizontalThrust,sineAngle);

			// Step One: Rotation About the Z-Axis
			int angleX = FixedMul(forward,cosineAngle) - FixedMul(side*!tilting,sineAngle);
			int angleY = FixedMul(forward,sineAngle) + FixedMul(side*!tilting,cosineAngle);
			int angleZ = vertical;

			// Step Two: Rotation About the X-Axis
			int rollX = angleX;
			int rollY = FixedMul(angleY,cosineRoll) - FixedMul(angleZ,sineRoll);
			int rollZ = FixedMul(angleY,sineRoll) + FixedMul(angleZ,cosineRoll);

			// Step Three: Rotation About the Y-Axis
			int pitchX = FixedMul(rollX,cosinePitch) + FixedMul(rollZ,sinePitch);
			int pitchY = RollY;
			int pitchZ = FixedMul(rollZ,cosinePitch) - FixedMul(rollX,sinePitch);

			// Step Four: Calculate Final Movement Vector
			/*moveX = moveSpeed * pitchX;
			moveY = moveSpeed * pitchY;
			moveZ = moveSpeed * pitchZ;*/

			moveX = moveSpeed * angleX;
			moveY = moveSpeed * angleY;
			moveZ = moveSpeed * FixedMul(forward,sinePitch);

			if((moveX != 0 || moveY != 0 || moveZ != 0) && timer() % 4 == 0)
			{
				if (isCoopGame) LineAttack(0,VectorAngle(moveX,moveY),GetActorPitch(0),5,"DescentRamPuffCoop","",41.0);
				else LineAttack(0,VectorAngle(moveX,moveY),GetActorPitch(0),5,"DescentRamPuff","",41.0);
			}

			/*PrintBold(s:"Z thrust is: ",f:verticalThrust,
					s:"\nX thrust is: ",f:horizontalThrustX,
					s:"\nY thrust is: ",f:horizontalThrustY,
					s:"\nX Movement is: ",f:moveX,
					s:"\nY Movement is: ",f:moveY,
					s:"\nZ Movement is: ",f:moveZ);*/
	
			if(!descentFlight)
			{
				horizontalThrustX = 0;
				horizontalThrustY = 0;
				verticalThrust = 0;	
			}

			velX = moveX + horizontalThrustX;
			velY = moveY + horizontalThrustY;
			velZ = descentFlight ? moveZ + verticalThrust : GetActorVelZ(0);

			if(verticalOscillate >= verticalOscillateThreshold)
			{
				verticalOscillate = 0;
				verticalToggle *= -1;
			}

			if(descentFlight)
				SetActorVelocity(0,velX,velY,velZ,0,0);

			verticalOscillate++;
			gimbalDelay--;
		}
		else if(ClassifyActor(0) & ACTOR_DEAD)
		{
			if(deathCamTid == 0)
			{
				deathCamDelay = 0;
				deathDirX = 1 - (2 * random(0,1));
				deathDirY = 1 - (2 * random(0,1));
				deathDirZ = 1 - (2 * random(0,1));
				deathCamTid = UniqueTid(); 
				SpawnForced("DescentDeathCamera",GetActorX(0),GetActorY(0),GetActorZ(0)+32.0,deathCamTid);
				ThrustThing(random(0.0,1.0),random(4,8),0,deathCamTid);
				SetPointerExt(AAPTR_TARGET,0,deathCamTid);
				ChangeCamera(deathCamTid,0,0);
			}
			if(deathCamDelay == 35)
				Thing_Stop(deathCamTid);
			else
				deathCamDelay++;

			SetActorAngle(0,GetActorAngle(0)+deathDirX*random(0,512));
			SetActorPitch(0,GetActorPitch(0)+deathDirY*random(0,512));
			SetActorRoll(0,GetActorRoll(0)+deathDirZ*random(0,512));
			Delay(1);
		}

		Delay(1);
	}
	Thing_Remove(deathCamTid);
	SetActorRoll(0,0);
	SetActorPitch(0,0);
}

str weaponNames[10] = { "DescentLaser", "DescentSuperLaser", "DescentVulcan", "DescentGauss", "DescentSpreadFire", "DescentFusion", "DescentHelix", "DescentOmega", "DescentPlasma", "DescentPhoenix" };
str PrimaryStrings[10] = { "Laser ", "Laser ", "Vulcan", "Gauss", "Spread", "Fusion", "Helix", "Omega", "Plasma", "Phoenix" };
str SecondaryStrings[10] = { "Flash", "Smart", "Concsn", "Homing", "Guided", "Mega", "Merc", "Shaker", "Proxim.", "Smart" };
str AmmoTypesA[10] = { "Clip", "Clip", "Clip", "Clip", "Clip", "Cell", "Clip", "Cell", "Clip", "Cell" };
str AmmoTypesB[10] = { "Shell", "Shell", "Shell", "Shell", "Shell", "RocketAmmo", "Shell", "RocketAmmo", "Shell", "Shell" };
str AmmoIcons[4] = { "AMSMA0", "AMSMB0", "AMSMC0", "AMSMD0" };

Script "DescentHUD" (void)
{
	str PrimaryGraphic = "DSPW0";
	str SecondaryGraphic = "DSSW0";
	int oldPrimary = CheckInventory("DescentPrimaryCounter");
	int oldSecondary = CheckInventory("DescentSecondaryCounter");
	str addonString3 = "";
	int switchDelay = 10;
	int switchCounterPrimary = switchDelay;
	int switchCounterSecondary = switchDelay;
	int alpha;
	SetHudSize(320,200,1);
	While(CheckInventory("DescentClass"))
	{
		ACS_NamedExecuteWithResult("DescentDrawHealthAndArmorAndKills",GetActorProperty(0,APROP_Health),CheckInventory("Armor"),CheckInventory("KillCountAmount"));
		ACS_NamedExecuteWithResult("DescentDrawAmmo",0,CheckInventory("Clip"),GetAmmoCapacity("Clip"));
		ACS_NamedExecuteWithResult("DescentDrawAmmo",1,CheckInventory("Shell"),GetAmmoCapacity("Shell"));
		ACS_NamedExecuteWithResult("DescentDrawAmmo",2,CheckInventory("RocketAmmo"),GetAmmoCapacity("RocketAmmo"));
		ACS_NamedExecuteWithResult("DescentDrawAmmo",3,CheckInventory("Cell"),GetAmmoCapacity("Cell"));

		//Weapon Widget
		if(CheckInventory("DescentPrimaryCounter") != oldPrimary && switchCounterPrimary == switchDelay)
		{
			switchCounterPrimary = 0;
			PlaySound(0,"Descent/Primary/Change",CHAN_7,1.0);
		}
		else
		{	
			alpha = abs((switchCounterPrimary - 5) * 0.2);
		
			if(switchCounterPrimary >= 5)
				oldPrimary = CheckInventory("DescentPrimaryCounter");
				
			ACS_NamedExecuteWithResult("DescentWeaponWidgetPrimary",oldPrimary,alpha);
			
			if(switchCounterPrimary < switchDelay)
				switchCounterPrimary++;
		}	
		
		if(CheckInventory("DescentMissileStaticToken") || CheckInventory("DescentMissileCamera"))
		{
			HudMessage(s:"";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN,26850,CR_UNTRANSLATED,256.2,172.0,60.0);
			
			if(!CheckInventory("DescentMissileStaticToken"))
				ACS_NamedExecuteWithResult("DescentCameraDisplay");
			else
				ACS_NamedExecuteWithResult("DescentCameraStaticDisplay");
		}
		else
		{
			HudMessage(s:"";HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA|HUDMSG_PLAIN,26869,CR_UNTRANSLATED,258.0,264.1,60.0,alpha);
			if(CheckInventory("DescentSecondaryCounter") != oldSecondary && switchCounterSecondary == switchDelay)
			{
				switchCounterSecondary = 0;
				PlaySound(0,"Descent/Secondary/Change",CHAN_7,1.0);
			}
			else
			{	
				alpha = abs((switchCounterSecondary - 5) * 0.2);
			
				if(switchCounterSecondary >= 5)
					oldSecondary = CheckInventory("DescentSecondaryCounter");
							
				ACS_NamedExecuteWithResult("DescentWeaponWidgetSecondary",oldSecondary,alpha);
				
				if(switchCounterSecondary < switchDelay)
					switchCounterSecondary++;
			}	
		}
		
		Delay(1);
	}
	
	RemoveMessages(26800,26810);
	RemoveMessages(26850,26910);
	RemoveMessages(26950,26999);
	
	RemoveMessages(27800,27810);
	RemoveMessages(27850,27910);
	RemoveMessages(27950,27999);
}

Script "DescentDrawHealthAndArmorAndKills" (int health, int armor, int kills) clientside
{
	if(GetCvar("screenblocks") == 12 || (!CheckInventory("SamsaraUsingNewFullscreenHUD") && GetCvar("screenblocks") == 11))
	{
		RemoveMessages(26870,26885);
		RemoveMessages(26970,26985);
		terminate;
	}

	SetHudSize(960,600,1);
	SetFont("DSFONT00");
	if(CheckInventory("DescentThirdPerson"))
	{
		//Basics
		HudMessage(d:health;HUDMSG_LAYER_OVERHUD|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26880,"Descent Blue",432.0,526.0,60.0);
		HudMessage(d:armor;HUDMSG_LAYER_OVERHUD|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26881,"Descent Gold",349.0,562.0,60.0);
		HudMessage(s:"Score: ";HUDMSG_LAYER_OVERHUD|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26884,"Descent Green",686.0,532.0,60.0);
		HudMessage(d:kills;HUDMSG_LAYER_OVERHUD|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26885,"Descent Green",824.2,532.0,60.0);
		SetHudSize(480,320,1);
		
		//Spaceship drawing
		if(health >= 100)
		{
			SetFont(strparam(s:"DSPYRO1",d:(timer()%20)/2));
			HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26883,CR_UNTRANSLATED,73.0,148.0,60.0);
		}
		else if(health >= 0)
		{
			SetFont(strparam(s:"DSPYRO0",d:health/10));
			HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26883,CR_UNTRANSLATED,73.0,148.0,60.0);
		}
		SetFont("DSPYRO");
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26882,CR_UNTRANSLATED,68.0,143.0,60.0);
		
		//Total Ammos
		SetHudSize(960,600,1);
		SetFont("AMSMA0");
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26870,CR_UNTRANSLATED,880.0,538.0,60.0);
		SetFont("AMSMB0");
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26871,CR_UNTRANSLATED,880.0,558.0,60.0);
		SetFont("AMSMC0");
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26872,CR_UNTRANSLATED,880.0,578.0,60.0);
		SetFont("AMSMD0");
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26873,CR_UNTRANSLATED,880.0,598.0,60.0);
	}
	else
	{
		//Basics
		RemoveMessages(26884,26885);
		HudMessage(d:health;HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26980,"Descent Blue",432.0,526.0,60.0);
		HudMessage(d:armor;HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26981,"Descent Gold",349.0,562.0,60.0);
		HudMessage(s:"Score: ";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26984,"Descent Green",686.0,532.0,60.0);
		HudMessage(d:kills;HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26985,"Descent Green",824.2,532.0,60.0);
		SetHudSize(480,320,1);
		
		//Spaceship drawing
		if(health >= 100)
		{
			SetFont(strparam(s:"DSPYRO1",d:(timer()%20)/2));
			HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26983,CR_UNTRANSLATED,73.0,148.0,60.0);
		}
		else if(health >= 0)
		{
			SetFont(strparam(s:"DSPYRO0",d:health/10));
			HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26983,CR_UNTRANSLATED,73.0,148.0,60.0);
		}
		SetFont("DSPYRO");
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26982,CR_UNTRANSLATED,68.0,143.0,60.0);
		
		//Total Ammos
		SetHudSize(960,600,1);
		SetFont("AMSMA0");
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26970,CR_UNTRANSLATED,880.0,538.0,60.0);
		SetFont("AMSMB0");
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26971,CR_UNTRANSLATED,880.0,558.0,60.0);
		SetFont("AMSMC0");
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26972,CR_UNTRANSLATED,880.0,578.0,60.0);
		SetFont("AMSMD0");
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26973,CR_UNTRANSLATED,880.0,598.0,60.0);
		
		//Basics
		SetHudSize(960,600,1);
		SetFont("DSFONT00");
		HudMessage(d:health;HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26880,"Descent Blue",490.0,446.0,60.0);
		HudMessage(d:armor;HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26881,"Descent Gold",490.0,408.0,60.0);
		SetHudSize(320,200,1);
		
		//Spaceship drawing
		if(health >= 100)
		{
			SetFont(strparam(s:"DSPYRO1",d:(timer()%20)/2));
			HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26883,CR_UNTRANSLATED,20.0,19.0,60.0);
		}
		else if(health >= 0)
		{
			SetFont(strparam(s:"DSPYRO0",d:health/10));
			HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26883,CR_UNTRANSLATED,20.0,19.0,60.0);
		}
		SetFont("DSPYRO");
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26882,CR_UNTRANSLATED,15.0,14.0,60.0);
	
		//Total Ammos
		SetHudSize(960,600,1);
		SetFont("AMSMA0");
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26870,CR_UNTRANSLATED,22.0,480.0,60.0);
		SetFont("AMSMB0");
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26871,CR_UNTRANSLATED,18.0,491.0,60.0);
		SetFont("AMSMC0");
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26872,CR_UNTRANSLATED,14.0,502.0,60.0);
		SetFont("AMSMD0");
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26873,CR_UNTRANSLATED,10.0,513.0,60.0);
	}
}

Script "DescentDrawAmmo" (int idOffset, int count, int capacity) clientside
{
	if(GetCvar("screenblocks") == 12 || (!CheckInventory("SamsaraUsingNewFullscreenHUD") && GetCvar("screenblocks") == 11))
	{
		RemoveMessages(26874,26877);
		RemoveMessages(26974,26977);
		terminate;
	}

	SetHudSize(960,600,1);
	SetFont("DSFONT00");
	if(CheckInventory("DescentThirdPerson"))
	{
		HudMessage(d:count,s:"/",d:capacity;HUDMSG_LAYER_OVERHUD|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26874+idOffset,"Descent Green",978.2,526.0+(20.0*idOffset),60.0);
	}
	else
	{
		HudMessage(d:count,s:"/",d:capacity;HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26974+idOffset,"Descent Green",978.2,526.0+(20.0*idOffset),60.0);
		HudMessage(d:count,s:"/",d:capacity;HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26874+idOffset,"Descent Green",104.2-(4.0*idOffset),468.0+(11.0*idOffset),60.0);
	}
}

Script "DescentWeaponWidgetPrimary" (int oldPrimary, int alpha) clientside
{
	str addonString, addonString2;
	if(GetCvar("screenblocks") == 12 || (!CheckInventory("SamsaraUsingNewFullscreenHUD") && GetCvar("screenblocks") == 11))
	{
		RemoveMessages(26800,26810);
		RemoveMessages(26900,26910);
		terminate;
	}
	
	if(oldPrimary <= 1)
		addonString = strparam(s:"\nLVL:",s:" ",d:CheckInventory("DescentLaserLevel")+1);
	else
		addonString = "";
						
	if(oldPrimary <= 1 && CheckInventory("DescentQuadLaser"))
		addonString2 = "\nQuad";
	else
		addonString2 = "";
	
	str PrimaryGraphic = "DSPW0";
	if(CheckInventory("DescentThirdPerson"))
	{
		SetHudSize(480,320,1);
		SetFont(strparam(s:PrimaryGraphic,d:oldPrimary));
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA|HUDMSG_PLAIN,26810,CR_UNTRANSLATED,90.1,296.0,60.0,alpha);
		SetHudSize(960,600,1);
		SetFont("DSFONT00");
		SetHudClipRect(244,518,68,192,68);
		HudMessage(s:strparam(s:PrimaryStrings[oldPrimary],s:addonString,s:addonString2);HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26800,"Descent Green",244.1,518.1,60.0,alpha);
		HudMessage(d:CheckInventory(AmmoTypesA[oldPrimary]);HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26801,"Descent Red",244.1,576.1,60.0,alpha);
		SetHudClipRect(0,0,0,0,0);
	}
	else
	{
		SetHudSize(320,200,1);
		SetFont(strparam(s:PrimaryGraphic,d:oldPrimary));
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_ALPHA|HUDMSG_PLAIN,26810,CR_UNTRANSLATED,64.1,172.0,60.0,alpha);
		SetHudSize(960,600,1);
		SetFont("DSFONT00");
		SetHudClipRect(276,456,68,192,68);
		HudMessage(s:strparam(s:PrimaryStrings[oldPrimary],s:addonString,s:addonString2);HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_ALPHA|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26800,"Descent Green",276.1,456.1,60.0,alpha);
		HudMessage(d:CheckInventory(AmmoTypesA[oldPrimary]);HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_ALPHA|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26801,"Descent Red",276.1,512.1,60.0,alpha);
		SetHudClipRect(0,0,0,0,0);
		
		//Automap crap
		SetHudSize(480,320,1);
		SetFont(strparam(s:PrimaryGraphic,d:oldPrimary));
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_ALPHA|HUDMSG_PLAIN,26910,CR_UNTRANSLATED,90.1,296.0,60.0,alpha);
		SetHudSize(960,600,1);
		SetFont("DSFONT00");
		SetHudClipRect(244,518,68,192,68);
		HudMessage(s:strparam(s:PrimaryStrings[oldPrimary],s:addonString,s:addonString2);HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_ALPHA|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26900,"Descent Green",244.1,518.1,60.0,alpha);
		HudMessage(d:CheckInventory(AmmoTypesA[oldPrimary]);HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_ALPHA|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26901,"Descent Red",244.1,576.1,60.0,alpha);
		SetHudClipRect(0,0,0,0,0);
	}
}

Script "DescentCameraDisplay" (void) clientside
{
	if(GetCvar("screenblocks") == 12 || (!CheckInventory("SamsaraUsingNewFullscreenHUD") && GetCvar("screenblocks") == 11))
	{
		RemoveMessages(26860,26870);
		RemoveMessages(26960,26970);
		terminate;
	}

	SetHudSize(960,600,1);
	SetFont("DSFONT00");
	if(CheckInventory("DescentThirdPerson"))
	{
		RemoveMessages(26960,26961);
	
		SetHudClipRect(520,514,128,192,64);
		HudMessage(s:SecondaryStrings[CheckInventory("DescentSecondaryCounter")];HUDMSG_LAYER_OVERHUD|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26860,"Descent Green",566.0,514.1,60.0);
		HudMessage(d:CheckInventory(AmmoTypesB[CheckInventory("DescentSecondaryCounter")]);HUDMSG_LAYER_OVERHUD|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26861,"Descent Red",566.0,580.1,60.0);
		SetHudClipRect(0,0,0,0,0);
		SetHudSize(436,320,1);
		SetFont("DSMISCAM");
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_PLAIN,26869,CR_UNTRANSLATED,258.0,274.1,60.0);
	}
	else
	{
		SetHudClipRect(656,456,128,192,64);
		HudMessage(s:SecondaryStrings[CheckInventory("DescentSecondaryCounter")];HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26960,"Descent Green",696.0,456.1,60.0);
		HudMessage(d:CheckInventory(AmmoTypesB[CheckInventory("DescentSecondaryCounter")]);HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26961,"Descent Red",696.0,564.1,60.0);
		SetHudClipRect(0,0,0,0,0);
		HudMessage(s:"";HUDMSG_LAYER_OVERHUD|HUDMSG_PLAIN,26869,CR_UNTRANSLATED,258.0,264.1,60.0);
	
		SetHudSize(960,600,1);
		SetFont("DSFONT00");
		SetHudClipRect(520,514,128,192,64);
		HudMessage(s:SecondaryStrings[CheckInventory("DescentSecondaryCounter")];HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26860,"Descent Green",566.0,514.1,60.0);
		HudMessage(d:CheckInventory(AmmoTypesB[CheckInventory("DescentSecondaryCounter")]);HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26861,"Descent Red",566.0,580.1,60.0);
		SetHudClipRect(0,0,0,0,0);
		SetHudSize(436,320,1);
		SetFont("DSMISCAM");
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_PLAIN,26869,CR_UNTRANSLATED,258.0,274.1,60.0);
	}
}

Script "DescentCameraStaticDisplay" (void) clientside
{
	if(GetCvar("screenblocks") == 12 || (!CheckInventory("SamsaraUsingNewFullscreenHUD") && GetCvar("screenblocks") == 11))
	{
		RemoveMessages(26860,26869);
		RemoveMessages(26960,26969);
		terminate;
	}

	SetHudSize(436,320,1);
	SetFont("DESSTAT1");
	
	HudMessage(s:"";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26960,"Descent Green",720.2,456.1,60.0);
	HudMessage(s:"";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26961,"Descent Green",720.2,456.1,60.0);
	HudMessage(s:"";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26860,"Descent Green",720.2,456.1,60.0);
	HudMessage(s:"";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26861,"Descent Green",720.2,456.1,60.0);
	
	if(CheckInventory("DescentThirdPerson"))
	{
		SetHudSize(436,320,1);
		SetFont("DESSTAT1");
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_PLAIN,26869,CR_UNTRANSLATED,258.0,264.1,60.0);
	}
	else
	{
		SetHudSize(436,320,1);
		SetFont("DESSTAT1");
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_PLAIN,26869,CR_UNTRANSLATED,258.0,264.1,60.0);
	}
}

Script "DescentWeaponWidgetSecondary" (int oldSecondary, int alpha) clientside
{
	str addonString3 = "";
	if(GetCvar("screenblocks") == 12 || (!CheckInventory("SamsaraUsingNewFullscreenHUD") && GetCvar("screenblocks") == 11))
	{
		RemoveMessages(26850,26861);
		RemoveMessages(26950,26961);
		terminate;
	}
	
	if(oldSecondary == 8)
		addonString3 = " Bomb";
	else if(oldSecondary == 9)
		addonString3 = " Mine";
	else
		addonString3 = " Missile";
	
	str SecondaryGraphic = "DSSW0";
	if(CheckInventory("DescentThirdPerson"))
	{
		SetHudSize(480,320,1);
		SetFont(strparam(s:SecondaryGraphic,d:oldSecondary));
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA|HUDMSG_PLAIN,26850,CR_UNTRANSLATED,316.2,296.0,60.0,alpha);
		SetHudSize(960,600,1);
		SetFont("DSFONT00");
		SetHudClipRect(500,518,128,192,64);
		HudMessage(s:strparam(s:SecondaryStrings[oldSecondary],s:addonString3);HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26860,"Descent Green",576.2,518.1,60.0,alpha);
		HudMessage(d:CheckInventory(AmmoTypesB[oldSecondary]);HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26861,"Descent Red",576.2,576.1,60.0,alpha);
		SetHudClipRect(0,0,0,0,0);
	}
	else
	{
		SetHudSize(320,200,1);
		SetFont(strparam(s:SecondaryGraphic,d:oldSecondary));
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_ALPHA|HUDMSG_PLAIN,26850,CR_UNTRANSLATED,256.2,172.0,60.0,alpha);
		SetHudSize(960,600,1);
		SetFont("DSFONT00");
		SetHudClipRect(624,456,128,192,64);
		HudMessage(s:strparam(s:SecondaryStrings[oldSecondary],s:addonString3);HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_ALPHA|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26860,"Descent Green",688.2,456.1,60.0,alpha);
		HudMessage(d:CheckInventory(AmmoTypesB[oldSecondary]);HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP|HUDMSG_ALPHA|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26861,"Descent Red",688.2,512.1,60.0,alpha);
		SetHudClipRect(0,0,0,0,0);
		
		//Buuuuuullshiit!
		SetHudSize(480,320,1);
		SetFont(strparam(s:SecondaryGraphic,d:oldSecondary));
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_ALPHA|HUDMSG_PLAIN,26950,CR_UNTRANSLATED,316.2,296.0,60.0,alpha);
		SetHudSize(960,600,1);
		SetFont("DSFONT00");
		SetHudClipRect(500,518,128,192,64);
		HudMessage(s:strparam(s:SecondaryStrings[oldSecondary],s:addonString3);HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_ALPHA|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26960,"Descent Green",576.2,518.1,60.0,alpha);
		HudMessage(d:CheckInventory(AmmoTypesB[oldSecondary]);HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW|HUDMSG_ALPHA|HUDMSG_PLAIN|HUDMSG_COLORSTRING,26961,"Descent Red",576.2,576.1,60.0,alpha);
		SetHudClipRect(0,0,0,0,0);
	}
}

Script "DescentRemoveHUD" (int player) DISCONNECT
{
	RemoveMessages(26800,26810);
	RemoveMessages(26850,26910);
	RemoveMessages(26950,26999);
	
	RemoveMessages(27800,27810);
	RemoveMessages(27850,27910);
	RemoveMessages(27950,27999);
}

Script "DescentMissileCamera" (void)
{
	int newTid = UniqueTid();
	int radius = GetActorProperty(0,APROP_Radius);
	SpawnForced("AimingCamera",GetActorX(0),GetActorY(0),GetActorZ(0),newTid);
	ACS_NamedExecuteWithResult("DescentMissileCameraPlayer",newTid);
	SetPointer(AAPTR_Master,newTid);
	
	while(ClassifyActor(0) & ACTOR_MISSILE)
	{
		int horizontalVector = magnitudeTwo_f(GetActorVelX(0), GetActorVelY(0))<<8;
		int velZ = GetActorVelZ(0);
		int pitch = VectorAngle(horizontalVector, velZ);
		if(!CheckInventory("DescentGuidedController"))	{ SetActorPitch(0,pitch); }
		SetActorPitch(newTid,-GetActorPitch(0));
		Warp(AAPTR_Master,FixedMul(radius*4,cos(GetActorPitch(0))),0,FixedMul(radius*4,sin(GetActorPitch(0))),0,WARPF_NOCHECKPOSITION|WARPF_COPYINTERPOLATION|WARPF_USEPTR|WARPF_MOVEPTR);
		Delay(1);
	}
	SetActivatorToTarget(0);
	GiveInventory("DescentMissileStaticGiver",1);
	TakeInventory("DescentMissileCamera",1);
	Thing_Remove(newTid);
}

Script "DescentMissileCameraPlayer" (int cameraTid)
{
	SetActivatorToTarget(0);
	ACS_NamedExecuteWithResult("DescentMissileCameraClient",cameraTid,PlayerNumber());
}

Script "DescentMissileCameraClient" (int cameraTid, int player) clientside
{
	if(player != ConsolePlayerNumber())
		terminate;
		
	SetCameraToTexture(cameraTid,"DSMISCAM",90);
}

Script "DescentGuidedMissile" (void)
{
	int myTid = UniqueTid();
	Thing_ChangeTid(0,myTid);
	SetActivator(myTid,AAPTR_Target);
	SetActorPitch(myTid,-GetActorPitch(0));
	int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
	int GZDoom = GetCvar("samsara_zscriptready");
	while(buttons & BT_ALTATTACK && (ClassifyActor(myTid) & ACTOR_MISSILE))
	{
		buttons = GetPlayerInput(-1, INPUT_BUTTONS);
		int mouseYaw = GetPlayerInput(-1, INPUT_YAW);
		int mousePitch = GetPlayerInput(-1, INPUT_PITCH);
		
		int invertedMouse = GetCvar("invertmouse");
		int sensitivityX = GZDoom ? GetCvar("m_yaw") : GetCvar("m_sensitivity");
		int sensitivityY = GZDoom ? GetCvar("m_pitch") : GetCvar("m_sensitivity");
		
		mouseYaw = FixedMul(mouseYaw,sensitivityX+1.0);
		mousePitch = FixedMul((invertedMouse ? -mousePitch : mousePitch),sensitivityY+2.0);
		
		SetActorAngle(myTid,GetActorAngle(myTid)+mouseYaw);
		SetActorPitch(myTid,GetActorPitch(myTid)+mousePitch);
				
		int velX = 12*cos(GetActorAngle(myTid));
		int velY = 12*sin(GetActorAngle(myTid));
		int velZ = 12*sin(GetActorPitch(myTid));
				
		SetActorVelocity(myTid,0,0,0,0,0);
		SetActorVelocity(myTid,velX,velY,velZ,0,0);
			
		Delay(1);
	}
		
	TakeInventory("DescentGuidedController",1);
}

Script "DescentFlashFade" (void)
{
	FadeRange(255.0,255.0,255.0,0.9,0.0,0.0,0.0,0.0,1.0);
}

Script "DescentStaticHUD" (void)
{
	if(CheckInventory("DescentMissileCamera") > 0)
	{
		GiveInventory("DescentMissileStaticToken",1);
		Delay(15);
		TakeInventory("DescentMissileStaticToken",1);
	}
}

Script "DescentChargeAmount" (void)
{
	SetActivatorToTarget(0);
	SetResultValue(CheckInventory("DescentChargeToken"));
}

Script "DescentFusionChargeSound" (int overflow)
{
	int channel = overflow ? timer() % 3: CheckInventory("DescentChargeToken")%3;
	switch(channel)
	{
		case 0: PlaySound(0,"Descent/Fusion/Charge",CHAN_WEAPON); break;
		case 1: PlaySound(0,"Descent/Fusion/Charge",CHAN_5); break;
		case 2: PlaySound(0,"Descent/Fusion/Charge",CHAN_6); break;
	}
}

Script "DescentOmegaFireSound" (int overflow)
{
	int channel = timer() % 3;
	switch(channel)
	{
		case 0: PlaySound(0,"Descent/Omega/Fire",CHAN_WEAPON); break;
		case 1: PlaySound(0,"Descent/Omega/Fire",CHAN_5); break;
		case 2: PlaySound(0,"Descent/Omega/Fire",CHAN_6); break;
	}
}

Script "DescentHelixRotation" (void)
{
	SetResultValue(CheckInventory("DescentHelixRotation"));
}

Script "DescentOmegaLaser" (void)
{
	int tx = GetActorX(0); 
	int ty = GetActorY(0); 
	int tz = GetActorZ(0);
	
	SetActivatorToTarget(0);
	
	ACS_NamedExecuteWithResult("DescentOmegaLaserRender", tx, ty, tz);
}

Script "DescentOmegaLaserRender" (int tx, int ty, int tz) clientside
{
	int t, i, angle, pitch, x, y, z, vx, vy, vz, mag, magI, horz, pitchoffset,angleoffset, space, height;
	int segmentx, segmenty, segmentz, bendinessX, bendinessy;
	str segment;
	
	bendinessX = 6*randSign(); 
	bendinessY = 6*randSign(); 
	segment = "DescentOmegaEffect"; 
	horz = (-12*cos(GetActorRoll(0)))>>16; 
	i = 32; 
	space = 64; 
	height = 36;
	
	int xoff = (horz * sin(GetActorAngle(0))) - FixedMul(-i * cos(GetActorAngle(0)),cos(GetActorPitch(0))) + (random(-2,2) * sin(GetActorPitch(0)));
	int yoff = (horz * cos(GetActorAngle(0))) + FixedMul(-i * sin(GetActorAngle(0)),cos(GetActorPitch(0))) + (random(-2,2) * sin(GetActorPitch(0)));
				
    x = GetActorX(0) + xoff;
	y = GetActorY(0) - yoff;
	z = GetActorZ(0) + (height * 1.0) + (-i * sin(GetActorPitch(0)));
	
	int vectorx = tx - x;
	int vectory = ty - y;
	int vectorz = tz - z;
	angle = VectorAngle(vectorx, vectory);
	
	int length = magnitudeTwo(vectorx>>16,vectory>>16);
	pitch = VectorAngle(length<<16, vectorz);

    vx = tx-x; vy = ty-y; vz = tz-z; mag = magnitudeThree_f(vx, vy, vz);
    vx = FixedDiv(vx, mag); vy = FixedDiv(vy, mag); vz = FixedDiv(vz, mag);
    magI = ftoi(mag);
	
	int newtid = UniqueTid();
	int segments = (magI - abs(i)) / space;
	int bendscale = random(1,segments / 2);
	int bendcounter;
	int bendFactor = (64-bendscale*4);
	int segnum = 1;
	for (i = i; i < magI; i += space)
	{
		SpawnForced(segment, x+segmentx, y+segmenty, z+segmentz, newtid);
		if(segnum < 16)
			segnum++;
		else
			segnum = 1;

		if(bendcounter <= bendscale)
		{
			angleoffset += bendinessX*bendFactor;
			pitchoffset += bendinessY*bendFactor;	
		}
		else if(bendcounter >= segments - bendscale)
		{
			angleoffset -= bendinessX*bendFactor;
			pitchoffset -= bendinessY*bendFactor;	
		}
		else
		{
			angleoffset = 0;
			pitchoffset = 0;
		}
				
		SetActorAngle(newtid, angle+angleoffset);
		SetActorPitch(newtid, pitch+pitchoffset);
			
		segmentx += FixedMul(cos(angle+angleoffset)*space,cos(pitch+pitchoffset));
		segmenty += FixedMul(sin(angle+angleoffset)*space,cos(pitch+pitchoffset));
		segmentz += sin(pitch+pitchoffset)*space;

		Thing_ChangeTid(newtid,0);
		bendcounter++;
	}
}

Script "DescentMinePlace" (int type)
{
	int mineTid = UniqueTid();
	switch(type)
	{
		case 0:
			SpawnForced("DescentProximityBomb",GetActorX(0),GetActorY(0),GetActorZ(0),mineTid);
			break;
		case 1:
			if (isCoop())
			{
				SpawnForced("DescentSmartMineCoop",GetActorX(0),GetActorY(0),GetActorZ(0),mineTid);
			}
			else
			{
				SpawnForced("DescentSmartMine",GetActorX(0),GetActorY(0),GetActorZ(0),mineTid);
			}
			break;
	}
	SetPointerExt(AAPTR_MASTER,0,mineTid);
	SetActorAngle(mineTid,GetActorAngle(0));
	SetActorVelocity(mineTid,-16*cos(GetActorAngle(0)),-16*sin(GetActorAngle(0)),16*sin(GetActorPitch(0)),0,0);
	
	Delay(4);
	
	Thing_Stop(mineTid);
}

//FACK
Script "DescentSelectWeapon" (int type, int dir)
{
	if(CheckInventory("DescentWeaponSwitching"))
		terminate;
	GiveInventory("DescentWeaponSwitching",1);
	switch(type)
	{
		case 0:
			switch(dir)
			{
				case 0: //Up
					if(CheckInventory("DescentPrimaryCounter") >= 9)
						TakeInventory("DescentPrimaryCounter",9);
					else
						GiveInventory("DescentPrimaryCounter",1);
						
					if(CheckInventory("DescentSuperLaser") && CheckInventory("DescentPrimaryCounter") == 0)
						GiveInventory("DescentPrimaryCounter",1);

					until(CheckInventory(weaponNames[CheckInventory("DescentPrimaryCounter")]))
					{
						if(CheckInventory("DescentPrimaryCounter") >= 9)
							TakeInventory("DescentPrimaryCounter",9);
						else
							GiveInventory("DescentPrimaryCounter",1);
							
						if(CheckInventory("DescentSuperLaser") && CheckInventory("DescentPrimaryCounter") == 0)
							GiveInventory("DescentPrimaryCounter",1);
					}
					SetWeapon(weaponNames[CheckInventory("DescentPrimaryCounter")]);
					break;
				case 1: //Down
					if(CheckInventory("DescentSuperLaser") && CheckInventory("DescentPrimaryCounter") == 1)
						TakeInventory("DescentPrimaryCounter",1);
				
					if(CheckInventory("DescentPrimaryCounter") <= 0)
						GiveInventory("DescentPrimaryCounter",9);
					else
						TakeInventory("DescentPrimaryCounter",1);
					until(CheckInventory(weaponNames[CheckInventory("DescentPrimaryCounter")]))
					{
						if(CheckInventory("DescentSuperLaser") && CheckInventory("DescentPrimaryCounter") == 1)
							TakeInventory("DescentPrimaryCounter",1);
					
						if(CheckInventory("DescentPrimaryCounter") <= 0)
							GiveInventory("DescentPrimaryCounter",9);
						else
							TakeInventory("DescentPrimaryCounter",1);
					}
					SetWeapon(weaponNames[CheckInventory("DescentPrimaryCounter")]);
					break;
			}
			break;
		case 1: 
			switch(dir)
			{
				case 0: //Up
					if(CheckInventory("DescentSecondaryCounter") >= 9)
						TakeInventory("DescentSecondaryCounter",9);
					else
						GiveInventory("DescentSecondaryCounter",1);
					until(CheckInventory(weaponNames[CheckInventory("DescentSecondaryCounter")]))
					{
						if(CheckInventory("DescentSecondaryCounter") >= 9)
							TakeInventory("DescentSecondaryCounter",9);
						else
							GiveInventory("DescentSecondaryCounter",1);
					}
					SetWeapon(weaponNames[CheckInventory("DescentSecondaryCounter")]);
					break;
				case 1: //Down
					if(CheckInventory("DescentSecondaryCounter") <= 0)
						GiveInventory("DescentSecondaryCounter",9);
					else
						TakeInventory("DescentSecondaryCounter",1);
					until(CheckInventory(weaponNames[CheckInventory("DescentSecondaryCounter")]))
					{
						if(CheckInventory("DescentSecondaryCounter") <= 0)
							GiveInventory("DescentSecondaryCounter",9);
						else
							TakeInventory("DescentSecondaryCounter",1);
					}
					SetWeapon(weaponNames[CheckInventory("DescentSecondaryCounter")]);
					break;
			}
			break;
	}
	TakeInventory("DescentWeaponSwitching",1);
}