script "C7MinePlacer" (int deathmatch)
{
    str mine = deathmatch ? "C7ProxyMine" : "C7ProxyMineCoop";
    int newTid = UniqueTid();

    if (deathmatch) { GiveInventory("C7MineDMToken", 1); }
    SpawnForced(mine, GetActorX(0), GetActorY(0), GetActorZ(0), newTid);
    SetPointerExt(AAPTR_MASTER, 0, newTid);

    Print(l:"C7_MINEDROPPED");
}

script "C7MinePlacerFail" (void) CLIENTSIDE { Print(l:"C7_TOOMANYMINES"); }

script "Corridor7ActivateVisor" (void)
{
    if (isDead(0)) { terminate; }

    if (CheckInventory("C7VisorActive") >= 2) { SetInventory("C7VisorActive", 0); }
    else { GiveInventory("C7VisorActive", 1); }
}

script "Corridor7Loop" (void)
{
    int currentMines = 0;
    bool transferMines = false;

    while (CheckInventory("C7Class"))
    {
        if (isDead(0)) { SetInventory("C7VisorActive", 0); } // powerups are always automatically taken on death, no exceptions
        else
        {
            switch (CheckInventory("C7VisorActive"))
            {
              case 0: // Off
                TakeInventory("C7NightVisionPower", 1);
                TakeInventory("C7InfraredPower", 1);
                break;

              case 1: // Night Vision
                TakeInventory("C7InfraredPower", 1);

                GiveInventory("C7NightVisionPower", 1);
                break;

              case 2: // Infrared
                TakeInventory("C7NightVisionPower", 1);

                GiveInventory("C7InfraredPower", 1);
                GiveInventory("C7EnemyLookerInfrared", 1);
                break;
            }
        }
	
        if (!isSinglePlayer() && !isCoop())
        {
            if (isDead(0))
            {
                currentMines = CheckInventory("C7MineDMToken");
                transferMines = true;
            } else {
                if (transferMines)
                {
                    SetInventory("C7MineDMToken", currentMines);
                    transferMines = false;
                }
            }
        }

        Delay(1);
    }
}

int infraredMessageIds = 0;

Script "Corridor7MonsterCoordinate" (void) clientside
{
	if(infraredMessageIds >= 256 || !CheckInventory("C7InfraredPower"))
		terminate;
		
	int myX = GetActorX(0);
	int myY = GetActorY(0);
	int myZ = GetActorZ(0);
	
	int monsterRadius = CheckInventory("C7EnemyMonsterRadius");
	int monsterHeight = CheckInventory("C7EnemyMonsterHeight");
	int monsterX = (CheckInventory("C7EnemyCoordinateX") - 65536) * 1.0;
	int monsterY = (CheckInventory("C7EnemyCoordinateY") - 65536) * 1.0;
	int monsterZ = (CheckInventory("C7EnemyCoordinateZ") - 65536) * 1.0;
	
	//PrintBold(s:"Monster X: ",d:monsterX,s:" Monster Y: ",d:monsterY,s:" Monster Z: ",d:monsterZ);
	
	TakeInventory("C7EnemyCoordinateX",131072);
	TakeInventory("C7EnemyCoordinateY",131072);
	TakeInventory("C7EnemyCoordinateZ",131072);
	TakeInventory("C7EnemyMonsterRadius",1024);
	TakeInventory("C7EnemyMonsterHeight",1024);
	
	if(monsterRadius == 0 || monsterHeight == 0) terminate;
	
	int distance = magnitudeThree_f(monsterX - myX,monsterY - myY,monsterZ - myZ);
	
	if(distance <= 1024.0)
	{
		int monsterAngle = VectorAngle(monsterX - myX, monsterY - myY);
		int playerAngle = GetActorAngle(0);
		int deltaAngle = (monsterAngle - playerAngle + 1.0) % 1.0;
		
		int monsterPitch = VectorAngle(VectorLength(monsterX - myX, monsterY - myY), monsterZ - myZ);
		int playerPitch = GetActorPitch(0);
		int deltaPitch = (monsterPitch + playerPitch + 1.0) % 1.0;
				
		if (deltaAngle < 0.2 || deltaAngle > 0.8)
		{
			int hudX = FixedMul(960.0,(20.0/monsterRadius))/1.0;
			int hudY = FixedMul(720.0,(52.0/monsterHeight))/1.0;
			if(Cos (deltaAngle) == 0) terminate;
			int sx = (hudX/2) - ((hudX/2) * Sin (deltaAngle) / Cos (deltaAngle));
			if(Cos (-deltaPitch) == 0) terminate;
			int sy = (hudY/2) - ((hudY/2) * Sin (deltaPitch) / Cos (-deltaPitch));
			SetHudSize(hudX, hudY, 0);
			SetFont("TIPHIL15");
			HudMessage(s:"A"; HUDMSG_PLAIN|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 30500+infraredMessageIds, CR_UNTRANSLATED, sx * 1.0, sy * 1.0, 0.5, (1024.0-distance)/1024);
			infraredMessageIds++;
		
			Delay(1);
		
			HudMessage(s:""; HUDMSG_PLAIN|HUDMSG_ALPHA|HUDMSG_NOTWITHFULLMAP, 30500+infraredMessageIds-1, CR_UNTRANSLATED, sx * 1.0, sy * 1.0, 0.5, (1024.0-distance)/1024);
			infraredMessageIds--;
		}	
	}
}
