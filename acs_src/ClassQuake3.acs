Script "Q3SpawnRocketFlare" (void)
{
	int flaretid = UniqueTid();
	
	SpawnForced("Q3RocketFlare",0,0,0,flaretid);
	
	While(ClassifyActor(0) != ACTOR_WORLD)
	{
		SetActorVelocity(flaretid,GetActorVelX(0),GetActorVelY(0),GetActorVelZ(0),0,0);
		Warp(flaretid,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_MOVEPTR|WARPF_COPYINTERPOLATION);
		Delay(1);
	}
	Thing_Remove(flaretid);
}

Script "Q3SpawnDecal" (int type, int ceiling)
{
	str extension = ceiling ? "Ceiling" : "Floor";
	int zCoord = ceiling ? GetActorCeilingZ(0) : GetActorFloorZ(0);
	int newTid = 0;
	switch(type)
	{
		case 0:
			SpawnForced(strparam(s:"Q3BulletDecal",s:extension),GetActorX(0),GetActorY(0),zCoord);
			break;
		case 1:
			SpawnForced(strparam(s:"Q3ExplosiveDecal",s:extension),GetActorX(0),GetActorY(0),zCoord);
			break;
		case 2:
			SpawnForced(strparam(s:"Q3LightningDecal",s:extension),GetActorX(0),GetActorY(0),zCoord);
			break;
		case 3:
			SpawnForced(strparam(s:"Q3PlasmaDecal",s:extension),GetActorX(0),GetActorY(0),zCoord);
			break;
		case 4:
			newTid = UniqueTid();
			SpawnForced(strparam(s:"Q3BloodDecal",s:extension),GetActorX(0),GetActorY(0),zCoord,newTid);
			Thing_SetTranslation(newTid,-1);
			break;
	}
}

Script "Q3DrawLaser" (int type, int left)
{
	int x = GetActorX(0);
	int y = GetActorY(0);
	int z = GetActorZ(0);
	SetActivatorToTarget(0);
	switch(type)
	{
		case 0: ACS_NamedExecuteWithResult("Q3LightningBeam",left,x,y,z); break;
		case 1: ACS_NamedExecuteWithResult("Q3RailGunBeam",x,y,z); break;
		case 2: ACS_NamedExecuteWithResult("Q3BubbleBeam",x,y,z); break;
	}
}

Script "Q3LightningBeam" (int left, int tx, int ty, int tz) clientside
{
	int t, k = 0, l, angle, pitch, x, y, z, vx, vy, vz, mag, magI;
	
	//Properties
	int height = GetActorViewHeight(0) - 9.0;
	int space = 7;
	int lightningCounter = ((timer()%8) + 1)*2;
	int horz = 8.0;
	int i = 24;
	
	if(left == 0)
		horz = 3.2;
		
	str segment = "Q3LightningSegment";
	str extension = left ? "L" : "R";
	
	int newtid = UniqueTid();
	
	int xoff = returnLaserOrigin(0, horz, height, GetActorAngle(0), GetActorPitch(0));
	int yoff = returnLaserOrigin(1, horz, height, GetActorAngle(0), GetActorPitch(0));
		
    x = GetActorX(0) + xoff;
	y = GetActorY(0) - yoff;
	z = GetActorZ(0) + returnLaserOrigin(2, horz, height, GetActorAngle(0), GetActorPitch(0));
	
	int vectorx = tx - x;
	int vectory = ty - y;
	int vectorz = tz - z;
	angle = VectorAngle(vectorx, vectory);
	
	int length = magnitudeTwo(vectorx>>16,vectory>>16);
	pitch = VectorAngle(length<<16, vectorz);

    vx = tx-x; vy = ty-y; vz = tz-z; mag = magnitudeThree_f(vx, vy, vz);
    vx = FixedDiv(vx, mag); vy = FixedDiv(vy, mag); vz = FixedDiv(vz, mag);
    magI = ftoi(mag);
    for (i = i; i < magI; i += space)
    {
        SpawnForced(strparam(s:segment,s:extension,d:lightningCounter), x+(vx*i), y+(vy*i), z+(vz*i), newtid);
		SetActorPitch(newtid, pitch);
		SetActorAngle(newtid, angle);
		
		lightningCounter--;
		if(lightningCounter < 1)
			lightningCounter = 16;

		if(i % 1500 == 0)
			Delay(1);
    }
}

Script "Q3RailGunBeam" (int tx, int ty, int tz) clientside
{
	int t, k = 0, l, angle, pitch, x, y, z, vx, vy, vz, mag, magI;
	
	//Properties
	int height = GetActorViewHeight(0) - 9.0;
	int space = 16;
	int horz = 8.0;
	int i = 24;

	str segment = "Q3RailGunSegment";
	
	int newtid = UniqueTid();
	
	int xoff = FixedMul(sin(GetActorAngle(0)),horz);
	int yoff = FixedMul(cos(GetActorAngle(0)),horz);
		
    x = GetActorX(0) + xoff;
	y = GetActorY(0) - yoff;
	z = GetActorZ(0) + height;
	
	int vectorx = tx - x;
	int vectory = ty - y;
	int vectorz = tz - z;
	angle = VectorAngle(vectorx, vectory);
	
	int length = magnitudeTwo(vectorx>>16,vectory>>16);
	pitch = VectorAngle(length<<16, vectorz);

    vx = tx-x; vy = ty-y; vz = tz-z; mag = magnitudeThree_f(vx, vy, vz);
    vx = FixedDiv(vx, mag); vy = FixedDiv(vy, mag); vz = FixedDiv(vz, mag);
    magI = ftoi(mag);
    for (i = i; i < magI; i += space)
    {
        SpawnForced(segment, x+(vx*i), y+(vy*i), z+(vz*i), newtid);
		Thing_SetTranslation(newtid,-1);
		SetActorPitch(newtid, pitch);
		SetActorAngle(newtid, angle);

		if(i % 1500 == 0)
			Delay(1);
    }
}

Script "Q3BubbleBeam" (int tx, int ty, int tz) clientside
{
	if(!isSinglePlayer()) // Don't even bother drawing this online. Bubbles will need to be server side and it's not even worth it.
		terminate;
	int t, k = 0, l, angle, pitch, x, y, z, vx, vy, vz, mag, magI;
	
	//Properties
	int height = GetActorViewHeight(0) - 9.0;
	int space = 32;
	int horz = 0.0;
	int i = 24;

	str segment = "Q3Bubble";
		
	int xoff = FixedMul(sin(GetActorAngle(0)),horz);
	int yoff = FixedMul(cos(GetActorAngle(0)),horz);
		
    x = GetActorX(0) + xoff;
	y = GetActorY(0) - yoff;
	z = GetActorZ(0) + height;
	
	int vectorx = tx - x;
	int vectory = ty - y;
	int vectorz = tz - z;
	angle = VectorAngle(vectorx, vectory);
	
	int length = magnitudeTwo(vectorx>>16,vectory>>16);
	pitch = VectorAngle(length<<16, vectorz);

    vx = tx-x; vy = ty-y; vz = tz-z; mag = magnitudeThree_f(vx, vy, vz);
    vx = FixedDiv(vx, mag); vy = FixedDiv(vy, mag); vz = FixedDiv(vz, mag);
    magI = ftoi(mag);
    for (i = i; i < magI; i += space)
    {
        SpawnForced(segment, x+(vx*i), y+(vy*i), z+(vz*i));

		if(i % 1500 == 0)
			Delay(1);
    }
}

Script "Q3EffectLifeCycle" (int animTime, int scaleFactor, int fadeFactor, int time)
{
	scaleFactor *= 0.001;
	fadeFactor *= 0.001;
	until(time <= 0)
	{
		time--;
		SetActorProperty(0,APROP_ScaleX,GetActorProperty(0,APROP_ScaleX)+scaleFactor);
		SetActorProperty(0,APROP_ScaleY,GetActorProperty(0,APROP_ScaleY)+scaleFactor);
		SetActorProperty(0,APROP_Alpha,GetActorProperty(0,APROP_Alpha)+fadeFactor);
		Delay(animTime == 0 ? 1 : animTime);
		
		if(GetActorProperty(0,APROP_ScaleX) <= 0) { SetActorProperty(0,APROP_ScaleX,0); SetActorProperty(0,APROP_ScaleY,0); };
		if(GetActorProperty(0,APROP_Alpha) <= 0) SetActorProperty(0,APROP_Alpha,0);
	}
	Thing_Remove(0);
}

Script "Q3ProximityMineGlow" (int mineType)
{
	int newTid = UniqueTid();
	str mine = "";
	switch(mineType)
	{
		case 0: mine = "Q3ProximityMineGlow"; break;
		case 1: mine = "Q3ProximityMineGlowFloor"; break;
		case 2: mine = "Q3ProximityMineGlowCeiling"; break;
	}
	SpawnForced(mine,GetActorX(0),GetActorY(0),GetActorZ(0),newTid);
	SetActorAngle(newTid,GetActorAngle(0));
	SetActorPitch(newTid,GetActorPitch(0));
	SetPointerExt(AAPTR_Tracer,0,newTid);
	Thing_ChangeTid(newTid,0);
	
	while(!(ClassifyActor(0) > 1))
	{
		Warp(AAPTR_Tracer,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_USEPTR);
		Delay(1);
	}
}

str Q3Weapons[13] = { "Q3Gauntlet", "Q3Machinegun", "Q3GrenadeLauncher", "Q3Shotgun", "Q3Nailgun", "Q3LightningGun", "Q3RocketLauncher", "Q3Plasmagun", "Q3BFG10K", "Q3Chaingun", "Q3Railgun", "Q3ProximityLauncher", "Q3HeavyMachineGun" };
str Q3Ammos[13] = { "", "-1", "Q3GrenadeLauncherAmmo", "Shell", "Clip", "Clip", "RocketAmmo", "Cell", "Cell", "Q3ChaingunAmmo", "Shell", "Q3GrenadeLauncherAmmo", "Clip" };
str Q3AmmoIcons[13] = { "", "MB", "GR", "SH", "NL", "LG", "RK", "PL", "BF", "CB", "SL", "PX", "HG" };
str Q3WeaponSelections[13] = { "Q3GauntletSelected", "Q3MachinegunSelected", "Q3GrenadeLauncherSelected", "Q3ShotgunSelected", "Q3NailgunSelected", "Q3LightningGunSelected", "Q3RocketLauncherSelected", "Q3PlasmagunSelected", "Q3BFG10KSelected", "Q3ChaingunSelected", "Q3RailgunSelected", "Q3ProximityLauncherSelected", "Q3HeavyMachineGunSelected" };
str Q3WeaponIcons[13] = { "Q3WBAR1", "Q3WBAR2", "Q3WBAR4", "Q3WBAR3", "Q3WBARB", "Q3WBAR6", "Q3WBAR5", "Q3WBAR8", "Q3WBAR9", "Q3WBARA", "Q3WBAR7", "Q3WBARC", "Q3WBARD" };
str Q3PowerupItems[5] = { "PowerQ3BattleSuitProtection", "PowerQ3QuadDamageFactor", "PowerQ3HasteTurbo", "PowerQ3RegenerationDummy", "PowerQ3InvisibilityCloak" };
str Q3PowerupSounds[5] = { "Quake3/Items/BioSuitWearOff", "Quake3/Items/BioSuitWearOff", "Quake3/Items/BioSuitWearOff", "Quake3/Items/BioSuitWearOff", "Quake3/Items/BioSuitWearOff" };
str Q3PowerupIcons[5] = { "Q3ENVIRO", "Q3QUAD", "Q3HASTE", "Q3REGEN", "Q3INVIS" };
str Q3PowerupGlow[5] = { "Q3BattleSuitGlowToken", "Q3QuadDamageGlowToken", "Q3HasteGlowToken", "Q3RegenerationGlowToken" };

Script "Q3Loop" (void)
{
	int a = 0;
	int steptimer = timer();
	int pTics = 0;
	int aTics = 0;
	int activePowerups;
	int ammoRotCounter = 16;
	int ammoRotDir = 1;
	int health, armor;
	str glow = "";

	While(CheckInventory("Q3Class"))
	{
		if(timer()%5 == 0)
			GiveInventory("Q3HudScroll",1);
		else
			TakeInventory("Q3HudScroll",1);
			
		int newHud = CheckInventory("SamsaraUsingNewFullscreenHUD");
		health = GetActorProperty(0,APROP_Health);
		armor = CheckInventory("Armor");

		if(health < 0) { health = 0; } if(health > 999) { health = 999; }
		ACS_NamedExecuteWithResult("Q3HudHealthAndArmor",health,armor,newHud);
	
		steptimer = ACS_NamedExecuteWithResult("Q3_Decorate",0,0,steptimer,0.5/(magnitudeTwo_f(GetActorVelX(0),GetActorVelY(0))+1));
		for(a = 0; a < 13; a++)
		{
			if(CheckWeapon(Q3Weapons[a])) { GiveInventory(Q3WeaponSelections[a],1); }
			else { TakeInventory(Q3WeaponSelections[a],1); }
			
		}

        int KillCount = PlayerFrags();

        if (CheckInventory("ChickenModeOn")) { KillCount = CheckInventory("ChickenKillCount"); }
        else if (IsSinglePlayer() || IsCoop()) { KillCount = CheckInventory("KillCountAmountTrue"); }

		ACS_NamedExecuteWithResult("Q3HudKills",KillCount,newHud);
		
		activePowerups = 0;
		//HUD Stuff
		for(a = 0; a < 5; a++)
		{
			pTics = GetActorPowerupTics(0,Q3PowerupItems[a]);
			if(pTics > 0)
			{
				glow = Q3PowerupGlow[a];
				
				if(strlen(glow) > 0)			
					GiveInventory(glow, 1);
				
				switch(a)
				{
					default:
						if(pTics/35 <= 5 && pTics % 35 == 0) { PlaySound(0,Q3PowerupSounds[a],CHAN_7); }
						break;
					/*case 1:
						if(pTics/35 == 3 && pTics % 35 == 0) { PlaySound(0,Q3PowerupSounds[a],CHAN_7); }
						break;*/
					case 3:
                        int regenmax = 200;

                        if (getMaxHealth(0) > 200) { regenmax = getMaxHealth(0); }

                        if (GetCVar("samsara_nohealthcap")) { regenmax = INTMAX; }
                        else if (regenmax < 250 && CheckInventory("SamsaraHasProsperity")) { regenmax = 250; }

						if (pTics % 35 == 0 && GetActorProperty(0, APROP_Health) < regenmax) 
						{
                            if (GetActorProperty(0, APROP_Health) + 5 > regenmax) { SetActorProperty(0, APROP_Health, regenmax); }
                            else { SetActorProperty(0, APROP_Health, GetActorProperty(0, APROP_Health) + 5); }

							PlaySound(0, "Quake3/Items/RegenActive", CHAN_7);
						}
						if (pTics / 35 <= 5 && pTics % 35 == 0) { PlaySound(0, Q3PowerupSounds[a], CHAN_7); }
						break;
				}
				
				activePowerups++;
				ACS_NamedExecuteWithResult("Q3HudPowerup",a,pTics,activePowerups);
			}
			else
			{
				RemoveMessages(25000+(a*2),25001+(a*2));
			}
		}
		
		//Drawing Ammo
		for(a = 0; a < 13; a++)
		{
			if(CheckWeapon(Q3Weapons[a]))
			{
				if(strlen(Q3Ammos[a]) == 0)
				{
					RemoveMessages(25100,25101);
					break;
				}
				if(timer()%3==0)
				{
					ammoRotCounter += ammoRotDir;
					if(ammoRotCounter == 0 || ammoRotCounter == 30)
						ammoRotDir *= -1;		
				}
				
				ACS_NamedExecuteWithResult("Q3HudAmmo",a,ammoRotCounter,newHud);
				break;
			}
		}
		
		//Mugshot!
		ACS_NamedExecuteWithResult("Q3DrawMugshot",((timer()/3)%160)+1,newHud);	
		
		//Ammo Capacities
		ACS_NamedExecuteWithResult("Q3DrawAmmoCapacity",CheckInventory("Clip"),newHud,0);
		ACS_NamedExecuteWithResult("Q3DrawAmmoCapacity",CheckInventory("Shell"),newHud,1);
		ACS_NamedExecuteWithResult("Q3DrawAmmoCapacity",CheckInventory("RocketAmmo"),newHud,2);
		ACS_NamedExecuteWithResult("Q3DrawAmmoCapacity",CheckInventory("Cell"),newHud,3);
		ACS_NamedExecuteWithResult("Q3DrawAmmoCapacity",CheckInventory("Q3ChaingunAmmo"),newHud,4);
		ACS_NamedExecuteWithResult("Q3DrawAmmoCapacity",CheckInventory("Q3GrenadeLauncherAmmo"),newHud,5);
		
		//Other
		if(CheckInventory("Q3AmmoRegenerationDummy"))
		{
			if(timer()%52 == 0)
			{
				aTics = 0;
				until(CheckInventory("Clip") >= 50 || aTics == 5)
				{
					aTics++;	GiveInventory("Clip",1);
				}
				aTics = 0;
				until(CheckInventory("Shell") >= 10 || aTics == 1)
				{
					aTics++;	GiveInventory("Shell",1);
				}
				aTics = 0;
				until(CheckInventory("RocketAmmo") >= 10 || aTics == 1)
				{
					aTics++;	GiveInventory("RocketAmmo",1);
				}
				aTics = 0;
				until(CheckInventory("Cell") >= 60 || aTics == 6)
				{
					aTics++;	GiveInventory("Cell",1);
				}
			}
		}
		
		//Guess I do need this twice
		int wep = 0;
		int totalWeps = 0;
		for(wep = 0; wep < 13; wep++)
		{
			if(CheckInventory(Q3Weapons[wep]))
			{
				totalWeps++;
			}
		}
		int weaponNum = 0;
		int weaponIndex = 0;
		for(wep = 0; wep < 13; wep++)
		{
			if(CheckInventory(Q3Weapons[wep]))
			{
				ACS_NamedExecuteWithResult("Q3DrawWeaponBar",weaponNum,newHud,totalWeps,weaponIndex);
				
				if(CheckWeapon(Q3Weapons[wep]))
					ACS_NamedExecuteWithResult("Q3DrawWeaponBarSelection",weaponNum,newHud,totalWeps,weaponIndex);
					
				weaponIndex++;
			}
			else
			{
				RemoveMessages(25200+wep+1,25200+wep+1);
				RemoveMessages(25220+wep+1,25220+wep+1);
				RemoveMessages(25240+wep+1,25240+wep+1);
			}
			weaponNum++;
		}
		
		Delay(1);
	}
	
	RemoveMessages(25000,25320);
}

Script "Q3DrawMugshot" (int image, int newHud) clientside
{
	str zerobuffer = "";
	if(image < 10) zerobuffer = "00";
	else if(image < 100) zerobuffer = "0";
	if(GetCvar("screenblocks")==11 && newHud)
	{
		SetHudSize(1600,1200,1);	
		SetFont(strparam(s:"Q3SGH",s:zerobuffer,d:image));
		HudMessage(s:"A";HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITHFULLMAP,25105,CR_UNTRANSLATED,800.0,1200.2,60.0);	
		HudMessage(s:"A";HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD|HUDMSG_NOTWITH3DVIEW,25109,CR_UNTRANSLATED,900.0,1150.2,60.0);
	}
	else if(GetCvar("screenblocks") < 11)
	{
		RemoveMessages(25109,25109);
		SetHudSize(1600,1200,1);
		SetFont(strparam(s:"Q3SGH",s:zerobuffer,d:image));
		HudMessage(s:"A";HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD,25105,CR_UNTRANSLATED,900.0,1150.2,60.0);
	}
	else
	{
		RemoveMessages(25105,25105);
		RemoveMessages(25109,25109);
	}
}

Script "Q3HudHealthAndArmor" (int health, int armor, int newHud) clientside
{
	if(GetCvar("screenblocks")==11 && newHud)
	{
		SetHudSize(640,400,1);
		SetFont("Q3NUMFNT");
		HudMessage(d:health;HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,25102,"Q3Gold",300.2,396.2,60.0);
		HudMessage(d:armor;HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,25103,"Q3Gold",496.2,396.2,60.0);
	}
	else
	{
		RemoveMessages(25102,25103);
		RemoveMessages(25110,25113);
	}
}

Script "Q3HudAmmo" (int a, int graphic, int newHud) clientside
{
	if(GetCvar("screenblocks")==11 && newHud)
	{
		SetHudSize(2000,1500,1);
		SetFont(strparam(s:"Q3AM",s:Q3AmmoIcons[a],s:graphic < 10 ? "0" : "",d:graphic));
		HudMessage(s:"A";HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD,25101,CR_UNTRANSLATED,382.1,1480.2,60.0);
		SetHudSize(640,400,1);
		SetFont("Q3NUMFNT");
        if (!StrCmp(Q3Ammos[a], "-1"))
        {
            if (CheckInventory("PistolModeOn")) { HudMessage(d:CheckInventory("Clip");HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,25100,"Q3Gold",128.2,396.2,60.0); }
            else { HudMessage(s:"";HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,25100,"Q3Gold",128.2,396.2,60.0); }
        }
        else { HudMessage(d:CheckInventory(Q3Ammos[a]);HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD|HUDMSG_COLORSTRING,25100,"Q3Gold",128.2,396.2,60.0); }
	}
	else
	{
		RemoveMessages(25100,25101);
	}
}

Script "Q3HudPowerup" (int type, int tics, int active) clientside
{
	SetHudSize(640,480,1);
	
	SetFont(Q3PowerupIcons[type]);
	HudMessage(s:"A";HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD,25000+(type*2),CR_UNTRANSLATED,600.1,380.0-(32.0*active),60.0);
	
	SetFont("Q3NUMFNT");
	HudMessage(d:tics/35;HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD,25001+(type*2),CR_UNTRANSLATED,600.2,380.0-(32.0*active),60.0);
}

Script "Q3HudKills" (int kills, int newHud) clientside
{
	if(GetCvar("screenblocks")==11 && newHud)
	{
		SetHudSize(640,400,1);
		SetFont("Q3NM2FNT");
		HudMessage(d:kills;HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD,25106,CR_UNTRANSLATED,638.2,360.2,60.0);
		HudMessage(d:kills;HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD,25107,CR_BLACK,640.2,362.2,60.0);
		SetFont("Q3KBACK");
		SetHudSize(120,300,1);
		HudMessage(s:"A";HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD|HUDMSG_ALPHA,25108,CR_UNTRANSLATED,120.2,272.2,60.0,0.167);
	}
	else
	{
		RemoveMessages(25106,25108);
	}
}

Script "Q3DrawWeaponBar" (int weaponNum, int newHud, int totalWeapons, int weaponIndex) clientside
{
	int position = (totalWeapons / 2) - weaponIndex;
	if(GetCvar("screenblocks")==11 && newHud)
	{
		SetHudSize(640,400,1);
		SetFont(Q3WeaponIcons[weaponNum]);
		HudMessage(s:"A";HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD,25200+weaponNum+1,CR_UNTRANSLATED,336.0 - 36.0 * position,30.0,60.0);
		if(weaponNum > 1 && weaponNum < 9)
		{
			SetFont("Q3NM2FNT");
			HudMessage(d:weaponNum-1;HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD,25220+weaponNum+1,CR_UNTRANSLATED,336.0 - 36.0 * position,6.0,60.0);
			HudMessage(d:weaponNum-1;HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD,25240+weaponNum+1,CR_BLACK,338.0 - 36.0 * position,8.0,60.0);
		}
	}
	else
	{
		RemoveMessages(25200+weaponNum+1,25200+weaponNum+1);
		RemoveMessages(25220+weaponNum+1,25220+weaponNum+1);
		RemoveMessages(25240+weaponNum+1,25240+weaponNum+1);
	}
}

Script "Q3DrawWeaponBarSelection" (int weaponNum, int newHud, int totalWeapons, int weaponIndex) clientside
{
	int position = (totalWeapons / 2) - weaponIndex;
	if(GetCvar("screenblocks")==11 && newHud)
	{
		SetHudSize(640,400,1);
		SetFont("Q3WBARS");
		HudMessage(s:"A";HUDMSG_PLAIN|HUDMSG_LAYER_OVERHUD,25200,CR_UNTRANSLATED,336.0 - 36.0 * position,30.0,60.0);
	}
	else
	{
		RemoveMessages(25200,25200);
	}
}

Script "Q3DrawAmmoCapacity" (int ammoAmount, int legacy, int offset) clientside
{
	if(legacy || GetCvar("screenblocks") < 11)
	{
		int row = 0;
		int rowOffset = 68.0;
		int colOffset = 18.0;
		int trueOffset = offset;
		SetHudSize(960,600,1);
		switch(offset)
		{
			case 0: SetFont("AMSMA0"); break;
			case 1: SetFont("AMSMB0"); break;
			case 2: SetFont("AMSMC0"); break;
			case 3: SetFont("AMSMD0"); break;
			case 4: SetFont("AMSMN0"); break;
			case 5: SetFont("AMSMS0"); break;
		}
		if(offset > 2)
		{
			row++;
			offset -= 3;
		}
		rowOffset *= row;
		colOffset *= offset;
		HudMessage(s:"A";HUDMSG_LAYER_OVERHUD|HUDMSG_PLAIN|HUDMSG_COLORSTRING,25300+trueOffset*2,CR_UNTRANSLATED,-128.0+rowOffset,536.0+colOffset,60.0);
		SetFont("Q3NMBFNT");
		SetHudSize(960,600,1);
		HudMessage(d:ammoAmount;HUDMSG_LAYER_OVERHUD|HUDMSG_PLAIN|HUDMSG_COLORSTRING,25301+trueOffset*2,"Q3Gold2",-124.1+rowOffset,524.0+colOffset,60.0);
	}
	else
	{
		RemoveMessages(25300,25320);
	}
}

Script "Q3PlayerCodeFunctions" (int func)
{
	int result = 0;
	int forward = GetPlayerInput(-1, INPUT_FORWARDMOVE);
	int side = GetPlayerInput(-1, INPUT_SIDEMOVE);
	int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
	int running = abs(GetPlayerInput(-1, INPUT_FORWARDMOVE)) > 6400 || abs(GetPlayerInput(-1, INPUT_SIDEMOVE)) > 6144;
	switch(func)
	{
		case 0:
			result = (forward != 0 || side != 0) && running;
			break;
		case 1:
			result = (forward != 0 || side != 0) && !running;
			break;
		case 2:
			result = (forward < 0) && running;
			break;
		case 3:
			result = GetActorViewHeight(0) <= 38.0;
			break;
		case 4:
			result = (buttons & BT_JUMP) > 0 && forward >= 0;
			break;
		case 5:
			result = (buttons & BT_JUMP) > 0 && forward < 0;
			break;
	}
	SetResultValue(result);
}

Script "Q3_Decorate" (int value, int arg1, int arg2, int arg3)
{
	switch(value)
	{
		case 0: //do footstep - type, steptimer, movement
			if(timer()-arg2>arg3 && GetActorZ(0) <= GetActorFloorZ(0)+4.0)
			{
				if(!CheckInventory("Q3Swimming") && !CheckInventory("SamsaraQuietFootsteps"))
					SpawnSpotForced("SamsaraQuake3FootstepPlayer",0,0,0);
					
				SetResultValue(timer());
			}
			else	
				SetResultValue(arg2);
			break;
		case 1: //Check Jump
			if(GetPlayerInput(-1, INPUT_BUTTONS) & BT_JUMP && (GetPlayerInput(-1,INPUT_FORWARDMOVE) != 0 || GetPlayerInput(-1,INPUT_SIDEMOVE) != 0))
				SetResultValue(1);
			break;
		case 2:
			SetActivatorToTarget(0);
			if(GetActorPitch(0) > 0.175)
				SetResultValue(1);
			break;	
	}
}

Script "Q3_BloodGenerator_Offsets" (void)
{
	int missilex = GetActorX(0);
	int missiley = GetActorY(0);
	int missilez = GetActorZ(0);
	SetActivator(0,AAPTR_Tracer);
	int enemyx = GetActorX(0);
	int enemyy = GetActorY(0);
	int enemyz = GetActorZ(0);
	int currentangle = GetActorAngle(0);
	int vang = VectorAngle(enemyx - missilex, enemyy - missiley);
	int angle = vang % 1.0;
	TakeInventory("Q3_BloodGeneratorAngle",999999);
	TakeInventory("Q3_BloodGeneratorZ",999999);
	GiveInventory("Q3_BloodGeneratorAngle",angle+65536);
	GiveInventory("Q3_BloodGeneratorZ",(missilez - enemyz)>>16 + 65536);
}

Script "Q3_BloodGenerator_Return" (int mode) 
{
	int result;
	switch(mode)
	{
		case 1:
			result = ((CheckInventory("Q3_BloodGeneratorAngle") - 65536)/182)+180;
			break;
		case 2:
			result = CheckInventory("Q3_BloodGeneratorZ");
			break;
	}
	SetResultValue(result);
}

Script "Q3_Announcer" (int value)
{
	switch (value)
	{
	case 0:
		if (GameType() == GAME_NET_COOPERATIVE) { AmbientSound("Quake3/Items/Invisibility",127); }
		else { LocalAmbientSound("Quake3/Items/Invisibility",127); }
		break;
	case 1:
		if (GameType() == GAME_NET_COOPERATIVE) { AmbientSound("Quake3/Items/QuadDamage",127); }
		else { LocalAmbientSound("Quake3/Items/QuadDamage",127); }
		break;
	case 2:
		if (GameType() == GAME_NET_COOPERATIVE) { AmbientSound("Quake3/Items/BioSuit",127); }
		else { LocalAmbientSound("Quake3/Items/BioSuit",127); }
		break;
	case 3:
		if (GameType() == GAME_NET_COOPERATIVE) { AmbientSound("Quake3/Items/Haste",127); }
		else { LocalAmbientSound("Quake3/Items/Haste",127); }
		break;
	case 4:
		if (GameType() == GAME_NET_COOPERATIVE) { AmbientSound("Quake3/Items/Regeneration",127); }
		else { LocalAmbientSound("Quake3/Items/Regeneration",127); }
		break;
	case 5:
		if (GameType() == GAME_NET_COOPERATIVE) { AmbientSound("Quake3/Items/AmmoRegeneration",127); }
		else { LocalAmbientSound("Quake3/Items/AmmoRegeneration",127); }
		break;
	}
}